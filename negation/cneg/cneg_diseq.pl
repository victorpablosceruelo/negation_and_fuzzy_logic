:- module(cneg_diseq, 
	[
 	    equality/3, disequality/3,
	    diseq_geuqv/5, eq_geuqv/5,
	    diseq_geuqv_adv/6, eq_geuqv_adv/6,
	    get_disequalities_from_constraints_and_remove_them/2, 
	    get_diseq_constraints_in_term_variables/2,
	    remove_diseq_constraints_in_term_variables/1,
 	    prepare_attributes_for_printing/2,
	    cneg_diseq_echo/5
	], 
	[assertions]).

:- use_module(library('cneg/cneg_aux')).
:- use_package(attr).
:- use_package(dcg).
%:- use_module(engine(attributes)).

%:- use_package(debug).
%:- use_package(trace).
%:- use_package(nodebug).

% For Ciao Prolog:
%:- multifile 
%        verify_attribute/2,
%        combine_attributes/2,
%	portray_attribute/2,
%	portray/1.

:- comment(title, "Disequality Management Library").

:- comment(author, "V@'{i}ctor Pablos Ceruelo").

:- comment(summary, "This module is capable of evaluating any disequality between terms 
	generated by the program transformation.").


% For XSB:
%:- import put_attr/3, get_attr/3, del_attr/2,
%	install_verify_attribute_handler/4,
%	install_attribute_portray_hook/3 % -- Do not use !!!
%	install_constraint_portray_hook/4
%	from machine.

% For XSB to verify attributes.
% :- install verify attribute handler(+Mod, −AttrValue, −Target, +Handler).
% :- install_verify_attribute_handler(dist, AttrValue, Target, verify_attribute(AttrValue, Target)).

% For XSB to portray results.
%:- install_constraint_portray_hook(dist,Contents,Vars,portray_constraints(Vars, Contents)).

% For XSB to portray results (at a very low level) :: Do not use !!!
% :- install attribute portray hook(Module,Attribute,Handler)
% :- install_attribute_portray_hook(dist,Attribute,portray_attribute(Attribute)).


% Local predicates used to easy migration between prologs. 
remove_attribute_local(Var) :- 
	echo_msg(2, 'logo', 'cneg_diseq', '', ''),
	echo_msg(2, 'aux', 'cneg_diseq', 'remove_attribute_local :: Var :: ', Var),
	del_attr_local(Var),
%	detach_attribute(Var),
	echo_msg(2, 'aux', 'cneg_diseq', '  -->> Var :: ', Var),
	echo_msg(2, 'nl', 'cneg_diseq', '', '').
%	detach_attribute(Var).
% XSB:	del_attr(Var, dist).

get_attribute_local(Var, Attribute) :-
	get_attr_local(Var, Attribute),
%	get_attribute(Var, Attribute),
% XSB:	get_attr(Var, dist, Attribute),
 	echo_msg(2, '', 'cneg_diseq', 'get_attribute_local :: Attribute', Attribute).

put_attribute_local(Var, Attribute) :-
	echo_msg(2, '', 'cneg_diseq', 'put_attribute_local :: Attribute', Attribute),
	echo_msg(2, 'logo', 'cneg_diseq', '', ''),
	echo_msg(2, 'aux', 'cneg_diseq', 'put_attribute_local', ''),
	echo_msg(2, 'aux', 'cneg_diseq', ' :: Var :: ', Var), 
%	get_attribute_if_any(Var), !,
	put_attr_local(Var, Attribute),
%	attach_attribute(Var, Attribute),
	echo_msg(2, 'aux', 'cneg_diseq', '  -->> Var :: ', Var),
	echo_msg(2, 'nl', 'cneg_diseq', '', '').
%	attach_attribute(Var, Attribute).
%	put_attr(Var, dist, Attribute).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Attributes contents are encapsulated via the following structure.

%:- dynamic var_attribute/2.
attribute_contents(var_attribute(Target, Disequalities), Target, Disequalities).
attribute_disequality_contents(disequality(Diseq_1, Diseq_2, EQ_Vars, UQ_Vars), Diseq_1, Diseq_2, EQ_Vars, UQ_Vars).
% equality_contents(equality(T1, T2), T1, T2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


attribute_goals(Term) --> 
	[Term : Attributes_For_Printing_Conj],
	 { prepare_attributes_for_printing(Term, Attributes_For_Printing_Conj) }.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% FROM: ../ciao/ciao-1.13/library/clpqr-common/clp_attr.pl
%
% :- multifile portray_attribute/2, portray/1.
% 
% portray_attribute(float(F),_) :- print(F).
% portray_attribute(term_wrap(_,T), _) :-
%         normalize(T, I, H),
%         H = [],                   % only if ground
%         print(I).
%
% portray(rat(N,D)) :- print(N/D).
% portray(eqn_var(Self,A,B,R,Nl)) :- print(eqn_var(Self,A,B,R,Nl)).

%attr_portray_hook(_Attribute, Var) :- 
%	cneg_diseq_echo(2, '', 'cneg_diseq', 'attr_portray_hook(_Attribute, Var)'),
%	cneg_diseq_echo(1, 'aux', 'cneg_diseq', Var).

%portray_attribute(_Attribute, Var) :-
%	cneg_diseq_echo(2, '', 'cneg_diseq', 'portray_attribute(_Attribute, Var)'),
%	cneg_diseq_echo(1, 'aux', 'cneg_diseq', Var).

%portray(Attribute) :-
%	cneg_diseq_echo(2, '', 'cneg_diseq', 'portray(Attribute)'),
%	attribute_contents(Attribute, Target, _Disequalities), !,
%	portray(Target).

%portray(Term) :-
%	cneg_diseq_echo(2, '', 'cneg_diseq', 'portray(Term)'),
%	cneg_diseq_echo(1, 'aux', 'cneg_diseq', Term).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%cneg_diseq_echo(Echo_Level, Mode, File_Name, Term) :-
%	echo_msg(Echo_Level, Mode, File_Name, Term, ' '). % Space for reading.

cneg_diseq_echo(Echo_Level, Mode, File_Name, _Msg, _Term) :-
	(
	    Mode == 'nl'
	;
	    Mode == 'logo'
	), !,
	echo_msg(Echo_Level, Mode, File_Name, '', '').

cneg_diseq_echo(Echo_Level, Mode, File_Name, Msg, Term) :-
	Mode == 'list',
	Term == [], !,
	echo_msg(Echo_Level, Mode, File_Name, Msg, '[] -- list end').

cneg_diseq_echo(Echo_Level, Mode, File_Name, Msg, Term) :-
	Mode == 'list',
	list_head_and_tail(Term, Head, Tail), !,
	cneg_diseq_echo(Echo_Level, '', File_Name, Msg, Head),
	cneg_diseq_echo(Echo_Level, 'list', File_Name, Msg, Tail).

cneg_diseq_echo(Echo_Level, Mode, File_Name, Term, Unused) :-
	Mode == 'aux', 
	Unused == '',
	!, 
	echo_msg(Echo_Level, 'aux', File_Name, Term, ''),
	prepare_attributes_for_printing(Term, Attributes_For_Printing_Conj),
	(
	    (   Attributes_For_Printing_Conj == [], !   )  % No attrs -> No printing.
	;
	    (   Attributes_For_Printing_Conj \== [], !, 
		echo_msg(Echo_Level, 'aux', File_Name, ' : ', Attributes_For_Printing_Conj)
	    )
	).

cneg_diseq_echo(Echo_Level, Mode, File_Name, Msg, Term) :-
	Mode == 'aux', 
	Term \== '',
	!, 
	cneg_diseq_echo(Echo_Level, Mode, File_Name, Msg, ''),
	cneg_diseq_echo(Echo_Level, Mode, File_Name, Term, '').

cneg_diseq_echo(Echo_Level, Mode, File_Name, Msg, Term) :-
	Mode \== 'nl', 
	Mode \== 'logo',
 	Mode \== 'list', 
 	Mode \== 'aux', 
	!,
	cneg_diseq_echo(Echo_Level, 'logo', File_Name, '', ''),
	cneg_diseq_echo(Echo_Level, 'aux', File_Name, Msg, ' :: '),
	cneg_diseq_echo(Echo_Level, 'aux', File_Name, Term, ''),
	echo_msg(Echo_Level, 'nl', File_Name, '', '').

cneg_diseq_echo(Echo_Level, _Mode, File_Name, Msg, Term) :-
	echo_msg(1, '', 'cneg_diseq', 'ERROR in cneg_diseq_echo printing', Msg), 
	echo_msg(1, '', 'cneg_diseq', 'ERROR in cneg_diseq_echo printing', Term), !,
	cneg_diseq_echo(Echo_Level, '', File_Name, Msg, Term).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	    
prepare_attributes_for_printing(Term, Attributes_For_Printing_Conj) :-
	echo_msg(2, '', 'cneg_diseq', 'attribute_goals :: Term', Term),
	get_attributes_in_term_vars(Term, Vars_With_Attrs, _Vars_Without_Attrs), !,
	format_attributes_for_printing(Vars_With_Attrs, Attributes_For_Printing), !,
	attrs_list_to_conj(Attributes_For_Printing, Attributes_For_Printing_Conj), !,
	echo_msg(2, '', 'cneg_diseq', 'attribute_goals :: Attrs', Attributes_For_Printing_Conj), 
	!. % Backtracking forbidden.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

get_attributes_in_term_vars(Term, Vars_With_Attrs, Vars_Without_Attrs) :-
	cneg_aux:varsbag(Term, [], [], Vars),
	get_attributes_in_term_vars_aux(Vars, [], Vars_With_Attrs, [], Vars_Without_Attrs),
	echo_msg(2, '', 'cneg_diseq', 'Variables with attributes', Vars_With_Attrs), 
%	echo_msg(2, 'nl', 'cneg_diseq', '', ''),
	echo_msg(2, '', 'cneg_diseq', 'Variables without attributes', Vars_Without_Attrs). 
%	echo_msg(2, 'nl', 'cneg_diseq', '', '').

get_attributes_in_term_vars_aux([], Vars_WA, Vars_WA, Vars_WOA, Vars_WOA) :- !.
get_attributes_in_term_vars_aux([Var | Vars], Vars_WA_In, Vars_WA_Out, Vars_WOA_In, Vars_WOA_Out) :-
	get_attribute_local(Var, Attr), !,
	get_attributes_in_term_vars_aux(Vars, [Attr | Vars_WA_In], Vars_WA_Out, Vars_WOA_In, Vars_WOA_Out).
get_attributes_in_term_vars_aux([Var | Vars], Vars_WA_In, Vars_WA_Out, Vars_WOA_In, Vars_WOA_Out) :-
	get_attributes_in_term_vars_aux(Vars, Vars_WA_In, Vars_WA_Out, [ Var | Vars_WOA_In ], Vars_WOA_Out).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

format_attributes_for_printing([], []) :- !.
format_attributes_for_printing([Attribute|Attributes], [Printing_Attribute|Printing_Attributes]) :-
%	echo_msg(2, '', 'cneg_diseq', 'format_attribute_for_printing :: Attribute', Attribute), 
	format_attribute_for_printing(Attribute, Printing_Attribute),
%	echo_msg(2, '', 'cneg_diseq', 'format_attribute_for_printing :: Printing_Attribute', Printing_Attribute),
	format_attributes_for_printing(Attributes, Printing_Attributes).

format_attribute_for_printing(Attribute, Printing_Attribute) :-
	attribute_contents(Attribute, _Target, Disequalities),
	format_diseqs_list_for_printing(Disequalities, Printing_Attribute).

format_diseqs_list_for_printing([], []) :- !.
format_diseqs_list_for_printing([Disequality | Disequalities], [Print_Disequality | Print_Disequalities]) :-
%	echo_msg(2, '', 'cneg_diseq', 'format_diseq_for_printing :: Disequality', Disequality), 
	format_diseq_for_printing(Disequality, Print_Disequality),
%	echo_msg(2, '', 'cneg_diseq', 'format_diseq_for_printing :: Print_Disequality', Print_Disequality), 
	format_diseqs_list_for_printing(Disequalities, Print_Disequalities).

% Need to convert to a single term everything.
% This predicate is not working as expected.
format_diseq_for_printing(Disequality, Print_Disequality) :-
	attribute_disequality_contents(Disequality, T1, T2, _EQ_Vars_In, UQ_Vars_In),
	varsbag_clean_up(UQ_Vars_In, UQ_Vars),
	varsbag((T1, T2), [], [], Terms_Vars), 
	varsbag_intersection(UQ_Vars, Terms_Vars, Real_UQ_Vars),
	functor(Print_Disequality, 'disequality', 3), 
	arg(1, Print_Disequality, T1), 
	arg(2, Print_Disequality, T2), 
	arg(3, Print_Disequality, Real_UQ_Vars).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

attrs_list_to_conj([], []) :- !. % No attributes.
attrs_list_to_conj(Attrs_List, Attrs_Conj) :- % One or more attributes.
	Attrs_List \== [], !,
	attrs_list_to_conj_aux(Attrs_List, Attrs_Conj).

attrs_list_to_conj_aux([Elto], Real_Elto) :- !,
	attrs_list_to_conj_aux(Elto, Real_Elto).
attrs_list_to_conj_aux([Elto | List], New_Elto) :- !,
	functor(New_Elto, '/\\', 2),
	attrs_list_to_conj_aux(Elto, Real_Elto),
	arg(1, New_Elto, Real_Elto), 
	arg(2, New_Elto, More_Eltos), 
	attrs_list_to_conj(List, More_Eltos).
attrs_list_to_conj_aux(Elto, Elto) :- 
	Elto \== [], !. % An empty list is not an individual.
	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%% CONSTRAINT VERIFICATION %%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

attr_unify_hook(Attribute, Value) :-
	echo_msg(2, 'nl', 'cneg_diseq', '', ''),
	echo_msg(2, '', 'cneg_diseq', 'attr_unify_hook :: Attr_Fomat', 'var_attribute(Target, [disequality(Diseq_1, Diseq_2, EQ_Vars, UQ_Vars)])'),
	echo_msg(2, '', 'cneg_diseq', 'attr_unify_hook :: (Attribute, Value)', (Attribute, Value)),
	attr_unify_hook_aux(Attribute, Value).

attr_unify_hook_aux(Attribute, Value) :-
	var(Value),
	get_attribute_local(Value, Attribute_Value), !,
	remove_attribute_local(Value), 
	echo_msg(2, '', 'cneg_diseq', 'attr_unify_hook :: Attribute_Value', Attribute_Value),
	attribute_contents(Attribute, _OldTarget_Var_1, Diseqs_Var_1), 
	attribute_contents(Attribute_Value, _OldTarget_Var_2, Diseqs_Var_2), 
	!,
	cneg_aux:append(Diseqs_Var_1, Diseqs_Var_2, Diseqs),
	test_and_update_vars_attributes(Diseqs, 'fail', 'true').

attr_unify_hook_aux(Attribute, Value) :-
	var(Value), !,
	echo_msg(2, '', 'cneg_diseq', 'attr_unify_hook :: Var_Value (no attr)', Value),
	attribute_contents(Attribute, _OldTarget_Var_1, Diseqs), 
	echo_msg(2, '', 'cneg_diseq', 'test_and_update_vars_attributes :: (Disequalities)', (Diseqs)), 
	test_and_update_vars_attributes(Diseqs, 'fail', 'true').

attr_unify_hook_aux(Attribute, Value) :-
	!,
	echo_msg(2, '', 'cneg_diseq', 'attr_unify_hook :: Nonvar_Value (no attr)', Value),
	attribute_contents(Attribute, _OldTarget_Var_1, Diseqs), 
	echo_msg(2, '', 'cneg_diseq', 'test_and_update_vars_attributes :: (Disequalities)', (Diseqs)), 
	test_and_update_vars_attributes(Diseqs, 'fail', 'true').



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%perform_substitutions([], _EQV, _UQV) :- !.
%perform_substitutions([(OldTarget, NewTarget) | MoreSubst], EQV, UQV) :-
%	varsbag(UQV, [], [], UQV_Aux), !, % Only vars, please.
%	varsbag(EQV, UQV_Aux, [], EQV_Aux), !, % Only vars, please.
%	varsbag((OldTarget, NewTarget), [], [], Vars_Targets), !,
%	varsbag_intersection(Vars_Targets, UQV_Aux, Intersection), !,
%	(
%	    (
%		Intersection == [], !,
%		OldTarget = NewTarget,
%		perform_substitutions(MoreSubst, EQV_Aux, UQV_Aux)
%	    )
%	;
%	    (
%		Intersection \== [], !,
%		echo_msg(2, '', 'cneg_diseq', 'perform_substitutions :: Impossible :: (OldTarget, NewTarget, EQV, UQV)', (OldTarget, NewTarget, EQV_Aux, UQV_Aux)),
%		!, fail
%	    )
%	).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

get_and_remove_eqv_and_uqv_from_diseqs([], EQV_In, EQV_In, UQV_In, UQV_In, []) :- !.
get_and_remove_eqv_and_uqv_from_diseqs([Diseq | Diseqs], EQV_In, EQV_Out, UQV_In, UQV_Out, [(T1, T2) | More_Ts]) :-
	attribute_disequality_contents(Diseq, T1, T2, Diseq_EQV_In, Diseq_UQV_In),
	varsbag_clean_up(Diseq_EQV_In, Diseq_EQV),
	varsbag_clean_up(Diseq_UQV_In, Diseq_UQV),
	varsbag(Diseq_EQV, [], EQV_In, EQV_Aux),
	varsbag(Diseq_UQV, [], UQV_In, UQV_Aux),
	get_and_remove_eqv_and_uqv_from_diseqs(Diseqs, EQV_Aux, EQV_Out, UQV_Aux, UQV_Out, More_Ts).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% An~ade la formula al atributo de las variables implicadas
% Por q tendriamos q tener en cuenta otros atributos?
% Como cada uno tiene su manejador, tratar de mezclar los atributos no aporta nada.

test_and_update_vars_attributes(New_Diseqs, Can_Fail, Result) :-
%	echo_msg(1, '', 'cneg_diseq', 'test_and_update_vars_attributes :: New_Diseqs', New_Diseqs),  

	cneg_aux:varsbag(New_Diseqs, [], [], New_Diseq_Vars), !,
	retrieve_affected_disequalities(New_Diseq_Vars, [], [], Old_Diseqs), !,
%	echo_msg(1, '', 'cneg_diseq', 'test_and_update_vars_attributes :: Old_Diseqs', Old_Diseqs),

	% Get which variables are EQV so we distinguish them from UQV.
	get_and_remove_eqv_and_uqv_from_diseqs(New_Diseqs, [], EQV_Tmp, [], UQV_Tmp, New_Diseqs_Aux),
	get_and_remove_eqv_and_uqv_from_diseqs(Old_Diseqs, EQV_Tmp, All_EQV_Aux, UQV_Tmp, All_UQV, Old_Diseqs_Aux),
	varsbag(All_EQV_Aux, All_UQV, [], All_EQV), % The sets must be exclusive.
%	echo_msg(1, '', 'cneg_diseq', 'test_and_update_vars_attributes :: (All_EQV, All_UQV)', (All_EQV, All_UQV)),

	% At first we check that the new disequalities can be added to the old ones.
	simplify_disequations(New_Diseqs_Aux, [], Simplified_Diseqs_1, All_EQV, Can_Fail, Result),
	% At last we check that the old disequalities are still valid.
	simplify_disequations(Old_Diseqs_Aux, [], Simplified_Diseqs_2, All_EQV, 'fail', 'true'),

	% Now we aggregate all of them.
	accumulate_disequations(Simplified_Diseqs_1, Simplified_Diseqs_2, Simplified_Diseqs),

%	echo_msg(1, '', 'cneg_diseq', 'test_and_update_vars_attributes :: Simplified_Diseqs', Simplified_Diseqs),
	restore_attributes(Simplified_Diseqs, All_EQV, All_UQV).

retrieve_affected_disequalities([], _Visited_Vars, Diseq_Acc_Out, Diseq_Acc_Out) :- !. % Loop over vars list.
retrieve_affected_disequalities([Var|Vars], Visited_Vars, Diseq_Acc_In, Diseq_Acc_Out):- 
	var(Var), % It cannot be other things ...
	get_attribute_local(Var, Attribute), !,
	attribute_contents(Attribute, Var, Disequalities), 
	remove_attribute_local(Var), 

	cneg_aux:varsbag(Disequalities, [Var|Visited_Vars], Vars, New_Vars),
	accumulate_disequations(Disequalities, Diseq_Acc_In, Diseq_Acc_Aux),
        retrieve_affected_disequalities(New_Vars, [Var|Visited_Vars], Diseq_Acc_Aux, Diseq_Acc_Out).

retrieve_affected_disequalities([Var|Vars_In], Visited_Vars, Diseq_Acc_In, Diseq_Acc_Out) :- 
        retrieve_affected_disequalities(Vars_In, [Var|Visited_Vars], Diseq_Acc_In, Diseq_Acc_Out).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

restore_attributes(Diseqs_In, All_EQV, All_UQV) :- 
	cneg_aux:varsbag(All_EQV, [], [], EQV),
	cneg_aux:varsbag(All_UQV, EQV, [], UQV), % Exhaustive sets, please.
	prepare_diseqs_for_restore(Diseqs_In, Diseqs, EQV, UQV, [], Affected_Vars),
%	echo_msg(1, '', 'cneg_diseq', 'restore_attributes_vars(Affected_Vars, Diseqs)', (Affected_Vars, Diseqs)),
	restore_attributes_vars(Affected_Vars, Diseqs).

prepare_diseqs_for_restore([], [], _EQV, _UQV, Affected_Vars, Affected_Vars) :- !.
prepare_diseqs_for_restore([(T1, T2) | Diseqs_In], [(Diseq, Vars) | Diseqs_Out], EQV, UQV, Aff_Vars_In, Aff_Vars_Out) :-
	cneg_aux:varsbag((T1, T2), [], [], Vars), 
	cneg_aux:varsbag(Vars, [], Aff_Vars_In, Aff_Vars_Aux), !,
	attribute_disequality_contents(Diseq, T1, T2, EQV, UQV),
	prepare_diseqs_for_restore(Diseqs_In, Diseqs_Out, EQV, UQV, Aff_Vars_Aux, Aff_Vars_Out).

restore_attributes_vars([], _Diseqs) :- !.
restore_attributes_vars([Var | Affected_Vars], Diseqs) :-
	affected_diseqs(Var, Diseqs, Affected_Diseqs),
	restore_attributes_var(Var, Affected_Diseqs),
	restore_attributes_vars(Affected_Vars, Diseqs).

affected_diseqs(_Var, [], []) :- !.
affected_diseqs(Var, [(Diseq, Diseq_Vars) | Diseqs], [Diseq | Affected_Diseqs]) :-
	cneg_aux:memberchk(Var, Diseq_Vars), !,
	affected_diseqs(Var, Diseqs, Affected_Diseqs).
affected_diseqs(Var, [_Diseq | Diseqs], Affected_Diseqs) :-
	affected_diseqs(Var, Diseqs, Affected_Diseqs).

restore_attributes_var(Var, _Diseqs) :-
	var(Var),
	get_attribute_local(Var, Attribute), !,
	echo_msg(1, 'nl', 'cneg_diseq', '', ''),
	echo_msg(1, '', 'cneg_diseq', 'ERROR: var has an attribute. Attribute: ', Attribute),
	echo_msg(1, 'nl', 'cneg_diseq', '', ''),
	fail.

restore_attributes_var(Var, Diseqs) :-
	var(Var),
	Diseqs == [],
	!, % We do not want empty attributes.
	fail.

restore_attributes_var(Var, Diseqs) :-
	Diseqs \== [],
	var(Var),

	attribute_contents(Attribute, Var, Diseqs),
	put_attribute_local(Var, Attribute).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

accumulate_disequations(Diseqs_In, Diseqs_Acc, Diseqs_Out) :-
	echo_msg(0, '', 'cneg_diseq', 'accumulate_disequations :: Diseqs_In', Diseqs_In),
	echo_msg(0, '', 'cneg_diseq', 'accumulate_disequations :: Diseqs_Acc', Diseqs_Acc),
	accumulate_disequations_aux(Diseqs_In, Diseqs_Acc, Diseqs_Out),
	echo_msg(0, '', 'cneg_diseq', 'accumulate_disequations :: Diseqs_Out', Diseqs_Out).

accumulate_disequations_aux([], Diseq_Acc_Out, Diseq_Acc_Out) :- !.
accumulate_disequations_aux([Diseq | Diseq_List], Diseq_Acc_In, Diseq_Acc_Out) :-
	cneg_aux:memberchk(Diseq, Diseq_Acc_In), !, % It is there.
	accumulate_disequations_aux(Diseq_List, Diseq_Acc_In, Diseq_Acc_Out).
accumulate_disequations_aux([(T1, T2) | Diseq_List], Diseq_Acc_In, Diseq_Acc_Out) :-
%	attribute_disequality_contents(Diseq, T1, T2, EQV, UQV),
%	attribute_disequality_contents(Diseq_Aux, T2, T1, EQV, UQV), % Order inversion.
	cneg_aux:memberchk((T2, T1), Diseq_Acc_In), !, % It is there.
	accumulate_disequations_aux(Diseq_List, Diseq_Acc_In, Diseq_Acc_Out).
accumulate_disequations_aux([Diseq | Diseq_List], Diseq_Acc_In, Diseq_Acc_Out) :-
	accumulate_disequations_aux(Diseq_List, [Diseq | Diseq_Acc_In], Diseq_Acc_Out).

% Note that each disequality analized gets a clean status on its Result variable.
% This is because all of them need to be satisfied, we should not override the status of
% a previous disequality with the status of the current one.
simplify_disequations([], Diseq_Acc_In, Diseq_Acc_In, _EQV, _Can_Fail, 'true') :- !.

simplify_disequations([Diseq|Diseq_List], Diseq_Acc_In, Diseq_Acc_Out, EQV, Can_Fail, Result_In) :- !,
	simplify_disequation([Diseq], Simplified_Diseq, EQV, Can_Fail, Result_Aux),
	and_between_statuses(Result_Aux, Result_Out, Result_In),
	accumulate_disequations(Simplified_Diseq, Diseq_Acc_In, Diseq_Acc_Aux),
	simplify_disequations(Diseq_List, Diseq_Acc_Aux, Diseq_Acc_Out, EQV, Can_Fail, Result_Out).

and_between_statuses('true', 'true', 'true').
and_between_statuses('fail', 'true', 'fail').
and_between_statuses('true', 'fail', 'fail').
and_between_statuses('fail', 'fail', 'fail').

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% just for debug.
simplify_disequation(Diseqs, Answer, EQV, Can_Fail, Result) :-
	echo_msg(0, '', 'cneg_diseq', '', ''),
	echo_msg(0, '', 'cneg_diseq', 'simplify_disequation :: (Diseqs, ---, EQV, Can_Fail)', (Diseqs, '---', EQV, Can_Fail)),
	simplify_disequation_aux(Diseqs, Answer, EQV, Can_Fail, Result),
	echo_msg(0, '', 'cneg_diseq', 'simplify_disequation :: (Result, Answer)', (Result, Answer)),
	echo_msg(0, '', 'cneg_diseq', '', '').

% For the case we do not have a disequality to simplify.
% The answer is obviously empty, but we might fail because of Can_Fail = fail.
simplify_disequation_aux([], [], _EQV, Can_Fail, Result) :- 
	!,
%	echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: Diseqs = []', ''),
	check_if_allowed_to_fail(Can_Fail),
	Result = 'fail'. % We have failed.

simplify_disequation_aux([(T1, T2) | More_Diseqs], Answer, EQV, Can_Fail, Result) :- % Same var.
        var(T1),
        var(T2), % Both are variables.
        T1==T2, !, % Both are the same variable.
%	echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: SAME VAR, T1 == T2', (T1, T2)),
	check_if_allowed_to_fail(Can_Fail),
	simplify_disequation_aux(More_Diseqs, Answer, EQV, Can_Fail, Result).

simplify_disequation_aux([(T1, T2) | More_Diseqs], Answer, EQV_In, Can_Fail, Result) :- % Different vars.
        var(T1),
        var(T2), !, % Both are variables, but not the same one.
	T1 \== T2, % Not the same variable.
	varsbag(EQV_In, [], [], EQV), % Remove anything there not a variable.
	varsbag((T1, T2), EQV, [], UQV), % Compute UQ vars.
%	echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: var(T1) and var(T2)', (T1, T2)),
	(
	    (   % Both are UQ vars.
		cneg_aux:memberchk(T1, UQV), 
		cneg_aux:memberchk(T2, UQV), !,
%		echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: UNIFY UQV(T1) and UQV(T2)', (T1, T2)),
		check_if_allowed_to_fail(Can_Fail),
		cneg_diseq_unify(T1, T2), % They can not be disunified, and they are still UQ vars.
		simplify_disequation_aux(More_Diseqs, Answer, EQV, Can_Fail, Result)
	    )
	;
	    (   % T1 is a UQ var, T2 is not a UQ var.
		cneg_aux:memberchk(T1, UQV), !,
%		cneg_aux:memberchk(T2, EQV), 
%		echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: UQV(T1) and var(T2)', (T1, T2)),
		simplify_disequation_aux_uqvar_t1_var_t2([(T1, T2) | More_Diseqs], Answer, EQV, Can_Fail, Result)
	    )
	;
	    (   % T2 is a UQ var, T1 is not a UQ var.
%		cneg_aux:memberchk(T1, EQV),
		cneg_aux:memberchk(T2, UQV), !,
%		echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: UQV(T2) and var(T1)', (T1, T2)),
		simplify_disequation_aux_uqvar_t1_var_t2([(T2, T1) | More_Diseqs], Answer, EQV, Can_Fail, Result)
	    )
	;
	    (   % T1 and T2 are NOT UQ vars. 2 solutions. 
		cneg_aux:memberchk(T1, EQV),
		cneg_aux:memberchk(T2, EQV), !,
		( 
		    (   % First solution: T1 =/= T2.
%			echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: var(T1) =/= var(T2)', (T1, T2)),
			cneg_diseq_unify('true', Result), % The solution is completely valid.
			Answer = [(T1, T2)]
		    )
		;
		    (   % T1 and T2 can not be disunified. We test if we can fail.
%			echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: UNIFY var(T1) and var(T2)', (T1, T2)),
			check_if_allowed_to_fail(Can_Fail),
			cneg_diseq_unify(T1, T2), % Since they can not be disunified, unify them.
			simplify_disequation_aux(More_Diseqs, Answer, EQV, Can_Fail, Result)
		    )
		)
	    )	
	).

simplify_disequation_aux([(T1, T2) | More_Diseqs], Answer, EQV, Can_Fail, Result) :- % var and nonvar.
	(
	    (   % T1 is a VAR. T2 is not a var.
		var(T1), 
		nonvar(T2), !,
%		echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: var(T1) and nonvar(T2) ', (T1, T2)),
		simplify_disequation_aux_var_nonvar([(T1, T2) | More_Diseqs], Answer, EQV, Can_Fail, Result)
	    )
	;
	    (   % T2 is a VAR. T1 is not a var.
		var(T2), 
		nonvar(T1), !,
%		echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: var(T2) and nonvar(T1) ', (T1, T2)),
		simplify_disequation_aux_var_nonvar([(T2, T1) | More_Diseqs], Answer, EQV, Can_Fail, Result)
	    )
	).

simplify_disequation_aux([(T1, T2) | More_Diseqs], Answer, EQV, Can_Fail, Result):- 
	nonvar(T1), 
	nonvar(T2), !,
 	functor_local(T1, Name_1, Arity_1, Args_1),
	functor_local(T2, Name_2, Arity_2, Args_2), 
	(
	    (   % Functors that unify.
		Name_1 == Name_2, 
		Arity_1 == Arity_2, !,
%		echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: functor(T1) == functor(T2)', (T1, T2)),
		disequalities_lists_product(Args_1, Args_2, Diseq_List),
		cneg_aux:append(Diseq_List, More_Diseqs, New_More_Diseqs),
		simplify_disequation_aux(New_More_Diseqs, Answer, EQV, Can_Fail, Result)
	    )
	;
	    (   % Functors that do not unify.
		(
		    (Name_1 \== Name_2) ; (Arity_1 \== Arity_2)
		), !,
%		echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: functor(T1) =/= functor(T2)', (T1, T2)),
		Result = 'true', % Result is completely valid.
		Answer = [] % Answer is True.
	    )
	).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Esto NO es producto cartesiano.
disequalities_lists_product([], [], []) :- !.
disequalities_lists_product([T1], [T2], [(T1, T2)]) :- !.
disequalities_lists_product([T1 | Args_1], [T2 | Args_2], [(T1, T2) | More_Diseqs]) :- !,
	disequalities_lists_product(Args_1, Args_2, More_Diseqs).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

simplify_disequation_aux_uqvar_t1_var_t2([(T1, T2) | More_Diseqs], Answer, EQV_In, Can_Fail, Result) :-
        var(T1),
        var(T2), 
	varsbag(EQV_In, [], [], EQV), % Remove anything there not a variable.
	varsbag((T1, T2), EQV, [], UQV), % Compute UQ vars.
	cneg_aux:memberchk(T1, UQV), % T1 is a uq var, T2 is not a uqvar.
	cneg_aux:memberchk(T2, EQV), !,
%	echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: UQV(T1) and var(T2) ', (T1, T2)),

	% T1 can not be different from T2. We unify them (failing) and continue.
	check_if_allowed_to_fail(Can_Fail),
	cneg_diseq_unify(T1, T2),
	simplify_disequation_aux(More_Diseqs, Answer, EQV, Can_Fail, Result).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

simplify_disequation_aux_var_nonvar([(T1, T2) | More_Diseqs], Answer, EQV_In, Can_Fail, Result):- 
        var(T1),
	nonvar(T2),
        functor_local(T2, Name, Arity, _Args_T2), 
	varsbag(EQV_In, [], [], EQV), % Remove anything there not a variable.
	varsbag((T1, T2), EQV, [], UQV), % Compute UQ vars.
	(
	    (   % A variable is always different from a functor making use of it.
		cneg_aux:varsbag(T2, [], [], Vars_T2),
		cneg_aux:memberchk(T1, Vars_T2), !, % e.g. X =/= s(s(X)).
%		echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: var(T1) and functor(T2) and T1 in vars(T2)', (T1, T2)),
		cneg_diseq_unify('true', Result), % Result is completely valid.
		Answer = [] % Answer is True.
	    )
	;
	    (   % T1 is a UQ var. Impossible to disunify.
		cneg_aux:memberchk(T1, UQV), !,
%		echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: UQV(T1) and functor(T2)', (T1, T2)),
		check_if_allowed_to_fail(Can_Fail),
		cneg_diseq_unify(T1, T2),
		simplify_disequation_aux(More_Diseqs, Answer, EQV, Can_Fail, Result)
	    )
	;
	    (   % The variable must not be the functor (use attributed variables).
		cneg_aux:memberchk(T1, EQV), !,
%		echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: var(T1) =/= functor(T2)', (T1, T2)),
		(
		    (
			functor_local(New_T2, Name, Arity, _UQ_Vars_New_T2), 
			cneg_diseq_unify(Result, 'true'), % Correct result if attr. var. satisfied.
			Answer = [(T1, New_T2)] % Answer is (T1, T2).
		    )
		;
		    (   % Keep the functor but diseq between the arguments.
			% We need to say that we have failed because if we are playing with attributed
			% variables we have no way to get more information on the disequality.
%			echo_msg(2, '', 'cneg_diseq', 'simplify_disequation_aux :: UNIFY var(T1) and functor(T2)', (T1, T2)),
			check_if_allowed_to_fail(Can_Fail),
			functor_local(T1, Name, Arity, _Args_T1), % T1 = functor 
			simplify_disequation_aux([(T1, T2) | More_Diseqs], Answer, EQV, Can_Fail, Result)
		    )
		)
	    )
	).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%remove_vars_with_attributes([], []) :- !.
%remove_vars_with_attributes([Var|List_In], List_Out) :-   % If variables have attributes, remove them from the bag.
%	get_attribute_local(Var, _Attribute), !,
%	remove_vars_with_attributes(List_In, List_Out).
%remove_vars_with_attributes([Var|List_In], [Var|List_Out]) :- % Keep only vars without attributes.
%	remove_vars_with_attributes(List_In, List_Out).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

cneg_diseq_unify(T, T).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% diseq_eq(X,Y) unify X and Y
cneg_diseq_eq(T1, T2, _UQV) :-
	var(T1),
	var(T2),
	T1 == T2, % Both are the same var. This is valid if they are in UQV too.
	echo_msg(2, '', 'cneg_diseq', 'cneg_diseq_eq: same var. ok.', (T1, T2)),
	!.

cneg_diseq_eq(T1, _T2, UQV) :-
	var(T1),
	memberchk(T1, UQV),
	echo_msg(2, '', 'cneg_diseq', 'cneg_diseq_eq: T1 in UQV. fail.', (T1, UQV)),
	!, fail.

cneg_diseq_eq(_T1, T2, UQV) :-
	var(T2),
	memberchk(T2, UQV),
	echo_msg(2, '', 'cneg_diseq', 'cneg_diseq_eq: T2 in UQV. fail.', (T2, UQV)),
	!, fail.

cneg_diseq_eq(T1, T2, _UQV) :-
	var(T1),
	var(T2), !, % Both vars and not in UQV.
	echo_msg(2, '', 'cneg_diseq', 'T1 and T2 not in UQV. ok.', (T1, T2)),
	cneg_diseq_unify(T1, T2), !.

cneg_diseq_eq(T1, T2, _UQV) :-
	var(T1), % Var vs functor using var.
	varsbag(T2, [], [], Vars),
	memberchk(T1, Vars), !,
	echo_msg(2, '', 'cneg_diseq', 'T1 appears in T2. fail.', (T1, T2)),
	!, fail.

cneg_diseq_eq(T1, T2, UQV) :-
	var(T1), !, % Var vs functor
	functor_local(T2, Name, Arity, Args_T2),
	functor_local(T1, Name, Arity, Args_T1),
	echo_msg(2, '', 'cneg_diseq', 'T1 var, T2 functor. ok.', (T1, T2, UQV)),
	!, 
	cneg_diseq_eq_args(Args_T1, Args_T2, UQV), !.

cneg_diseq_eq(T1, T2, _UQV) :-
	var(T2), % Var vs functor using var.
	varsbag(T1, [], [], Vars),
	memberchk(T2, Vars), !,
	echo_msg(2, '', 'cneg_diseq', 'T2 appears in T1. fail.', (T1, T2)),
	!, fail.

cneg_diseq_eq(T1, T2, UQV) :-
	var(T2), !, % Var vs functor
	functor_local(T1, Name, Arity, Args_T1),
	functor_local(T2, Name, Arity, Args_T2),
	echo_msg(2, '', 'cneg_diseq', 'T2 var, T1 functor. ok.', (T1, T2, UQV)),
	!, 
	cneg_diseq_eq_args(Args_T1, Args_T2, UQV), !.

cneg_diseq_eq(T1, T2, UQV) :-
	functor_local(T1, Name, Arity, Args_T1),
	functor_local(T2, Name, Arity, Args_T2), 
	echo_msg(2, '', 'cneg_diseq', 'T1 and T2 functors. ok.', (T1, T2, UQV)),
	!, % functor vs functor.
	cneg_diseq_eq_args(Args_T1, Args_T2, UQV), !.

cneg_diseq_eq(T1, T2, UQV) :-
	functor_local(T1, Name_T1, Arity_T1, _Args_T1),
	functor_local(T2, Name_T2, Arity_T2, _Args_T2), 
	(
	    (   Name_T1 \== Name_T2  )
	;
	    (   Arity_T1 \== Arity_T2  )
	),
	echo_msg(2, '', 'cneg_diseq', 'T1 and T2 different functors. fail.', (T1, T2, UQV)),
	!, % functor vs functor.
	fail.


cneg_diseq_eq_args([], [], _UQV) :- !.
cneg_diseq_eq_args([Arg_T1 | Args_T1], [Arg_T2 | Args_T2], UQV) :-
	cneg_diseq_eq(Arg_T1, Arg_T2, UQV), !,
	cneg_diseq_eq_args(Args_T1, Args_T2, UQV), !.

% eq(X,Y):-
 %       X=Y.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

check_if_allowed_to_fail(Can_Fail) :-
	(   
	    ( 
		Can_Fail == 'fail', 
%		echo_msg(2, '', 'cneg_diseq', 'Not allowed to return fail.', ''), 
		fail 
	    )
	;   
	    (	Can_Fail == 'true'
%		echo_msg(2, '', 'cneg_diseq', 'No return value yet.', '')
	    )
	).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

adequate_gv_eqv_uqv(_T1, _T2, GoalVars_In, EQV_In, UQV_In, _EQV_Out, _UQV_Out) :-
	(
	    GoalVars_In == 'compute' 
	;
	    EQV_In == 'compute' 
	;
	    UQV_In == 'compute'
	), 
	echo_msg(1, '', 'cneg_diseq', 'adequate_gv_eqv_uqv :: ERROR :: (GV, EQV, UQV)', (GoalVars_In, EQV_In, UQV_In)),
	!, fail.

adequate_gv_eqv_uqv(T1, T2, GoalVars_In, EQV_In, UQV_In, EQV_Out, UQV_Out) :-
	GoalVars_In \== 'compute',
	EQV_In \== 'compute', 
	UQV_In \== 'compute',
	echo_msg(2, '', 'cneg_diseq', 'adequate_gv_eqv_uqv :: In :: (GV, EQV, UQV)', (GoalVars_In, EQV_In, UQV_In)),
	varsbag(GoalVars_In, [], [], GoalVars), % Only variables, please.
	varsbag_clean_up(EQV_In, EQV_Tmp), % Only variables, please.
	varsbag_clean_up(UQV_In, UQV_Tmp), % Only variables, please. EQV /\ UQV = empty.
%	echo_msg(2, '', 'cneg_diseq', 'adequate_gv_eqv_uqv :: (GoalVars, EQV_Aux, UQV_Tmp)', (GoalVars, EQV_Tmp, UQV_Tmp)),

	varsbag_union(GoalVars, EQV_Tmp, EQV_Aux),
	varsbag(UQV_Tmp, EQV_Aux, [], UQV_Aux), % A var marked existential becomes existential.

	varsbag((T1, T2), [], [], Affected_Vars), % Affected variables.
	varsbag_intersection(Affected_Vars, EQV_Aux, EQV_Out), % Only EQV affected variables.
	varsbag_intersection(Affected_Vars, UQV_Aux, UQV_Out), % Only UQV affected variables.

	echo_msg(2, '', 'cneg_diseq', 'adequate_gv_eqv_uqv :: Out :: (EQV, UQV)', (EQV_Out, UQV_Out)).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

get_disequalities_from_constraints_and_remove_them([], []) :- !.
get_disequalities_from_constraints_and_remove_them(Anything, Disequalities) :-
	cneg_diseq_echo(2, '', 'cneg_diseq', 'get_disequalities_from_constraints_and_remove_them :: Vars', Vars),

	varsbag(Anything, [], [], Vars),
	get_disequalities_from_constraints_and_remove_them_aux(Vars, [], [], Disequalities), !,
	cneg_diseq_echo(2, '', 'cneg_diseq', 'get_disequalities_from_constraints_and_remove_them :: Disequalities', Disequalities),
	!.

get_disequalities_from_constraints_and_remove_them_aux([], _Visited, Disequalities, Disequalities) :- !.
%  Optimization: If it has been visited it can not have attribute and this check is much more faster.
%get_disequalities_from_constraints_and_remove_them_aux([Var | Vars], Visited, Diseqs_In, Diseqs_Out) :-
%	cneg_aux:memberchk(Var, Visited), !, 
%	get_disequalities_from_constraints_and_remove_them_aux(Vars, Visited, Diseqs_In, Diseqs_Out).
get_disequalities_from_constraints_and_remove_them_aux([Var | Vars], Visited, Diseqs_In, Diseqs_Out) :-
	get_attribute_local(Var, Attribute), !,
	remove_attribute_local(Var),
	varsbag(Attribute, [Var | Visited], [], More_Vars),
	append(More_Vars, Vars, New_Vars),
	attribute_contents(Attribute, _Target, Disequalities),
	disequalities_bag_add_diseqs(Disequalities, Diseqs_In, Diseqs_Aux),
	get_disequalities_from_constraints_and_remove_them_aux(New_Vars, [Var | Visited], Diseqs_Aux, Diseqs_Out).
get_disequalities_from_constraints_and_remove_them_aux([Var | Vars], Visited, Diseqs_In, Diseqs_Out) :- !,
	% No attribute in variable.
	get_disequalities_from_constraints_and_remove_them_aux(Vars, [Var | Visited], Diseqs_In, Diseqs_Out).

disequalities_bag_add_diseqs([], Diseqs_In, Diseqs_In) :- !.
disequalities_bag_add_diseqs([Diseq | Disequalities], Diseqs_In, Diseqs_Out) :-
	attribute_diseq_to_executable_diseq(Diseq, Real_Diseq),
	cneg_aux:memberchk(Real_Diseq, Diseqs_In), !, 
	disequalities_bag_add_diseqs(Disequalities, Diseqs_In, Diseqs_Out).
disequalities_bag_add_diseqs([Diseq | Disequalities], Diseqs_In, Diseqs_Out) :- !,
	attribute_diseq_to_executable_diseq(Diseq, Real_Diseq),
	echo_msg(2, '', 'cneg_diseq', 'disequalities_bag_add_diseqs: adding', Real_Diseq), 
	disequalities_bag_add_diseqs(Disequalities, [Real_Diseq | Diseqs_In], Diseqs_Out).

attribute_diseq_to_executable_diseq(Constraint_Diseq, Executable_Diseq) :-
	attribute_disequality_contents(Constraint_Diseq, Diseq_1, Diseq_2, EQ_Vars, UQ_Vars),
	functor_local(Executable_Diseq, 'diseq_geuqv', 5, [Diseq_1 |[ Diseq_2 |[ [] |[ EQ_Vars |[ UQ_Vars ]]]]]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                     PREDICADO   DISTINTO                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Predicado que implementa mediante variables con atributo
% la desigualdad entre terminos y como expresarlo a
% traves de disyuncion de conjunciones de desigualdades
% entre terminos que debe satisfacer cada variable.
% Esta implementacion sirve para variables con dominios
% de valores finitos.

% Incluye una desigualdad en las formulas de las 
% variables implicadas

disequality(T1,T2, UQV_In) :- 
	varsbag_clean_up(UQV_In, UQV), % Only variables, please.	
	varsbag((T1, T2), UQV, [], EQV), % Only variables, please.
	diseq_geuqv(T1,T2, [], EQV, UQV).

diseq_geuqv(T1,T2, GoalVars_In, EQV_In, UQV_In) :- 
	diseq_geuqv_adv(T1,T2, GoalVars_In, EQV_In, UQV_In, 'true'). 

diseq_geuqv_adv(T1,T2, GoalVars_In, EQV_In, UQV_In, Result) :- 
	echo_msg(2, '', 'cneg_diseq', 'diseq_geuqv [in] :: ((T1, =/=, T2), ---, (GV, EQV, UQV))', ((T1, '=/=', T2), '---', (GoalVars_In, EQV_In, UQV_In))),
	adequate_gv_eqv_uqv(T1, T2, GoalVars_In, EQV_In, UQV_In, EQV, UQV),
	echo_msg(2, '', 'cneg_diseq', 'diseq_geuqv [tmp] :: ((T1, =/=, T2), ---, (GV, EQV, UQV))', ((T1, '=/=', T2), '---', (EQV, UQV))),
	attribute_disequality_contents(Disequality, T1, T2, EQV, UQV),
        test_and_update_vars_attributes([Disequality], true, Result),
	echo_msg(2, '', 'cneg_diseq', 'diseq_geuqv [out] :: ((T1, =/=, T2), Result)', ((T1, '=/=', T2), Result)),
	echo_msg(2, 'nl', 'cneg_diseq', '', '').

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

equality(T1,T2, UQV_In) :- 
	varsbag_clean_up(UQV_In, UQV), % Only variables, please.	
	varsbag((T1, T2), UQV, [], EQV), % Only variables, please.
	eq_geuqv(T1,T2, [], EQV, UQV).

eq_geuqv(T1, T2, GoalVars_In, EQV_In, UQV_In) :- 
	eq_geuqv_adv(T1, T2, GoalVars_In, EQV_In, UQV_In, 'true').

eq_geuqv_adv(T1, T2, GoalVars, EQV_In, UQV_In, Result) :- 
	echo_msg(2, 'nl', 'cneg_diseq', '', ''),
	echo_msg(2, '', 'cneg_diseq', 'eq_geuqv [in] :: (T1, =, T2), ---, (GV, EQV, UQV)', ((T1, '=', T2), '---', (GoalVars, EQV_In, UQV_In))),
	adequate_gv_eqv_uqv(T1, T2, GoalVars, EQV_In, UQV_In, EQV, UQV),
	echo_msg(2, '', 'cneg_diseq', 'eq_geuqv [tmp] :: (T1, =, T2), ---, (EQV, UQV)', ((T1, '=', T2), '---', (EQV, UQV))),
	!,
	(
	    ( 
		cneg_diseq_eq(T1, T2, UQV),
		Result = 'true',
		echo_msg(2, '', 'cneg_diseq', 'eq_geuqv [out] :: ((T1, =, T2), Result)', ((T1, '=', T2), Result)),
		echo_msg(2, 'nl', 'cneg_diseq', '', '')
	    )
	;
	    (
		Result = 'fail',
		echo_msg(2, '', 'cneg_diseq', 'eq_geuqv [out] :: ((T1, =, T2), Result)', ((T1, '=', T2), Result)),
		echo_msg(2, '', 'cneg_diseq', 'continues', '...'),
		diseq_geuqv(T1, T2, GoalVars, UQV, 'compute') 
	    )
	).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

