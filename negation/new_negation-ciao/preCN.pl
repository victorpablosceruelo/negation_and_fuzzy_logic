% Preprocessor for Constructive Negation
%
% Started: Friday 26 February 2009
%
% Victor Pablos Ceruelo - vpablos@babel.ls.fi.upm.es
%

:- module(preCN,[pp_intneg/1, compile_all_tests/0, write_debug_message/2]).

:- use_module(library(write)).
:- use_module(intneg_tr, _).
 
%:- import append/3 from basics.
% :- import term_to_atom/2 from string.
% :- import is_a_list/1 from aux_preds.
%:- import comp_pred/3 from intneg_tr.


% :- op(1110,xfy, ':-' ).         % Rule symbol
:- dynamic special_sentence/1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                     Options                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

filename_suffix("_intneg").
filename_extension(".pl").
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Consulting a file                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pp_intneg(FileName) :-
	convert_File_Names(FileName, FN_In, FN_Out, FN_Show),
        openFiles(FN_In, FN_Out, Stream_In, Stream_Out),
	writeHeader(FN_In), 
	!, % Do not open them more than once ...
        process_File,
	closeFiles(Stream_In, Stream_Out),
	message_to_user(FN_Show).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%  Input and Output  %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

convert_File_Names(S_FN, FN_In, FN_Out, FN_Show) :-
	filename_suffix(S),		% Suffix to use.
	filename_extension(E),		% Extension to use.
	% Input filename.
	append(S_FN, E,S_FN_In),	% Add extension
	name(FN_In, S_FN_In),		% Convert string to atom.
	% Show filename.
	append(S_FN, S, S_FN_Show),	% Add suffix
	name(FN_Show,S_FN_Show),	% Convert string to atom.
	% Output filename.
	append(S_FN_Show, E, S_FN_Out), % Add extension
	name(FN_Out,S_FN_Out).		% Convert string to atom.
	
openFiles(FN_In, FN_Out, Stream_In, Stream_Out) :-
%	see(FN_In),			% Open this file for stdin
%	write('disabled output to file FN_Out: '),
%	write(FN_Out), nl.
%	tell(FN_Out). % Open this file for stdout
	open(FN_In,read,Stream_In),
	set_input(Stream_In),
	open(FN_Out,write,Stream_Out),
	set_output(Stream_Out).

closeFiles(Stream_In, Stream_Out) :-
%	seen, % Close stdin
%	told. % Close stdout
	close(Stream_In),
	flush_output(Stream_Out),
	close(Stream_Out).


writeHeader(FileName) :-
	write('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),nl,
	write('% This program was generated by the preprocessor for           %'),nl,
	write('% Constructive Intensional Negation on Well Founded Semantics. %'),nl,
	write('%                                                              %'),nl,
	write('% Victor Pablos Ceruelo ( vpablos at babel.ls.fi.upm.es )      %'),nl,
	write('%                                                              %'),nl,
	write('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),nl,nl,
	write('% The original program file name is: '),
	write(FileName),write(', and it contained: '), nl,
	write('% -------------------------'), nl,
	write('% '), nl.

writeBegin :- !,
	write('% '), nl,
	write('% -------------------------'), nl, 
	write('% End of original program.'), nl, 
	nl, nl,
	write_special_clauses,
	nl, nl.

message_to_user(FileNameOut):-
	write('Load the file using ['),
	write(FileNameOut), write(']. '), nl.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     Load clauses and save them for processing      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

process_File :-
    read(Clause),
    process_File_aux(Clause).

process_File_aux(Clause) :-
	eof(Clause), !,		% End read.
	writeBegin,		% Comment
	load_Clause(Clause).
	
process_File_aux(Clause) :-
	write_sentence(['% '], Clause), % Debug clause.
	load_Clause(Clause),  % Save clause for processing.
	process_File.		% Read the whole file.

eof(end_of_file).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Process the program                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

load_Clause(Cl) :-		% End of file.
	eof(Cl),		% Check if it is the end.
	comp_pred(Cl,Cl_Out,_),	% Get output (A list).
	nl,nl,			% Separate debug from final code.
	write_sentences_list([], Cl_Out). % Write output (A list).
	
load_Clause(Cl1) :-	                  % Special sentence
	change_special_sentence(Cl1). % Change it if needed.
	
load_Clause(Cl) :-
	comp_pred(Cl,[],_).	% Normal case.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%            Process special sentences               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

write_special_clauses :-
%	write(':- import forall/2 from forall.'),nl,
%	write(':- [metaNew].'), nl,
	!, % Backtracking is not allowed here !!!
	findall(Cl2,(retract(special_sentence(Cl2)),
		     write_sentence([], (:- Cl2))),_Cls), !.

change_special_sentence((:- Cl1)) :-
%      write('% DBG % :- '),
%      write(Cl1), nl,
      change_special_sentence_aux(Cl1, Cl2),
      assertz(special_sentence(Cl2)).

change_special_sentence_aux(module(Atom1, Exports1), module(Atom2, Exports2)) :- !,
	name(Atom1,Name1),	 % String to atom.
	filename_suffix(S),	 % Find correct suffix for files.
	append(Name1, S, Name2), % Append
	name(Atom2,Name2),	 % Atom to string.
	change_exports(Exports1, Exports2). % Change exports (add intneg).

change_special_sentence_aux(module(Atom1, Exports1, Pkgs), module(Atom2, Exports2, Pkgs)) :- !,
	name(Atom1,Name1),	 % String to atom.
	filename_suffix(S),	 % Find correct suffix for files.
	append(Name1, S, Name2), % Append
	name(Atom2,Name2),	 % Atom to string.
	change_exports(Exports1, Exports2). % Change exports (add intneg).

change_special_sentence_aux(M, M).

change_exports(Exports1, [intneg/1 | Exports1]) :-
	nonvar(Exports1).
change_exports(Exports, '_') :-
	var(Exports).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%        Switch terms to prolog sentences            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

write_sentences_list(Pre, []) :-
	write_pre_messages(Pre),
	nl.
write_sentences_list(Pre, Sentences) :-
	write_sentences_list_aux(Pre, Sentences).

write_sentences_list_aux(_Pre, []) :- !.
write_sentences_list_aux(Pre, [Sentence]) :- !,
	write_sentence(Pre, Sentence).
write_sentences_list_aux(Pre, [Sentence|Others]) :-
	write_sentence(Pre, Sentence),
	write_sentences_list_aux(Pre, Others).

write_sentence(_Pre, end_of_file) :- nl, nl. % Do not write.
write_sentence(Pre, Sentence) :-
%	write_debug_message(Pre, Sentence),
	write_pre_messages(Pre),
	write('('),
	write_sentence_aux(Sentence),
	write(').'), nl, !.

write_debug_message(Pre, Sentence) :-
	write('% '),
	write_pre_messages(Pre),
	write('('),
	write(Sentence), % Debug
	write(').'), nl, !.

write_pre_messages([]).
write_pre_messages([Msg]) :-
	write(Msg).
write_pre_messages([Msg|Others]) :-
	write(Msg),
	write_pre_messages(Others).
	
write_sentence_aux(Sent) :-		% Variables
	var(Sent), !, 
	write(Sent).

%write_sentence_aux(Sent) :-	% List
%	functor(Sent,Name,X), !,
%	write(functor(Sent,Name,X)), nl, 
%	is_a_list(Sent), !, 
%	write('['),
%	write_sentences_list(Sent, ', '),
%	write(']').

write_sentence_aux(Sent) :-		% Or
	functor(Sent,';',2), !, 
	Sent =..[';'|Args],
	write('('),
	write_sentences_list(Args, ' ; '),
	write(')').

write_sentence_aux(Sent) :-		% And
	functor(Sent,',',2), 
	Sent=..[','|Args], !,
	write('('),
	write_sentences_list(Args, ', '),
	write(')').

write_sentence_aux(Sent) :-	% /
	functor(Sent,'/',2),
	Sent=..['/'|Args], !,
%	write('('),
	write_sentences_list(Args, '/').
%	write(')').
	
write_sentence_aux(Sent) :-	% List.
	functor(Sent,'.',2), 
	Sent=..['.',Arg1,Arg2], !,
	write('['),
	write_sentence_aux(Arg1),
	write_sentence_list_arg2(Arg2),
	write(']').

write_sentence_aux(Sent) :-	% Rule.
	functor(Sent,':-',2), 
	Sent=..[':-'|Args], !,
	write('('),
	write_sentences_list(Args, ' :- '),
	write(')').

write_sentence_aux(Sent) :-	% Functor Ar > 1
	functor(Sent,Name,Arity),
%	write(functor(Sent,Name,Arity)), nl,
	Arity > 1, 
	Sent=..[Name|Args], !, 
	write(Name),
	write('('),
	write_sentences_list(Args, ', '),
	write(')').

write_sentence_aux(Sent) :-	% Functor Ar == 1
	functor(Sent,Name,Arity),
%	write(functor(Sent,Name,Arity)), nl,
	Arity == 1,
	Sent=..[Name,Arg], !, 
	write(Name),
	write('('),
	write_sentence_aux(Arg),
	write(')').

write_sentence_aux(Sent) :-	% Functor Ar == 0
	functor(Sent,Name,Arity),
%	write(functor(Sent,Name,Arity)), nl,
	Arity == 0, !, 
	write(Name).

write_sentence_aux(Sent) :-		% Others
	nl,write('% write_sentence_aux: unknown sentence: '), 
	write(Sent),
	nl, !. % Don't do backtracking.
write_sentences_list([], _Separator) :- !.
write_sentences_list([Sent], _Separator) :- !,
	write_sentence_aux(Sent).
write_sentences_list([Sent|Others], Separator) :- !,
	write_sentence_aux(Sent),
	write(Separator),
	write_sentences_list(Others, Separator).

write_sentence_list_arg2(Arg2) :-
	var(Arg2), !,
	write('|'),
	write_sentence_aux(Arg2).
write_sentence_list_arg2(Arg2) :-
	functor(Arg2,'[]',0). 
write_sentence_list_arg2(Arg2) :-
	functor(Arg2,'.',2), 
	Arg2=..['.',Arg2_1,Arg2_2], !,
	write(','),
	write_sentence_aux(Arg2_1),
	write_sentence_list_arg2(Arg2_2).
write_sentence_list_arg2(Arg2) :-
	write('|'),
	write_sentence_aux(Arg2).
write_sentence_list_arg2(Arg2) :-
	write('% DBG % ERROR % No procesado: '),
	write(Arg2), nl.


compile_all_tests :-
	write('Compiling all intneg tests'), nl,
	pp_intneg("ex_intneg_01"), pp_intneg("ex_intneg_02"),
	pp_intneg("ex_intneg_03"), pp_intneg("ex_intneg_04"),
	pp_intneg("ex_intneg_05"), % pp_intneg("ex_intneg_06"),
%	pp_intneg("ex_intneg_07"), pp_intneg("ex_intneg_08"),
%	pp_intneg("ex_intneg_11"), 
	pp_intneg("ex_intneg_12"), pp_intneg("ex_intneg_13"), 
%	pp_intneg("ex_intneg_14"),
	nl, nl.