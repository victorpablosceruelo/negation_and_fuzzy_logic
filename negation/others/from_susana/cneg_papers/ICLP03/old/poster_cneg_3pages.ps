%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: poster_cneg_3pages.dvi
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Times-Bold Times-Roman Courier Symbol Times-Italic
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o poster_cneg_3pages.ps poster_cneg_3pages.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2003.07.12:1239
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "22 June 1996",
%   filename = "8r.enc",
%   email = "kb@@mail.tug.org",
%   address = "135 Center Hill Rd. // Plymouth, MA 02360",
%   codetable = "ISO/ASCII",
%   checksum = "119     662    4424",
%   docstring = "Encoding for TrueType or Type 1 fonts to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (poster_cneg_3pages.dvi)
@start /Fa 206[29 49[{TeXBase1Encoding ReEncodeFont}1
58.1154 /Times-Roman rf /Fb 138[37 21 29 29 1[37 37 37
54 21 33 1[21 37 1[21 33 37 33 1[37 9[62 3[37 2[46 1[50
1[42 2[25 4[54 50 1[46 7[37 37 5[37 1[37 1[19 6[25 39[{
TeXBase1Encoding ReEncodeFont}32 74.7198 /Times-Italic
rf /Fc 140[39 44 3[55 7[33 44 1[44 16[72 82[{
TeXBase1Encoding ReEncodeFont}7 99.6264 /Times-Bold rf
/Fd 135[27 7[31 6[17 3[27 22[41 78[{TeXBase1Encoding ReEncodeFont}5
61.4362 /Times-Italic rf /Ff 205[31 31 49[{
TeXBase1Encoding ReEncodeFont}2 61.4362 /Times-Roman
rf
%DVIPSBitmapFont: Fh cmsy10 10 7
/Fh 7 96 df<007FB812F8B912FCA26C17F8CCFCAE007FB812F8B912FCA26C17F8CCFCAE
007FB812F8B912FCA26C17F836287BA841>17 D<EE0180EE03C01607A2EE0F80A2EE1F00
A2163EA25EA25EA24B5AA24B5AA24B5A150F5E4BC7FCA2153EA25DA25DA24A5AA24A5AA2
4A5AA24A5AA24AC8FCA2143EA25CA25CA2495AA2495AA2495AA2495AA249C9FCA2133EA2
5B13FC5B485AA2485AA2485AA2485AA248CAFCA2123EA25AA25AA25A12602A4E75BB00>
54 D<0060161800F0163C6C167CA200781678007C16F8A2003C16F0003E1501A26CED03
E0A26C16C06D1407A2000716806D140FA26C6CEC1F00A26CB612FEA36C5D01F8C7127CA2
017C5CA2013C5C013E1301A2011E5C011F1303A26D6C485AA201075CECC00FA2010391C7
FC6E5AA2903801F03EA20100133CECF87CA2EC7878EC7CF8A2EC3FF0A26E5AA36E5AA36E
5A6EC8FC2E3C80B92F>56 D<007FB612F0B712F8A27EC91278B3A5003FB612F85AA27EC9
1278B3A5007FB612F8B7FCA26C15F0253A7CB92E>I<007FB712F8B812FCA27ECA123CB2
17182E177C9D37>I<14034A7E4A7EA24A7EA34A7EA2EC7CF8A2ECF87CA2ECF03C010113
3EA249487EA249486C7EA249486C7EA2EC00034980A2013E6D7EA2496D7EA20178147801
F8147CA2484880A2484880A24848EC0F80A2491407000F16C0A248C8EA03E0A2003EED01
F0A2003C1500007C16F8A248167CA248163C006016182E347CB137>94
D<0060161800F0163C6C167CA2007C16F8A2003C16F0003E1501A26CED03E0A26C6CEC07
C0A2000716806D140FA26C6CEC1F00A26C6C143EA26C6C5CA201781478017C14F8A26D49
5AA26D495AA26D5CEC8007A26D6C485AA26D6C48C7FCA2903801F03EA20100133CECF87C
A2EC7CF8A2EC3FF0A26E5AA36E5AA26E5A6EC8FC2E347CB137>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmr10 10 3
/Fi 3 62 df<146014E0EB01C0EB0380EB0700130E131E5B5BA25B485AA2485AA212075B
120F90C7FCA25A121EA2123EA35AA65AB2127CA67EA3121EA2121F7EA27F12077F1203A2
6C7EA26C7E1378A27F7F130E7FEB0380EB01C0EB00E01460135278BD20>40
D<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2137C133C133E131EA2131F7F
A21480A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B131EA2133E133C137C1378A2
5BA2485A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20>I<007FB812F8B912FCA26C
17F8CCFCAE007FB812F8B912FCA26C17F836167B9F41>61 D E
%EndDVIPSBitmapFont
/Fk 138[42 23 32 32 1[42 42 42 60 23 2[23 42 42 23 37
1[37 1[42 7[46 51 1[51 3[51 1[51 1[55 4[28 1[60 51 1[60
55 67[{TeXBase1Encoding ReEncodeFont}27 83.022 /Times-Italic
rf
%DVIPSBitmapFont: Fl cmmi10 10 2
/Fl 2 62 df<121C127FEAFF80A5EA7F00121C0909798817>58 D<150C151E153EA2153C
157CA2157815F8A215F01401A215E01403A215C01407A21580140FA215005CA2141E143E
A2143C147CA2147814F8A25C1301A25C1303A2495AA25C130FA291C7FC5BA2131E133EA2
133C137CA2137813F8A25B1201A25B1203A25B1207A25B120FA290C8FC5AA2121E123EA2
123C127CA2127812F8A25A12601F537BBD2A>61 D E
%EndDVIPSBitmapFont
/Fn 133[37 42 42 60 42 46 28 32 37 1[46 42 46 69 23 46
28 23 46 42 28 37 46 37 46 42 9[83 6[51 65 60 2[65 1[32
2[51 55 1[60 64[46 2[{TeXBase1Encoding ReEncodeFont}35
83.022 /Times-Bold rf
%DVIPSBitmapFont: Fo cmmi10 7 1
/Fo 1 64 df<1302A41307A700F814F8393FCF9FE0000FB512800003EBFE00C613F8EB3F
E06D5A497E133DEB78F0EB7070497EA248487E48487EEB000600067F00047F1D1D809C1D
>63 D E
%EndDVIPSBitmapFont
/Fq 75[25 27[25 1[37 27[33 37 37 54 37 37 21 29 25 1[37
37 37 58 21 37 21 21 37 37 25 33 37 33 37 33 7[54 2[54
54 46 42 2[42 1[54 66 46 1[29 25 54 1[42 46 54 50 50
54 6[21 37 37 37 37 37 37 37 37 37 37 21 19 25 19 2[25
25 37[42 2[{TeXBase1Encoding ReEncodeFont}64 74.7198
/Times-Roman rf /Fr 138[50 1[50 50 1[50 50 50 50 2[50
50 2[50 50 3[50 32[50 2[50 10[50 2[50 50 46[{
TeXBase1Encoding ReEncodeFont}17 83.022 /Courier rf /Fs
75[28 27[28 3[37 37 24[37 42 42 60 42 42 23 32 28 42
42 42 42 65 23 42 23 23 42 42 28 37 42 37 42 37 3[28
1[28 3[78 60 60 51 46 2[46 60 60 74 51 1[32 28 60 1[46
51 60 55 55 60 5[23 23 42 2[42 1[42 42 42 42 42 23 21
28 21 2[28 28 28 35[46 46 2[{TeXBase1Encoding ReEncodeFont}69
83.022 /Times-Roman rf /Ft 137[60 66 40 47 53 1[66 60
66 100 33 2[33 1[60 40 53 1[53 1[60 14[86 3[86 4[47 5[86
1[86 65[{TeXBase1Encoding ReEncodeFont}21 119.552 /Times-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop 1277 448 a Ft(A)30 b(Real)g(Implementation)g(f)m(or)1392
598 y(Constructi)o(v)o(e)g(Negation)1343 886 y Fs(Susana)20
b(Mu)7 b(\230)-35 b(noz)123 b(Juan)20 b(Jos)5 b(\264)-33
b(e)21 b(Moreno-Na)n(v)n(arro)1055 986 y Fr(susana@fi.upm.es)121
b(jjmoreno@fi.upm.es)1500 1160 y Fq(LSIIS,)17 b(F)o(acultad)h(de)i
(Inform)t(\264)-29 b(atica)1444 1251 y(Uni)n(v)o(ersidad)19
b(Polit)t(\264)-29 b(ecnica)19 b(de)g(Madrid)1216 1343
y(Campus)g(de)g(Monte)o(gancedo)j(s/n)c(Boadilla)h(del)g(Monte)1607
1434 y(28660)h(Madrid,)g(Spain)2259 1407 y Fo(??)523
1595 y Fn(K)n(eyw)o(ords)43 b Fs(Constructi)n(v)o(e)21
b(Ne)o(gation,)f(Ne)o(gation)g(in)i(Logic)g(Programming,)d(Constraint)i
(Logic)523 1695 y(Programming,)c(Implementations)h(of)i(Logic)f
(Programming.)523 1935 y Fn(Intr)o(oduction)43 b Fs(Logic)21
b(Programming)e(has)k(been)e(adv)n(ocated)g(as)h(a)h(language)d(for)i
(system)g(spec-)523 2034 y(i\002cation,)e(especially)g(for)g(those)g
(in)m(v)n(olving)f(logical)h(beha)n(viours,)e(rules)j(and)f(kno)n
(wledge.)e(Ho)n(w-)523 2134 y(e)n(v)o(er)m(,)31 b(modelling)g(problems)
g(in)m(v)n(olving)f(ne)o(gation,)g(which)i(is)h(quite)f(natural)f(in)i
(man)o(y)e(cases,)523 2234 y(is)c(some)n(what)d(limitated)i(if)g
(Prolog)e(is)j(used)e(as)i(the)e(speci\002cation/implementation)d
(language.)523 2333 y(These)c(restrictions)g(are)g(not)g(related)g(to)g
(theory)f(vie)n(wpoint,)g(where)g(users)i(can)f(\002nd)g(man)o(y)f(dif)
n(fer)n(-)523 2433 y(ent)26 b(models)f(with)h(their)f(respecti)n(v)o(e)
g(semantics;)g(the)o(y)g(concern)f(practical)h(implementation)f(is-)523
2533 y(sues.)e(The)g(ne)o(gation)d(capabilities)j(supported)d(by)j
(current)e(Prolog)h(systems)h(are)g(rather)f(limited,)523
2632 y(and)27 b(there)h(is)h(no)e(correct)g(and)g(complete)g
(implementation.)e(Of)j(all)h(the)f(proposals,)e(construc-)523
2732 y(ti)n(v)o(e)i(ne)o(gation)f([1,)12 b(2])28 b(is)i(probably)c(the)
i(most)h(promising)e(because)g(it)i(has)g(been)f(pro)o(v)o(en)e(to)j
(be)523 2831 y(sound)20 b(and)h(complete)f([4],)h(and)f(its)j
(semantics)e(is)h(fully)f(compatible)f(with)h(Prolog')-5
b(s.)20 b(Construc-)523 2931 y(ti)n(v)o(e)j(ne)o(gation)d(w)o(as,)k(in)
f(f)o(act,)f(announced)e(in)j(early)g(v)o(ersions)e(of)i(the)g(Eclipse)
g(Prolog)e(compiler)m(,)523 3031 y(b)n(ut)g(w)o(as)g(remo)o(v)o(ed)d
(from)h(the)i(latest)g(releases.)g(The)f(reasons)g(seem)h(to)g(be)f
(related)g(to)h(some)f(tech-)523 3130 y(nical)f(problems)e(with)i(the)g
(use)h(of)e(coroutining)f(\(risk)h(of)h(\003oundering\))d(and)i(the)h
(management)e(of)523 3230 y(constrained)i(solutions.)648
3330 y(Our)k(goal)g(is)h(to)g(gi)n(v)o(e)e(an)i(algorithmic)e
(description)f(of)j(constructi)n(v)o(e)d(ne)o(gation,)g(i.e.)j(e)o
(xplic-)523 3429 y(itly)32 b(stating)g(the)g(details)h(needed)d(for)i
(an)g(implementation.)d(W)-7 b(e)33 b(also)g(intend)e(to)h(discuss)g
(the)523 3529 y(pragmatic)c(ideas)h(needed)f(to)h(pro)o(vide)e(a)j
(concrete)d(and)i(real)g(implementation.)e(Early)h(results)523
3628 y(for)e(a)h(concrete)e(implementation)f(e)o(xtending)g(the)i(Ciao)
h(Prolog)e(compiler)g(are)i(presented.)d(W)-7 b(e)523
3728 y(assume)20 b(some)g(f)o(amiliarity)g(with)g(constructi)n(v)o(e)e
(ne)o(gation)g(techniques)h(and)h(Chan')-5 b(s)20 b(papers.)523
3968 y Fn(Constructi)o(v)o(e)i(Negation)44 b Fs(When)22
b(we)i(tried)e(to)h(implement)f(constructi)n(v)o(e)e(ne)o(gation)h
(algorithm)523 4067 y(we)28 b(came)f(across)h(se)n(v)o(eral)f
(problems,)f(including)g(the)i(management)d(of)j(constrained)e(answers)
523 4167 y(and)k(\003oundering.)d(It)k(is)g(our)e(be\002ef)h(that)h
(these)f(problems)f(cannot)g(be)h(easily)h(and)e(ef)n(\002ciently)523
4267 y(o)o(v)o(ercome.)d(Therefore,)h(we)j(decided)e(to)h(design)g(an)g
(implementation)e(from)h(scratch.)h(One)g(of)523 4366
y(our)17 b(additional)g(requirements)f(is)j(that)f(we)g(w)o(ant)g(to)g
(use)g(a)g(standard)f(Prolog)g(implementation)f(\(to)523
4466 y(be)j(able)h(to)f(reuse)g(thousands)f(of)h(e)o(xisting)g(Prolog)f
(lines)i(and)f(maintain)f(their)h(ef)n(\002cienc)o(y\),)e(so)j(we)523
4566 y(will)h(a)n(v)n(oid)f(implementation-le)n(v)o(el)d
(manipulations.)648 4665 y(Intuiti)n(v)o(ely)-5 b(,)17
b(the)j(constructi)n(v)o(e)e(ne)o(gation)f(of)j(a)g(goal,)f
Fk(cne)m(g)p Fi(\()p Fk(G)p Fi(\))p Fs(,)g(is)i(the)f(ne)o(gation)e(of)
h(the)h(fron-)523 4765 y(tier)g Fk(F)s(r)n(on)n(t)6 b(ier)r
Fi(\()p Fk(G)p Fi(\))18 b Fh(\021)c Fk(C)1217 4790 y
Ff(1)1263 4765 y Fh(_)e Fl(:::)g Fh(_)c Fk(C)1527 4789
y Fd(N)1596 4765 y Fs(\(formal)19 b(de\002nition)g(in)h([4]\))f(of)h
(the)h(goal)e Fk(G)p Fs(.)p 523 4839 473 4 v 525 4897
a Fo(??)606 4924 y Fq(This)g(w)o(ork)g(w)o(as)g(partly)g(supported)i
(by)e(the)g(Spanish)g(MCYT)g(project)g(TIC2000-1632.)p
eop
%%Page: 2 2
2 1 bop 648 448 a Fs(The)20 b(solutions)g(of)h Fk(cne)m(g)p
Fi(\()p Fk(G)p Fi(\))f Fs(are)h(the)g(solutions)f(of)g(the)h
(combination)e(\(conjunction\))e(of)k(one)523 548 y(solution)15
b(of)h(each)f(of)h(the)f(ne)o(gations)f(of)i(the)g Fk(N)21
b Fs(conjunctions)10 b Fk(C)2367 572 y Fd(i)2405 548
y Fs(of)15 b(the)h(frontier)-5 b(.)15 b(The)g(ne)o(gation)f(of)523
648 y(a)19 b(single)f(conjunction)12 b Fk(C)1256 672
y Fd(i)1296 648 y Fs(is)19 b(done)e(in)h(tw)o(o)h(phases:)f
Fk(Pr)m(epar)o(ation)e Fs(and)i Fk(Ne)m(gation)f(of)h(the)g(formula)p
Fs(.)523 747 y(W)-7 b(e)21 b(describe)f(in)g(detail)g(both)g(phases)g
(including)e(unclear)h(steps)i(of)f(the)g(algorithm.)648
852 y(W)-7 b(e)26 b(pro)o(vide)d(an)j(additional)e(step)h(of)h
Fn(simpli\002cation)f(of)g(the)h(conjunction)p Fs(.)e(If)i(one)e(of)h
(the)523 951 y(terms)e(of)c Fk(C)873 976 y Fd(i)918 951
y Fs(is)24 b(tri)n(vially)f(equi)n(v)n(alent)e(to)g Fk(t)6
b(r)r(ue)23 b Fs(\(e.g.)f Fk(X)28 b Fi(=)20 b Fk(X)8
b Fs(,)22 b Fh(8)p Fk(X)8 b Fl(:)p Fk(s)p Fi(\()p Fk(X)g
Fi(\))19 b Fh(6)p Fi(=)h Fs(0\),)j(we)g(can)g(eliminate)523
1051 y(this)28 b(term)g(from)23 b Fk(C)1091 1075 y Fd(i)1112
1051 y Fs(.)29 b(Symmetrically)-5 b(,if)25 b(one)i(of)h(the)g(terms)g
(is)h(tri)n(vially)39 b Fk(f)12 b(ail)t Fs(ing)28 b(\(e.g.)f
Fk(X)j Fh(6)p Fi(=)23 b Fk(X)8 b Fs(,)523 1150 y Fh(8)p
Fk(X)g Fl(:)p Fk(X)24 b Fh(6)p Fi(=)13 b Fk(Y)e Fs(,)20
b Fh(8)p Fk(X)8 b Fl(:)p Fk(X)24 b Fh(6)p Fi(=)13 b Fk(Y)e
Fs(,)19 b Fh(8)p Fk(X)8 b Fl(:)p Fk(X)24 b Fi(=)14 b
Fk(Y)c Fs(\),)20 b(we)g(can)f(simplify)c Fk(C)2288 1175
y Fd(i)2327 1150 y Fh(\021)29 b Fk(f)12 b(ail)t Fs(.)21
b(The)e(simpli\002cation)g(phase)523 1250 y(can)i(be)g(carried)f(out)h
(during)f(the)h(generation)e(of)i(frontier)f(terms.)h(W)-7
b(e)22 b(should)f(tak)o(e)g(into)g(account)523 1350 y(terms)k(with)g
(uni)n(v)o(ersally)e(quanti\002ed)g(v)n(ariables)h(\(that)g(were)h(not)
f(tak)o(en)h(into)f(account)g(in)g([1,)13 b(2]\))523
1449 y(because)20 b(without)f(simplifying)g(them)g(it)i(is)h
(impossible)d(to)h(obtain)g(results.)648 1554 y(W)-7
b(e)33 b(also)f(pro)o(vide)e(a)i(v)n(ariant)f(in)i(the)f
Fn(negation)f(of)p 2240 1490 60 4 v 31 w Fk(D)2300 1566
y Fd(e)o(x)5 b(p)2409 1554 y Fh(^)p 2480 1490 51 4 v
16 w Fk(R)2531 1566 y Fd(e)o(x)g(p)2657 1554 y Fs(that)32
b(is)h(the)f(step)g(where)523 1653 y(the)e(disequalities)f(with)h(free)
f(v)n(ariables,)p 1785 1589 60 4 v 28 w Fk(D)1845 1665
y Fd(e)o(x)5 b(p)1968 1653 y Fs(and)29 b(the)h(rest)g(of)f(terms)h(of)
25 b Fk(C)2862 1678 y Fd(i)2913 1653 y Fs(with)30 b(free)f(v)n(ari-)523
1753 y(ables,)p 740 1689 51 4 v 25 w Fk(R)790 1765 y
Fd(e)o(x)5 b(p)908 1753 y Fs(are)25 b(ne)o(gated.)d(This)j(conjunction)
d(cannot)i(be)h(disclosed)f(because)g(of)g(the)h(ne)o(gation)523
1853 y(of)c Fh(9)p 681 1789 58 4 v 17 w Fk(V)738 1865
y Fd(e)o(x)5 b(p)831 1853 y Fl(:)p 875 1789 60 4 v 21
w Fk(D)935 1865 y Fd(e)o(x)g(p)1040 1853 y Fh(^)p 1107
1789 51 4 v 12 w Fk(R)1158 1865 y Fd(e)o(x)g(p)1251 1853
y Fs(,)21 b(where)p 1517 1789 58 4 v 16 w Fk(V)1574 1865
y Fd(e)o(x)5 b(p)1689 1853 y Fs(gi)n(v)o(es)20 b(uni)n(v)o(ersal)f
(quanti\002cations:)g Fh(8)p 2805 1789 V 17 w Fk(V)2862
1865 y Fd(e)o(x)5 b(p)2955 1853 y Fl(:)21 b Fk(cne)m(g)p
Fi(\()p 3186 1789 60 4 v Fk(D)3245 1865 y Fd(e)o(x)5
b(p)3350 1853 y Fh(^)p 523 1888 51 4 v 523 1952 a Fk(R)574
1964 y Fd(e)o(x)g(p)667 1952 y Fi(\))p Fs(.)27 b(The)e(entire)h
(constructi)n(v)o(e)f(ne)o(gation)f(algorithm)g(must)j(be)f(applied)f
(again.)g(V)-9 b(ariables)26 b(of)p 523 1988 58 4 v 519
2052 a Fk(V)580 2064 y Fd(e)o(x)5 b(p)692 2052 y Fs(are)19
b(considered)d(as)k(free)e(v)n(ariables.)f(When)i(solutions)e(of)i
Fk(cne)m(g)p Fi(\()p 2577 1988 60 4 v Fk(D)2635 2064
y Fd(e)o(x)5 b(p)2738 2052 y Fh(^)p 2803 1988 51 4 v
10 w Fk(R)2854 2064 y Fd(e)o(x)g(p)2947 2052 y Fi(\))20
b Fs(are)e(obtained)523 2151 y(some)k(can)g(be)g(rejected:)g(solutions)
g(with)g(equalities)g(with)h(v)n(ariables)e(in)p 2682
2088 58 4 v 19 w Fk(V)2739 2163 y Fd(e)o(x)5 b(p)2832
2151 y Fs(.)23 b(If)f(there)f(is)j(a)e(dis-)523 2251
y(equality)h(with)h(an)o(y)g(of)f(these)i(v)n(ariables,)e(e.g.)c
Fk(V)10 b Fs(,)25 b(the)f(v)n(ariable)f(will)i(be)f(uni)n(v)o(ersally)e
(quanti\002ed)523 2351 y(in)27 b(the)g(disequality)-5
b(.)25 b(This)h(is)i(the)f(w)o(ay)f(to)h(ne)o(gate)f(the)g(ne)o(gation)
f(of)h(a)h(goal,)f(b)n(ut)h(there)f(is)i(a)f(de-)523
2450 y(tail)e(that)f(w)o(as)h(not)f(considered)e(in)i(former)f
(approaches)f(and)h(that)h(is)h(necessary)f(to)g(get)g(a)h(sound)523
2550 y(implementation:)c(the)i(e)o(xistence)g(of)g(uni)n(v)o(ersally)e
(quanti\002ed)h(v)n(ariables)g(in)p 2796 2486 60 4 v
24 w Fk(D)2856 2562 y Fd(e)o(x)5 b(p)2961 2550 y Fh(^)p
3029 2486 51 4 v 13 w Fk(R)3080 2562 y Fd(e)o(x)g(p)3197
2550 y Fs(by)22 b(the)523 2650 y(iterati)n(v)o(e)g(application)e(of)i
(the)g(method.)f(So,)h(what)g(we)h(are)f(really)g(ne)o(gating)e(is)j(a)
g(subgoal)e(of)g(the)523 2749 y(form:)e Fh(9)p Fl(:)p
818 2685 58 4 v 17 w Fk(V)875 2761 y Fd(e)o(x)5 b(p)p
989 2685 60 4 v 989 2749 a Fk(D)1049 2761 y Fd(e)o(x)g(p)1153
2749 y Fh(^)p 1220 2685 51 4 v 12 w Fk(R)1271 2761 y
Fd(e)o(x)g(p)1364 2749 y Fs(.)20 b(Its)h(ne)o(gation)d(is)j
Fh(8)p 1957 2685 58 4 v 16 w Fk(V)2014 2761 y Fd(e)o(x)5
b(p)2107 2749 y Fl(:)21 b Fh(:)g Fi(\()p 2259 2685 60
4 v Fk(D)2319 2761 y Fd(e)o(x)5 b(p)2424 2749 y Fh(^)p
2491 2685 51 4 v 12 w Fk(R)2541 2761 y Fd(e)o(x)g(p)2634
2749 y Fi(\))p Fs(.)648 2854 y(An)19 b(instrumental)e(step)j(for)e
(managing)f(ne)o(gation)g(is)j(to)f(be)g(able)g(to)g(handle)f
(disequalities)h(be-)523 2953 y(tween)c(terms)g(such)g(as)f
Fk(t)1211 2979 y Ff(1)1260 2953 y Fh(6)p Fi(=)e Fk(t)1360
2979 y Ff(2)1394 2953 y Fs(.)k(The)f(typical)g(Prolog)f(resources)g
(for)h(handling)e(these)j(disequalities)523 3053 y(are)21
b(limited)g(to)g(the)h(b)n(uilt-in)e(predicate)g Fr(/==)49
b(/2)p Fs(,)22 b(which)e(needs)h(both)f(terms)i(to)f(be)g(ground)e(be-)
523 3152 y(cause)d(it)h(al)o(w)o(ays)g(succeeds)f(in)h(the)f(presence)g
(of)g(free)g(v)n(ariables.)f(It)i(is)g(clear)f(that)h(a)g(v)n(ariable)e
(needs)523 3252 y(to)23 b(be)h(bound)d(with)i(a)h(disequality)e(to)i
(achie)n(v)o(e)e(a)i(\223constructi)n(v)o(e\224)d(beha)n(viour)-5
b(.)21 b(Moreo)o(v)o(er)m(,)f(when)523 3352 y(an)k(equation)e
Fk(X)28 b Fi(=)18 b Fk(t)6 b Fi(\()p 1159 3288 53 4 v
-4 w Fk(Y)k Fi(\))24 b Fs(is)h(ne)o(gated,)d(the)h(free)h(v)n(ariables)
e(in)i(the)g(equation)e(must)i(be)f(uni)n(v)o(ersaly)523
3451 y(quanti\002ed,)h(unless)h(af)n(fected)f(by)g(a)i(more)e(e)o
(xternal)g(quanti\002cation,)f(i.e.)i Fh(8)p 2787 3387
V 21 w Fk(Y)10 b Fl(:)26 b Fk(X)j Fh(6)p Fi(=)18 b Fk(t)6
b Fi(\()p 3112 3387 V -4 w Fk(Y)11 b Fi(\))25 b Fs(is)h(the)523
3551 y(correct)20 b(ne)o(gation.)f(As)j(we)g(e)o(xplained)d(in)i([3],)f
(the)i(inclusion)e(of)h(disequalities)g(and)f(constrained)523
3651 y(answers)g(has)h(a)f(v)o(ery)f(lo)n(w)h(cost.)523
3923 y Fn(Optimizing)j(the)f(algorithm)g(and)h(the)g(implementation)44
b Fs(Our)22 b(constructi)n(v)o(e)f(ne)o(gation)f(algo-)523
4023 y(rithm)h(and)f(the)h(implementation)e(techniques)h(admit)g(some)h
(additional)f(optimizations)g(that)h(can)523 4123 y(impro)o(v)o(e)i
(the)h(runtime)g(beha)n(viour)f(of)h(the)h(system.)g(Basically)-5
b(,)24 b(the)h(optimizations)f(rely)g(on)g(the)523 4222
y(compact)h(representation)e(of)j(information,)d(as)j(well)h(as)f(the)g
(early)f(detection)g(of)g(successful)h(or)523 4322 y(f)o(ailing)20
b(branches.)523 4426 y(-)f Fn(Compact)f(inf)n(ormation)p
Fs(.)g(In)h(our)f(system,)h(ne)o(gati)n(v)o(e)d(information)h(is)j
(represented)d(quite)h(com-)523 4526 y(pactly)-5 b(,)20
b(pro)o(viding)f(fe)n(wer)i(solutions)g(from)g(the)g(ne)o(gation)f(of)p
2343 4462 32 4 v 21 w Fk(I)t Fs(.)i(The)f(adv)n(antage)f(is)i(tw)o
(ofold.)e(On)523 4625 y(the)f(one)f(hand)g(constraints)g(contain)f
(more)h(information)e(and)j(f)o(ailing)f(branches)f(can)i(be)f
(detected)523 4725 y(earlier)k(\(i.e.)g(the)h(search)f(space)g(could)g
(be)g(smaller\).)g(On)h(the)f(other)g(hand,)f(if)i(we)g(ask)g(for)e
(all)i(so-)523 4825 y(lutions)h(using)g(backtracking,)e(we)j(are)f
(cutting)g(the)h(search)f(tree)h(by)f(of)n(fering)e(all)j(the)g
(solutions)523 4924 y(together)19 b(in)h(a)h(single)f(answer)-5
b(.)p eop
%%Page: 3 3
3 2 bop 523 448 a Fs(-)16 b Fn(Pruning)h(subgoals)p Fs(.)e(The)h
(frontiers)f(generation)f(search)i(tree)g(can)g(be)g(cut)g(with)g(a)g
(double)f(action)523 548 y(o)o(v)o(er)25 b(the)h(ground)f(subgoals:)g
(remo)o(ving)f(the)i(subgoals)g(whose)g(f)o(ailure)g(we)h(are)f(able)g
(to)h(detect)523 648 y(early)20 b(on,)f(and)h(simplifying)f(the)h
(subgoals)f(that)h(can)g(be)h(reduced)d(to)i(true.)523
747 y(-)30 b Fn(Constraint)f(simpli\002cation)p Fs(.)h(During)e(the)i
(whole)f(process)h(for)f(ne)o(gating)e(a)j(goal,the)f(fron-)523
847 y(tier)g(v)n(ariables)f(are)g(constrained.)f(In)h(cases)h(where)f
(the)h(constraints)e(are)i(satis\002able,)g(the)o(y)f(can)523
946 y(be)f(eliminated)e(and)h(where)g(the)h(constraints)f(can)g(be)h
(reduced)e(to)i(f)o(ail,)g(the)f(e)n(v)n(aluation)f(can)i(be)523
1046 y(stopped)19 b(with)h(result)h Fk(true)p Fs(.)523
1295 y Fn(Experimental)16 b(r)o(esults)36 b Fs(W)-7 b(e)17
b(ha)n(v)o(e)f(\002rstly)h(measured)e(the)i(e)o(x)o(ecution)d(times)k
(in)e(milliseconds)g(for)523 1395 y(the)24 b(abo)o(v)o(e)e(e)o(xamples)
h(when)g(using)g(ne)o(gation)f(as)i(f)o(ailure)f(\()p
Fk(na)12 b(f)g Fl(=)p Fs(1\))23 b(and)g(constructi)n(v)o(e)f(ne)o
(gation)523 1494 y(\()p Fk(cne)m(g)p Fl(=)p Fs(1\).)17
b(All)k(measurements)e(were)h(made)g(using)f(Ciao)i(Prolog.)648
1594 y(Using)e Fn(naf)h Fs(instead)g(of)f Fn(cneg)h Fs(results)g(in)g
(small)h(ratios)f(around)e(1.06)g(on)i(a)n(v)o(erage)e(for)i(ground)523
1694 y(calls)25 b(with)g(fe)n(w)f(recursi)n(v)o(e)f(calls.)i(So,)g(the)
f(possible)g(slo)n(w-do)n(wn)f(for)h(constructi)n(v)o(e)e(ne)o(gation)h
(is)523 1793 y(not)g(so)g(high)f(as)i(we)f(might)g(e)o(xpect)f(for)g
(these)h(e)o(xamples.)f(Furthermore,)e(the)j(results)g(are)g(rather)523
1893 y(similar)-5 b(.)20 b(But)h(the)e(same)h(goals)g(with)g(data)f
(that)h(in)m(v)n(olv)o(e)e(man)o(y)h(recursi)n(v)o(e)f(calls)j(yield)e
(ratios)h(near)523 1993 y(14.69)e(on)h(a)n(v)o(erage)f(w)-5
b(.r)g(.t)20 b Fn(naf)p Fs(,)f(increasing)f(e)o(xponentially)f(with)j
(the)f(number)f(of)h(recursi)n(v)o(e)f(calls.)523 2092
y(There)27 b(are,)g(of)g(course,)f(man)o(y)g(goals)h(that)g(cannot)g
(be)g(ne)o(gated)e(using)i(the)g Fk(naf)g Fs(technique)f(and)523
2192 y(that)20 b(are)g(solv)o(ed)g(using)f(constructi)n(v)o(e)g(ne)o
(gation.)523 2275 y Fn(Conclusion)k(and)h(Futur)o(e)e(W)-6
b(ork)45 b Fs(After)23 b(running)e(some)h(preliminary)f(e)o(xperiments)
g(with)i(the)523 2374 y(constructi)n(v)o(e)g(ne)o(gation)g(technique)h
(follo)n(wing)g(Chan')-5 b(s)25 b(description,)f(we)h(realized)g(that)g
(the)g(al-)523 2474 y(gorithm)19 b(needed)g(some)h(additional)e(e)o
(xplanations)h(and)g(modi\002cations.)648 2574 y(Ha)n(ving)i(gi)n(v)o
(en)g(a)i(detailed)e(speci\002cation)h(of)g(algorithm)e(in)j(a)f
(detailed)g(w)o(ay)g(we)h(proceed)d(to)523 2673 y(pro)o(vide)k(a)i
(real,)f(complete)f(and)h(consistent)h(implementation.)d(The)i(result,)
g(we)h(ha)n(v)o(e)f(reported)523 2773 y(are)d(v)o(ery)e(encouraging,)e
(because)j(we)h(ha)n(v)o(e)f(pro)o(v)o(ed)e(that)j(it)g(is)h(possible)e
(to)h(e)o(xtend)e(Prolog)g(with)523 2873 y(a)j(constructi)n(v)o(e)d(ne)
o(gation)h(module)g(relati)n(v)o(ely)g(ine)o(xpensi)n(v)o(ely)-5
b(.)19 b(Ne)n(v)o(ertheless,)i(we)i(are)f(w)o(orking)523
2972 y(to)d(impro)o(v)o(e)e(the)i(ef)n(\002cienc)o(y)e(of)i(the)g
(implementation.)d(This)j(include)f(a)i(more)e(accurate)g(selection)523
3072 y(of)28 b(the)g(frontier)e(based)i(on)f(the)h(demanded)e(form.)h
(Other)g(future)g(w)o(ork)h(is)h(to)f(incorporate)d(our)523
3171 y(algorithm)19 b(at)h(the)h(W)-10 b(AM)20 b(machine)g(le)n(v)o
(el.)648 3271 y(W)-7 b(e)19 b(are)f(testing)g(the)g(implementation)e
(and)h(trying)g(to)h(impro)o(v)o(e)e(the)i(code,)f(and)g(our)h
(intention)523 3371 y(is)j(to)g(include)e(it)i(in)f(the)g(ne)o(xt)g(v)o
(ersion)f(of)g(Ciao)i(Prolog)2160 3341 y Ff(1)2195 3371
y Fs(.)523 3636 y Fc(Refer)n(ences)523 3827 y Fq(1.)42
b(D.)19 b(Chan.)30 b(Constructi)n(v)o(e)20 b(ne)o(gation)g(based)h(on)f
(the)g(complete)h(database.)30 b(In)20 b Fb(Pr)m(oc.)f(Int.)g(Confer)m
(ence)i(on)621 3919 y(LP'88)p Fq(,)d(pages)i(111\226125.)g(The)f(MIT)g
(Press,)f(1988.)523 4010 y(2.)42 b(D.)22 b(Chan.)39 b(An)22
b(e)o(xtension)i(of)f(constructi)n(v)o(e)g(ne)o(gation)h(and)f(its)f
(application)h(in)g(coroutining.)40 b(In)22 b Fb(Pr)m(oc.)621
4101 y(N)n(A)n(CLP'89)p Fq(,)17 b(pages)j(477\226493.)h(The)d(MIT)h
(Press,)f(1989.)523 4193 y(3.)42 b(S.)22 b(Mu)6 b(\230)-31
b(noz)25 b(and)f(J.)f(J.)g(Moreno-Na)o(v)n(arro.)43 b(Ho)n(w)23
b(to)h(incorporate)g(ne)o(gation)g(in)f(a)h(prolog)g(compiler)l(.)42
b(In)621 4284 y(E.)27 b(Pontelli)h(and)h(V)-10 b(.)28
b(Santos)h(Costa,)f(editors,)g Fb(2nd)i(International)f(W)-7
b(orkshop)31 b(P)-7 b(ADL)m('2000)p Fq(,)28 b(v)o(olume)621
4375 y(1753)20 b(of)f Fb(LNCS)p Fq(,)f(pages)h(124\226140,)i(Boston,)e
(MA)g(\(USA\),)f(2000.)i(Springer)o(-V)-8 b(erlag.)523
4467 y(4.)42 b(P)-8 b(.)23 b(Stuck)o(e)o(y)-5 b(.)47
b(Ne)o(gation)25 b(and)h(constraint)f(logic)g(programming.)48
b(In)25 b Fb(Information)g(and)h(Computation)p Fq(,)621
4558 y(v)o(olume)19 b(118\(1\),)g(pages)h(12\22633,)g(1995.)p
523 4836 473 4 v 554 4897 a Fa(1)606 4924 y Fq(http://www)-5
b(.clip.dia.\002.upm.es/Softw)o(are)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
