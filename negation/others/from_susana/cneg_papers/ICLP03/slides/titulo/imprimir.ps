%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: poster_08.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Times-Bold Helvetica Courier
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o poster_08.ps poster_08.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2003.12.01:1759
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro
%!
% PostScript header file pst-text.pro
% Version 97, 94/04/20
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc
{
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow
{ /String exch def
  /CharCount 0 def
  String length
  { String CharCount 1 getinterval ShowChar
    /CharCount CharCount 1 add def
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar
{ /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
    currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def

end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "22 June 1996",
%   filename = "8r.enc",
%   email = "kb@@mail.tug.org",
%   address = "135 Center Hill Rd. // Plymouth, MA 02360",
%   codetable = "ISO/ASCII",
%   checksum = "119     662    4424",
%   docstring = "Encoding for TrueType or Type 1 fonts to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known not {userdict /pdfmark systemdict /cleartomark get put}
if
 
@fedspecial end TeXDict begin
39158280 55380996 2074 600 600 (poster_08.dvi) @start
%DVIPSBitmapFont: Fa cmsy10 51.6011 3
/Fa 3 59 df[<0003C5C212FC000FA121FF48A1228048A122C048A122E0A2C5C412F0A6
6CA122E0A26CA122C06CA122806CA122000003A121FCD7D7FCB3B3B3AC0003C5C212FC00
0FA121FF48A1228048A122C048A122E0A2C5C412F0A66CA122E0A26CA122C06CA122806C
A122000003A121FCD7D7FCB3B3B3AC0003C5C212FC000FA121FF48A1228048A122C048A1
22E0A2C5C412F0A66CA122E0A26CA122C06CA122806CA122000003A121FC>284
186 104 327 333 17 D[<A1193FA1F1FFC0A14E13E0A14E13F0A14E13F8A2A14E13FCA2
A160A2A160A2A14E13F8A2A195B512F0A2A14D14E0A2A14D14C0A2A14D1480A2A14D1400
A15FA161A15FA161A15FA161A194B5FCA161A15EA161A14C5CA2A14C5CA2A14C91C7FCA2
A14C5BA2A14C5BA2A14C5BA2A193B55AA2A14B5CA2A14B5CA2A14B5CA2A14B91C8FCA2A1
4B5BA2A14B5BA2A14B5BA2A192B55AA15CA15FA15CA15FA15CA15FA15CA194C9FCA15CA1
5EA14A5BA2A14A5BA2A191B55AA2A1495CA2A1495CA2A1495CA2A14991CAFCA2A1495BA2
A1495BA2A1495BA2A190B55AA2A1485CA2A1485CA2A1485CA15AA192CBFCA15AA15CA15A
A15CA15AA15CA1B5FCA15C595CA2595CA2595CA25991CCFCA2595BA2595BA2595BA2A0B5
5AA2585CA2585CA2585CA25891CDFCA2585BA2585BA2585B9FB5FCA15A69A15A69A15A69
A15A69A1CEFC575BA2575BA2575BA29EB55AA2565CA2565CA2565CA25691CFFCA2565BA2
565BA2565BA29DB55AA2555CA2555CA2555C679FD0FC6769676967699CB5FC69545CA254
5CA2545CA25491D1FCA2545BA2545BA2545BA29BB55AA2535CA2535CA2535CA25391D2FC
A2535BA2535B65679AB5FC676467646764675291D3FCA2525BA2525BA2525BA299B55AA2
515CA2515CA2515CA25191D4FCA2515BA2515BA2515BA298B55AA2505CA2505C6265629A
D5FC62646264626497B55AA24F5CA24F5CA24F5CA24F91D6FCA24F5BA24F5BA24F5BA296
B55AA24E5CA24E5CA24E5CA24E91D7FCA24E5BA24E5B606295B5FC625F625F625F624D91
D7C6FCA24D5BA24D5BA24D5BA294B55AA24C5CA24C5CA24C5CA24C91D7C7FCA24C5BA24C
5BA24C5BA293B55AA24B5C5D605D605D95D7C8FC5D5F5D5F4B5BA292B55AA24A5CA24A5C
A24A5CA24A91D7C9FCA24A5BA24A5BA24A5BA291B55AA2495CA2495CA2495CA24991D7CA
FCA2495B5B5D5B5D90B5FC5D5A5D5A5D485CA24891D7CBFCA2485BA2485BA2485BA2B55A
A25CA25CA26C5BA26C90D7CCFC6C5A6C5AEA03F0>214 400 69 434
0 54 D[<0003C5BC12FE000FA1F3FF8048A11CC048A11CE048A11CF0A2C5BE12F8A67EA2
7E7E7E1203D7CE121FB3B3B3B3B3A17513F0A2A17513E0A17513C0A109001300A11C18>
237 115 104 280 286 58 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmr17 51.6011 2
/Fb 2 42 df[<F401F0F403F81C071C1FF43FF0F47FE0F4FFC0511380511300515A515A
515A515A515A515A505B5090C7FC62505A505A505A505A505A614F5B4F5B4F90C8FC6219
1F4F5A4F5A4F5AA24E5B4E5B604E5B97C9FC604E5A61187F4E5A4D5BA24D5B5F614D5B5F
96CAFC5F4D5A6017FF605E4C5BA24C5BA24C5BA24C5B5E95CBFC5E5F16FF5F5DA24B5BA2
4B5BA24B5BA25D5F5D5FA25D94CCFC92B5FC5E5CA25E5CA24A5BA34A5BA25C5EA25C5EA2
5CA25E91B5FCA293CDFC5BA3495BA35B5DA35B5DA25BA25DA25BA25DA25BA35D90B5FCA5
485CA55A92CEFCA45AA25CA45AA45CA35AA65C5AAA485BAEB5FCA55CB3AD80A57EAE6C7F
AA7E80A67EA380A47EA480A27EA4817EA56C80A57F81A37FA281A27FA281A27FA2817FA3
817FA36D7FA37F82A28082A280A28280A28280A26E7FA36E7FA28082A28082818381A283
818381A26F7FA26F7FA26F7FA28183167F83828482707FA2707FA2707FA2707F8284177F
84717E838583717F8583717FA2717F727E183F85727E8486727F84727F727FA2737E737E
737E190F86737F737F737F85747E747E747E747E747E86747F747F757E757E757E757E75
7E757E7513807513C0F47FE0F43FF0F41FF81C071C03F401F0>93
427 89 448 152 40 D[<127C12FE7E13C06C7E6C7E6C7E6C7E6C7E6C7E6C7F6C7F6D7E
6D7E6D7E6D7E6D7E806D7F6D7F6D7F6E7E6E7E816E7E6E7E6E7F80826E7F6E7F6F7EA26F
7E6F7E826F7F81836F7F81836F7F707EA2707E8382707F848284707F82848284717EA271
7EA2717FA2717F85838583858385A2717FA2727EA2727FA286848684A28684868486A284
86A2727FA3737FA28785A28785A287A28587A28587A3737FA38785A38885A288A286A288
A286A288A38688A5747FA58886A488A286A41D80A486A31DC0A6861DE0AA7513F0AE1DF8
A587B3AD63A51DF0AE98B512E0AA1DC062A61D80A362A41D00A462A264A46264A5505BA5
6462A364A262A264A297B5FCA264A26199C7FCA36163A34F5BA36361A26361A263A26163
A26163A296B5C8FCA34E5BA26260A26260626062A260626062A24E90C9FCA24E5AA24D5B
A2615F615F615F614D5BA24D90CAFCA24D5AA24D5A605E605E4C5B605E604C90CBFC5E5F
4C5AA24C5A4B5B5F5D4B5B5F5D4B90CCFC5E4B5A4B5AA24B5A4A5B4A5B5E5C4A90CDFC4A
5A4A5A5D4A5A4A5A495B495B4990CEFC5C495A495A495A495A495A485B4890CFFC485A48
5A485A485A485A485A90D0FC5A127C>93 427 108 448 152 I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmmi12 51.6011 2
/Fc 2 113 df[<982601FFFE972607FFFC98267FFFC0953803FFE05190BE6C98BE12F0A2
5178501DF8A2A1A119F0A15E51A15DA2A1A119E0A14C8675A121C07554741D8098C86C08
F0CF000108FCC7FC0C0097D1003F4EC8FC0D1F06F80C0F18E00D0706E00C034DC9FC0D01
06807817F0794DD317807A04F8A148CAFCA1497A15F87A4CA112E07A4CA11280A17C4ACB
FC7A4C23F8A1A113E0A16D6B7AA14991CCFCA16D6A7AA15DA1A112F0A16D9DB55A7AA15D
A16D5591CDFC7AA1485BA16D697B595BA1575BA16D697B595BA16D555B7B5990CEFCA16E
545A7B585BA1565BA16E535B7B585BA16E535B7B585BA16E5390CFFC7B6BA1565AA16E52
5B7B575BA16E525B7C565BA16E525B7C68A15590D0FCA16E525A7C555BA16F505B7C555B
A1545B7C70505BA168A16F5090D1FC7C555AA16F505A7C545BA1535BA16F617C545BA16F
4F5B7D535BA16F4F90D2FC7D535AA1525BA16F4E5B7D66A1704D5B7D525BA1704D5B7D52
90D3FCA1525AA1704D5A7D63A1704C5B7D515BA1704C5B7D515BA1515BA1704C90D4FCA1
6C63A1704C5AA16C4F5BA1704B5BA16C4F5BA1505BA1714A5BA16C61A1714A90D5FCA16C
4F5AA14F5BA171495BA16C4E5BA171495BA16C4E5BA1715DA16C4E90D6FCA14F5AA17149
5AA16D4C5BA171485BA16D4C5BA1715AA16D4C5BA14E5BA195B5D7FCA16D5FA161A16D5F
A161A16D5FA161A161A16D94D7C6FCA160A16D5EA2A180A2A184A180A184A180A2A185A1
80A185A180A185A180A2A185A180A185A15CA14A82A15CA15CA185A15CA14A82A191B9FC
A14984A15BA14913EFA14984A14913C7A149018782A1491303A1D9FFFE83A148497EA148
13F8A102F083A148497EA1484983A148497FA14890C7FCA148486E81A1485A5986594980
594985594980595B5949855990C87E594886A14881584986584981585B58498658498158
90CA825884584887574983575B57498757498357498859835790CB83574884575A564989
5649845649895686565B564972825690CDFC56488A55498655498A5549866955498A5549
865590CE8355488755488C5449876654498C54498754498C5449875490CF835448886753
498D53498953498D53498953498D5390D17E6553488F52498A52498F52498A52498F5249
8A525B9BD28352488B5248A17E51498B515B5149A17E51498C51A18051498C5190D48251
488D505B5049A18050498D5049A18050498D5049A180508F97B5D5FC4F49A1814F498E07
0FA1834F498E4FA1834F498F4EB5FC4EA184060F4A8F4EA184067FA18095B6A1830503A1
5D170F053F6F598294B7A1B87E0403706A040FA1030783047F70101F830303B86C107F17
FE033F716C56BA7E0203BA00E00E0F19F049BB00FC9DBC12E0000FBD00F853BF12FC4876
538A48A18F77655A65A1A15AA15FBEFC656CA17066656C48CC003F497749CD00075B>
349 293 118 420 348 88 D[<E07FFC983807FFE00703B500C097B6FC071F02F8070715
E0077F02FF073F15FC4EB700C04DB87E4E04F0050717E0060F70051F17F84E04FE057F83
4E704CBAFC4ED9C03F6E4BDAF800819527FFFE00076E030F0280011F14E04F6D6E4B01FC
C70007804D01F06D6E037F01E00201804D496D6E92B500806E804D496E6D4A49C9003F7F
4F070701F8707F4D90C86E4A4970804D486F6D4A01C070804E5049854D48724948CA7E05
7F704C4871804E724849864D484F01E0718079485B4C494F49727F5690CCFC4C49724848
737F56488895C96C4B5A4C4D02F14973800DF35B4C4896B5488857854D98CD81041F6368
4D507480043F63A1864D4C5D047F63684DA18004FF98CEFC55874D4C4A8A5D674D6199B6
FC4BA117806794CAFC4B5FA24C5063A2030F5FA11BC04C62A2031F5FA24C97CFFCA15F63
A24C61ED07E092CB5AA15F66A263A266A14D158063A266A15F98B6FCA266A2509DB71200
A266A25067A16266A25067A29BCF5EA25067A25368A25067A25368A25067A16265A15E50
6BA265A14C5D97B6FCA197C7FC5399B7FCA24F6BA253515DA24F6BA15D65A1614F67A161
9ACF5AA1614F6BA15D529DC8FCA24F555CA252525CA24F9CB65AA1605263A1604F545DA2
52515DA195C9FC96B6647666A14A5CA15F4E67A15F76515CA191B65A60A1495D765092CA
FCA15E4E545C76505CA1495C774F5C4E69A1495C7796B6CBFCA1485C4E4A6D4E5CA1485C
516C6C4E5C774E5C4E033F4F5C774E5C516C6C95B6CCFC766C4D14FC4E0A075C766D4C5C
516C01E04C5C78047F148095B66D6D4BB6CDFC766D4B14FC516DB4030F5C7701C0023F14
E04D7101F049B612807701FF011F92CEFC516D91B712FC7718F04D05001880784CCFFC51
021F16F00C0716C04D060103FCD0FCE4003F14E098C9000101F8D1FC9CD4FC5FA262A25F
A262A25FA262A25FA262A294B6FCA262A25EA262A25EA262A25EA297D7C7FCA25EA261A2
5EA261A25EA261A25EA261A293B6FCA261A25DA261A25DA25DA25D5D4B8192B712FC023F
EEFFF0000FBC12FE48874888A25AA39AD6FCBEFCA27E64D83FFCCB00035B>218
271 141 315 211 112 D E
%EndDVIPSBitmapFont
/Fd 140[214 4[238 1[95 2[95 238 1[119 238 3[238 9[404
13[119 9[238 63[{TeXBase1Encoding ReEncodeFont}11 428.403
/Helvetica rf
%DVIPSBitmapFont: Fe cmr5 10.37 2
/Fe 2 42 df<EC03801407EC1F00143E5C5C495A495A495A495A131F49C7FC137EA25B48
5AA2485AA212075B120F5BA2121FA25B123FA290C8FC5AA5127E12FEAF127E127FA57E7F
A2121F7FA2120FA27F12077F1203A26C7EA26C7E137EA27F6D7E130F6D7E6D7E6D7E6D7E
147C8080EC07801403195774C02F>40 D<12E07E127C7E7E6C7E6C7E6C7E6C7E6C7E7F13
7E7FA26D7E6D7EA26D7EA2801303801301A280A2130080A2147E147FA5801580AF15005C
A5147E14FEA25C1301A25CA213035C13075CA2495AA2495A49C7FCA2137E5B5B485A485A
485A485A48C8FC123E5A12F05A195778C02F>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmmi5 10.37 2
/Ff 2 113 df<49B66C013FB5FC1C80A21C00D9000301F8C7000713E0020001E06E48C7
FC1AF86F6CEC07E0033F4B5A704A5A6F6C023EC8FC616F6C5C4E5A6F6C495A6F4A5A7148
5A6F6D48C9FC183E6FEBE0FC93387FE1F8EFF3E093383FF7C0EFFF807090CAFC5F160F16
0783707F160F4C7F5E047C7FEEF87FDB01F07F4B486C7EED07C04B486C7EED1F00033E6D
7E4B13074A48804A486D7F4A5ADA0F806D7F4AC8FC023E824A157F4A82D903F06F7E495A
011F707EEB7FC02603FFE0ED7FFFB500FC0203B512FE6E5CA25C513B77BA60>88
D<D90FC0EB3FC0903A3FF801FFF890267FFC0713FE903AF8FF0FC07F3C01F07F3F003F80
01E001FCEB1FC0D803C049EB0FE04B14F000074A130701805B4B14F814FF485A92C7FCC7
FC49150FA25CA20103151F18F05CA20107ED3FE0A24A15C0177F010F1680EFFF00A24C5A
496C495A4C5A6EEB0FE06EEB3FC090273FEFC0FFC7FC9138E7FFFE02C113F09138C07F80
017F90C9FCA25CA213FFA291CAFCA25AA25B1203387FFFFCB5FCA26C5B35377CA540>
112 D E
%EndDVIPSBitmapFont
/Fg 105[39 34[35 2[39 3[16 5[20 39 3[39 23[20 9[39 12[39
39 1[20 20 46[{TeXBase1Encoding ReEncodeFont}13 70.5976
/Helvetica rf /Fh 138[102 1[102 102 1[102 102 102 102
2[102 102 2[102 102 3[102 32[102 17[102 46[{
TeXBase1Encoding ReEncodeFont}14 169.605 /Courier rf
/Fi 75[47 27[47 29[71 3[71 79 39 71 47 1[79 79 79 118
31 2[31 2[39 79 79 71 1[79 11[102 1[94 2[94 2[118 2[71
39 2[86 13[79 1[79 3[79 1[79 3[39 44[{TeXBase1Encoding ReEncodeFont}31
141.195 /Helvetica rf
%DVIPSBitmapFont: Fj cmr17 43.0148 2
/Fj 2 42 df[<1BF0F203F81A07F20FF0F21FE0F23FC0F27F80F2FF0019034F5A4F5A4F
5A4F5A4F5A4F5A624E90C7FC604E5A4E5A4E5A4E5A187F4E5A614D5B5F4D90C8FC4D5AA2
4D5A4D5A177F604D5A5E604C5B5E95C9FC5E4C5A5F163F4C5AA24C5AA24B5B5D5F5D5F5D
94CAFC5D5E153F5E157FA24B5AA24A5BA24A5BA25C5E5C5EA25C93CBFC5CA25D147FA24A
5AA3495BA3495BA3495BA35B5DA25BA25D5BA392CCFC5BA35C13FFA4485BA45A5CA45AA2
5CA35AA35CA45AA45CA35AA75C5AADB5CDFCB3B3A36C7FAD7E80A77EA380A47EA480A37E
A380A27EA4807EA46C7FA4137F80A37F81A37F81A27FA2817FA36D7FA36D7FA36D7FA36E
7EA2143F81A2808280A282808280A26E7FA26E7FA26F7EA2153F82151F82818381838183
816F7FA2707EA2707E161F83707E828482707F8482717E84173F717E717EA2717E717F83
717F85727E183F727E727E727E727E84727F86737E737E737E737E737E737E1900F27F80
F23FC0F21FE0F20FF0F207F81A03F200F0>77 355 96 394 126
40 D[<127812FE7E6C7E6C7E6C7E6C7E6C7E13FE6C7E6C7F6C7F6D7E6D7E6D7E130F6D7E
806D7E6D7F6D7F6E7E816E7E141F6E7E816E7E6E7FA26E7F6E7F82157F6F7E82151F6F7E
8281836F7F81836F7FA2707EA2707E83161F838284828482848284A2707FA2717EA2717E
A284838583A2858385A28385A2717FA3717FA3727EA3727EA38684A286A28486A38486A3
8486A4727FA48684A486A285A31B80A385A41BC0A485A31BE0A7851BF0AD7313F8B3B3A3
4F13F0AD1BE061A71BC0A361A41B80A461A31B00A396B5FCA262A46062A44E5BA46260A3
6260A36260A262A26097C7FCA34E5AA34E5AA34D5BA34D5BA2615FA2615F61A25F96C8FC
5F60A24D5AA24D5AA24C5BA2605E605E605E95C9FC5E5F163F5F4C5AA24C5AA24B5B5F5D
4B5B94CAFC5D5E4B5A153F5E4B5A15FF5E4A5B4A5BA24A90CBFC4A5A5D4A5A143F4A5A5D
4A5A495B4990CCFC495A5C495A131F495A495A495A485B4890CDFC485A13F8485A485A48
5A485A48CEFC5A1278>77 355 112 394 126 I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmmi12 43.0148 2
/Fk 2 113 df[<97267FFFC00503B5962607FFFEEF1FFF99BC98BB128097BE6C4E1BC0A2
4FA15AA1A11280A2A190CCFCA27352731B00A16B97C76C4ECE001F06F8C7FC0A0106E009
034DC8FC766C94CF6C17E00B1F04FC764CC9FC774C7715F87704E07715C0774C9ECAFC77
4C7714FC9FD115F077A113C0A167A154CBFC786F67A11EF078575B7C67785790CCFC7C66
A1525A786F525BA16578565B7C525B78565B7C5290CDFCA1F33FFC786F525AA11BFF7855
5B7C65A1505B796F505BA15090CEFC796F505AA1505A79545A7D505AA14F5B796F4F5BA1
4F5B795390CFFC7D4F5A791D3F7D62A14F5A796F4F5AA14E5B79525B7D4E5B7A5190D0FC
A16C4D5AA14E5A7A6F4D5AA14E5A7A505BA16C4C5BA15F7A6F4C5BA196D1FC7A6F4C5AA1
4D5A7A505AA16C4C5AA14C5B7A6F4B5BA14C5B7A4F90D2FCA16C4B5A7B4E5AA16D4A5AA1
4C5A7B6F5BA15F7B4D5BA16D495B7B4D90D3FCA16D495AA14B5A7B6F495AA14B5A7B4C5B
A16D485BA14A5B7B6F4890D4FCA14A5A7BEDFF3FA15D7C4B5AA14A5AA15D7C5EA15D7C93
D5FCA15C7C5DA15CA15C7C81A28EA1808EA180A27C81A28FA181A27D81A2A1816BA0B7FC
5882A258826A6A5882FA3FFDE87FF981FAFFF15701E081575B57497E5701008257487F0F
3F84575A586D81575A56497F564983565B5690C76C81565A56486E81565A564880554984
555B55496E81679EC97E554886554882554886555A54497081545B5449825490CA825448
83544887545A54487181655583534987535B5390CC81535A53487381535A534885524989
525B524973815290CDFC5248860A3F8B524886538A525A51497481515B5149865190CE82
51488751488B515A51487681505B50498850498C6299D06C81505A50487781505A504889
4F498D4F5B4F4977814F90D1FC4F488A4F488E4F488A4F488E604E4979814E5B061F498B
4EA17F4E90D37E95B5A17E4D5B05077C815F053F498C4DA1804CB5FC0407A1814C6E6804
3F59814BB6578103076F9DB8FC033F700C0317C04AB86C0C0F83021F05F00C3F17FC0107
B900FE0B03BA12F0003FBB00F80903BD12F04874518875A180A15BBCFC63A166A351A15C
D87FFCCA001F497549CB001F5B>290 244 119 371 290 88 D[<952603FFC0F13FFE06
1F01FC0603B512F0067F01FF061F14FE4DB600C094B77E4D03F0040316E0050F03FC040F
16F84D6F043F16FE94263FFE016D4CD9E00F7F94277FF0007F6D4A4848C7804D486D6D4A
01F0023F13E006806D6D020F01C06E7F4C90C76C6D4A90C86C7F4C4870DA3FFC6F7F0407
71DAFFF06F7F4D6E4B496F7F4C48704901806F804D4E90CAFC041F714948717F4DDE1FF8
85043F6F6E4848717F4D4E5A047F724848717F4D05C15B04FF06C390CB8094C8DBC7FE84
4BDFEFFC864C6150DAFFF0727F0303624C4F1B80A20307501BC04C96CCFC5385030F4C4A
1CE05E65031F614C23F0505C033F615EA2501FF8157F4C60A26215FF93C992CD5AA297B6
FC5C4B60A2614B6902006192C9FC61A264A15B61A264A24F65A264A116F04F65A264A24F
9AB6FCA116E064A24F64A116C099CDFCA296B662A1168063A24E65A1160063A24E535CA2
63A15D4E65A15D63A15A4E68A251505CA24E68A1B6FC5165A24E5292C7FCA251646B4E67
A298CD485CA295B6505CA15C5062A15C4D65A15C505091C8FCA24D9AB55AA15B585C864D
525C585CA15B585C4D6E61A190C9FC585B754E5B4D669FB55A754D5C575C4D6F4D5C08DF
4E91CAFCE09FF04D5B088F4E5B4D6F4D5BE087FC94B512E0E003FE4C5C565C94B66C6C4C
91CBFC746D031F13FC4F6E4B5BE17FF092B512E04C706C4A5CE11FFE020F91CCFC4F6D6C
6C013F13FC75D9F803B55A4C7090B712E0090017804F6E03FCCDFC0A1F15F04C05071580
0A0002F8CEFC4F031F90CFFC9AD1FC5EA261A25EA261A25EA261A25EA296D5FCA293B6FC
A260A25DA260A25DA260A25DA260A25DA260A25DA260A25DA260A25DA392B6D6FC845C5C
020F15E091B8FC001FBB7E48865AA3BCFCA3637ED83FFCC9000191D3FC>181
227 139 285 175 112 D E
%EndDVIPSBitmapFont
/Fl 140[139 6[99 5[119 159 3[179 23[139 9[179 17[119
45[{TeXBase1Encoding ReEncodeFont}8 357.117 /Times-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 2 1
2 1 bop 4500 6000 a
 tx@Dict begin 90 Rot  end
 4500 6000 a 5001 5222 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -11.38092 190.63329
355.65929 221.93147 .5 Frame  gsave 0.28 0.24 0.55 setrgbcolor fill
grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -11.38092 -19.91682
128.03734 -38.41138 .5 Frame  gsave 0.28 0.24 0.55 setrgbcolor fill
grestore end
 
@endspecial
7450 5613 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end
 
@endspecial 392
w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end
 
@endspecial 392 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end
 
@endspecial 392 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end


@endspecial 392 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end
 
@endspecial
392 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end
 
@endspecial 392 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end
 
@endspecial 392 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end


@endspecial 392 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end
 
@endspecial
392 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end
 
@endspecial 4854 1302
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end
 
@endspecial -147 x @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end
 
@endspecial -147 x @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0.75 setgray  0.0 0.0 1.2 SD  end


@endspecial 5001 3450 a
SDict begin H.S end
 5001 3450 a 5001 3450 a
SDict begin H.R end
 5001
3450 a 5001 3450 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark
end
 5001 3450 a 5001 3450 a
SDict begin [ {ThisPage} << /Trans << /S /R >> >> /PUT pdfmark end
 5001 3450
a 5001 3450 a
SDict begin [ /Page 2/View [ /XYZ null null null ] /Title (-) /OUT
pdfmark end
 5001 3450 a 4903 1590 a
 0.75 setgray
 4903 1590 a Fl(-)5022
1590 y
 0 setgray
 5022 1590 a 4973 2274 a
 0. setgray
 4973 2274 a 4973 2274
a
 0. 0. 1. setrgbcolor
 4973 2274 a 321 x Fd(Is)5306 2595 y
 0. setgray
 5306 2595 a 476
w Fc(p)p Fb(\()p Fc(X)34 b Fb(\))475 b Fd(f)-13 b(alse)120
b(?)4973 3437 y
 0. 0. 1. setrgbcolor
 4973 3437 a 502 x Fd(When)6091 3939 y
 0. setgray

6091 3939 a 477 w Fc(p)p Fb(\()p Fc(X)34 b Fb(\))475
b Fd(is)119 b(f)-13 b(alse)120 b(?)4973 5144 y Fa(6\021)5663
5144 y
 0. 0. 1. setrgbcolor
 5663 5144 a Fa(:)f Fc(p)p Fb(\()p Fc(X)34 b Fb(\))6963
5144 y
 0. setgray
 6963 5144 a 477 w Fa(\021)4973 5251 y
 0 setgray
 4973 5251
a 10245 5222 a
 0 setgray
 10245 5222 a 9928 5847 a
 0. setgray
 9928 5847 a 9928
5847 a
 0. setgray
 9928 5847 a Fg(Is)19 b Ff(p)p Fe(\()p Ff(X)7 b
Fe(\))18 b Fg(f)n(alse)i(?)g(\226)g(p)n(.)f(2/2)10740
5847 y
 0 setgray
 10740 5847 a 10740 5847 a
 0 setgray
 10740 5847 a 4500 6000
a
 tx@Dict begin -90 Rot  end
 4500 6000 a eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
