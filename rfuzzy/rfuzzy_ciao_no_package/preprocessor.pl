% Preprocessor for Constructive Negation
%
% Started: Friday 26 February 2009
%
% Victor Pablos Ceruelo - vpablos@babel.ls.fi.upm.es
%

:- module(preprocessor,[pp/1, compile_all_tests/0]).

:- use_module(library(write)).
:- use_module(rfuzzy_tr, _).
 
%:- import append/3 from basics.
% :- import term_to_atom/2 from string.
% :- import is_a_list/1 from aux_preds.
%:- import comp_pred/3 from intneg_tr.


% :- op(1110,xfy, ':-' ).         % Rule symbol
:- dynamic special_sentence/1.
:- dynamic fn_In/1.
:- dynamic fn_Out/1.
:- dynamic fn_Show/1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                     Options                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

filename_suffix("_rfuzzy").
filename_extension(".pl").
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Consulting a file                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pp(FileName) :-
	convert_File_Names(FileName),
        openInputFile(Stream_In),
	!, % Do not open them more than once ...
        process_File([], Stream_Out),
	closeFiles(Stream_In, Stream_Out),
	message_to_user.

pp(Filename) :-
	write('You have entered an erroneous file name: '),
	write(Filename), nl, 
	write('Remember that file name must be between double quotes and without extension.').

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%  Input and Output  %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

convert_File_Names(Source_FN) :-
	filename_suffix(Suff),		% Suffix to use.
	filename_extension(Ext),		% Extension to use.
	% Input filename.
	append(Source_FN, Ext, Source_FN_In),	% Add extension
	name(FN_In, Source_FN_In),		% Convert string to atom.
	assertz_fact(fn_In(FN_In)),
	% Show filename.
	append(Source_FN, Suff, Source_FN_Show),	% Add suffix
	name(FN_Show,Source_FN_Show),	% Convert string to atom.
	assertz_fact(fn_Show(FN_Show)),
	% Output filename.
	append(Source_FN_Show, Ext, Source_FN_Out), % Add extension
	name(FN_Out,Source_FN_Out),		% Convert string to atom.
	assertz_fact(fn_Out(FN_Out)), 
	write('File names: in: '), write(FN_In), 
	write(' out: '), write(FN_Out), 
	write(' show: '), write(FN_Show), nl.
	
openInputFile(Stream_In) :-
	fn_In(FN_In),
	open(FN_In,read,Stream_In),
	set_input(Stream_In).
openOutputFile(Stream_Out) :-
	fn_Out(FN_Out), 
	open(FN_Out,write,Stream_Out),
	set_output(Stream_Out).

closeFiles(Stream_In, Stream_Out) :-
%	seen, % Close stdin
%	told. % Close stdout
	close(Stream_In),
	flush_output(Stream_Out),
	close(Stream_Out).


writeHeader :-
	write('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),nl,
       write('% This program was generated by the preprocessor for           %'),nl,
       write('% Constructive Intensional Negation on Well Founded Semantics. %'),nl,
       write('%                                                              %'),nl,
       write('% Victor Pablos Ceruelo ( vpablos at babel.ls.fi.upm.es )      %'),nl,
       write('%                                                              %'),nl,
       write('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),nl,nl,
       write('% The original program file name was: '),
       fn_In(FN_In),
       write(FN_In),write(', and it contained: '), nl,
       write('% -------------------------'), nl,
       write('% '), nl.

writeBegin :- !,
	write('% '), nl,
	write('% -------------------------'), nl, 
	write('% End of original program.'), nl, 
	nl, nl,
	write_special_clauses,
	nl, nl.

message_to_user :-
	fn_Out(FN_Out),
	write('Load the file using ['),
	write(FN_Out), write(']. '), nl.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     Load clauses and save them for processing      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

process_File(ClsProcessed, Stream_Out) :-
    read(Clause),
    write_sentence(['DBG'], Clause),
    process_File_aux(ClsProcessed, Stream_Out, Clause).

process_File_aux(ClsProcessed, Stream_Out, Clause) :-
	eof(Clause), !,		% End read.
	% Time to write on destiny file.
        openOutputFile(Stream_Out),
	!, % Do not open them more than once ...
	writeHeader, 
	write_sentences_list(['% '], ClsProcessed), % Write original program.
	writeBegin,		% Comment
	load_Clause(Clause).
	
process_File_aux(ClsProcessed, Stream_Out, Clause) :-
	%	write_sentence(['% '], Clause), % Debug clause.
	load_Clause(Clause),  % Save clause for processing.
	process_File([Clause|ClsProcessed], Stream_Out). % Read the whole file.

eof(end_of_file).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Process the program                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

load_Clause(Cl) :-		% End of file.
	eof(Cl),		% Check if it is the end.
	real_load_Clause(Cl,Cl_Out,_),	% Get output (A list).
	nl,nl,			% Separate debug from final code.
	write_sentences_list([], Cl_Out). % Write output (A list).
	
%load_Clause(Cl1) :-	                  % Special sentence
%	change_special_sentence(Cl1). % Change it if needed.
	
load_Clause(Cl) :-
	real_load_Clause(Cl,[],_).	% Normal case.

real_load_Clause(Clause, Output, Unknown) :-
	%comp_pred(Clause, Output, Unknown).
	fuzzy_pred(Clause, Output, Unknown).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%            Process special sentences               %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

write_special_clauses :-
%	write(':- import forall/2 from forall.'),nl,
%	write(':- [metaNew].'), nl,
	!, % Backtracking is not allowed here !!!
	findall(Cl2,(retract(special_sentence(Cl2)),
		     write_sentence([], (:- Cl2))),_Cls), !.

change_special_sentence((:- Cl1)) :-
%      write('% DBG % :- '),
%      write(Cl1), nl,
      change_special_sentence_aux(Cl1, Cl2),
      assertz(special_sentence(Cl2)).

change_special_sentence_aux(module(Atom1, Exports1), module(Atom2, Exports2)) :- !,
	name(Atom1,Name1),	 % String to atom.
	filename_suffix(S),	 % Find correct suffix for files.
	append(Name1, S, Name2), % Append
	name(Atom2,Name2),	 % Atom to string.
	change_exports(Exports1, Exports2). % Change exports (add intneg).

change_special_sentence_aux(module(Atom1, Exports1, Pkgs), module(Atom2, Exports2, Pkgs)) :- !,
	name(Atom1,Name1),	 % String to atom.
	filename_suffix(S),	 % Find correct suffix for files.
	append(Name1, S, Name2), % Append
	name(Atom2,Name2),	 % Atom to string.
	change_exports(Exports1, Exports2). % Change exports (add intneg).

change_special_sentence_aux(M, M).

change_exports(Exports1, [intneg/1 | Exports1]) :-
	nonvar(Exports1).
change_exports(Exports, '_') :-
	var(Exports).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%        Switch terms to prolog sentences            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

write_sentences_list(Pre, []) :-
	write_pre_messages(Pre),
	nl.
write_sentences_list(Pre, Sentences) :-
	write_sentences_list_aux(Pre, Sentences).

write_sentences_list_aux(_Pre, []) :- !.
write_sentences_list_aux(Pre, [Sentence]) :- !,
	write_sentence(Pre, Sentence).
write_sentences_list_aux(Pre, [Sentence|Others]) :-
	write_sentence(Pre, Sentence),
	write_sentences_list_aux(Pre, Others).

write_sentence(_Pre, end_of_file) :- nl, nl. % Do not write.
write_sentence(Pre, Sentence) :-
	write_pre_messages(Pre),
	write('('),
	write_sentence_aux(Sentence),
	write(').'), nl, !.

write_pre_messages([]) :- !.
write_pre_messages([Msg]) :- !,
	write(Msg).
write_pre_messages([Msg|Others]) :- !,
	write(Msg),
	write_pre_messages(Others).
	
write_sentence_aux(Sent) :-		% Variables
	var(Sent), !, 
	write(Sent).

%write_sentence_aux(Sent) :-	% List
%	functor(Sent,Name,X), !,
%	write(functor(Sent,Name,X)), nl, 
%	is_a_list(Sent), !, 
%	write('['),
%	write_sentence_list_args(Sent, ', '),
%	write(']').

write_sentence_aux(Sent) :-		% Or
	functor(Sent,';',2), !, 
	Sent =..[';'|Args],
	write('('),
	write_sentence_list_args(Args, ' ; '),
	write(')').

write_sentence_aux(Sent) :-		% And
	functor(Sent,',',2), 
	Sent=..[','|Args], !,
	write('('),
	write_sentence_list_args(Args, ', '),
	write(')').

write_sentence_aux(Sent) :-	% /
	functor(Sent,'/',2),
	Sent=..['/'|Args], !,
%	write('('),
	write_sentence_list_args(Args, '/').
%	write(')').
	
write_sentence_aux(Sent) :-	% List.
	functor(Sent,'.',2), 
	Sent=..['.',Arg1,Arg2], !,
	write('['),
	write_sentence_aux(Arg1),
	write_sentence_arg_being_list(Arg2),
	write(']').

write_sentence_aux(Sent) :-	% Rule.
	functor(Sent,':-',2), 
	Sent=..[':-'|Args], !,
	write('('),
	write_sentence_list_args(Args, ' :- '),
	write(')').

write_sentence_aux(Sent) :-	% Functor Ar > 1
	functor(Sent,Name,Arity),
%	write(functor(Sent,Name,Arity)), nl,
	Arity > 1, 
	Sent=..[Name|Args], !, 
	write(Name),
	write('('),
	write_sentence_list_args(Args, ', '),
	write(')').

write_sentence_aux(Sent) :-	% Functor Ar == 1
	functor(Sent,Name,Arity),
%	write(functor(Sent,Name,Arity)), nl,
	Arity == 1,
	Sent=..[Name,Arg], !, 
	write(Name),
	write('('),
	write_sentence_aux(Arg),
	write(')').

write_sentence_aux(Sent) :-	% Functor Ar == 0
	functor(Sent,Name,Arity),
%	write(functor(Sent,Name,Arity)), nl,
	Arity == 0, !, 
	write(Name).

write_sentence_aux(Sent) :-		% Others
	!, 
	write_sentence_error(Sent).

write_sentence_list_args([], _Separator) :- !.
write_sentence_list_args([Sent], _Separator) :- !,
	write_sentence_aux(Sent).
write_sentence_list_args([Sent|Others], Separator) :- !,
	write_sentence_aux(Sent),
	write(Separator),
	write_sentence_list_args(Others, Separator).
write_sentence_list_args(Sent, Separator) :- !,
	write_sentence_error(Separator), 
	write_sentence_error(Sent).

write_sentence_arg_being_list(Arg2) :- % Variable
	var(Arg2), !,
	write('|'),
	write_sentence_aux(Arg2).
write_sentence_arg_being_list(Arg2) :- % Empty
	functor(Arg2,'[]',0). 
write_sentence_arg_being_list(Arg2) :- % Sublist
	functor(Arg2,'.',2), 
	Arg2=..['.',Arg2_1,Arg2_2], !,
	write(','),
	write_sentence_aux(Arg2_1),
	write_sentence_arg_being_list(Arg2_2).
write_sentence_arg_being_list(Arg2) :- % Maybe a sentence
	write('|'),
	write_sentence_aux(Arg2).
write_sentence_arg_being_list(Arg2) :- !, % Error
	write_sentence_error(Arg2).

write_sentence_error(Sent) :-
	nl,write('% write_sentence_aux: unknown sentence: '), 
	write(Sent),
	nl, !. % Don't do backtracking.


compile_all_tests :-
	write('Compiling all intneg tests'), nl,
	pp("ex_intneg_01"), pp("ex_intneg_02"),
	pp("ex_intneg_03"), pp("ex_intneg_04"),
	pp("ex_intneg_05"), % pp("ex_intneg_06"),
%	pp("ex_intneg_07"), pp("ex_intneg_08"),
%	pp("ex_intneg_11"), 
	pp("ex_intneg_12"), pp("ex_intneg_13"), 
%	pp("ex_intneg_14"),
	nl, nl.