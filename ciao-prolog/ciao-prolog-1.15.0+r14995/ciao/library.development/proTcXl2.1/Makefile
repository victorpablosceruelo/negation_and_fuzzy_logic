# Generated automatically from Makefile.in by configure.
#
# Trimmed down by MCL to avoid problems (e.g., "accidental" files deletion...)
#
# Makefile for the ProTcl. It has been automatically generated by autoconf
# from Makefile.in.
#
# sccsid("@(#)Makefile.in	1.17	      96/03/25").
#

include ../../SETTINGS

#
# Some of the following paths might have to be modified
#
#


# In Eclipse, it is possible to share the same installation for
# several architectures and so machine-dependent files are moved
# to the corresponding directory. For other Prologs, this is a no-op.
# If unknown, replace it by the string you get with get_flag(hostarch, ARCH)
# ARCH		= .

# Some machines are sensitive to cc/gcc combination, so it is better
# to use the same C compiler to install Prolog and ProTcl

CC = gcc			# Passed from top level?


# Maybe these shoulb be set somewhere else...

TCL_INCLUDE = /usr/local/include
TK_INCLUDE = /usr/local/include
TCL_LIBRARY=/usr/local/lib
TK_LIBRARY=/usr/local/lib
X_INCLUDE = # no special path needed


##################################################
#
# The stuff below does not have to be modified, unless configure failed
#

PROLOG_INCLUDE	= ../../Emulator	# For sicstus.h

SHELL=/bin/sh

# X include directory

# X library directory
XLIBSW = -lX11

# The ProTcl source directory
PROTCL_SOURCE = $(CIAOSRC)/lib/proTcXl2.1

OBJECTS = tk.o protcl.o xlib.o
PROLOG = SICSTUS
TOP_FILE = stk.pl
RANLIB = ranlib
TK_O = tk.o protcl.o xlib.o
TK_SO =
# The following is for extension loading with shared objects
USER_OBJECTS =

##############################################################################

LDFLAGS =
# CFLAGS = -O -I$(TCL_INCLUDE) -I$(TK_INCLUDE) $(X_INCLUDE) -D$(PROLOG) -I$(PROLOG_INCLUDE)
CFLAGS = -g -I$(TCL_INCLUDE) -I$(TK_INCLUDE) $(X_INCLUDE) -D$(PROLOG) -I$(PROLOG_INCLUDE)

.SUFFIXES:	$(SUFFIXES) .so

#
# Install ProTcl for ECLiPSe. In this case lib_graphic must be in ../..
#
# install:	$(TK_O) libinit.a tk.pl dirs.pl
#		chmod 644 $(OBJECTS) $(TK_SO) libinit.a *.pl
#		@for i in ../../lib_graphic/$(ARCH) ../../lib_graphic/tk ; \
#		    do \
#		    if [ ! -d $$i ] ; then \
#			echo "Making directory $$i"; \
#			mkdir $$i; \
#			chmod 755 $$i; \
#			else true; \
#			fi; \
#		    done;
#		/bin/rm -rf ../../lib_graphic/tk/local
#		/bin/mv -f dirs.pl $(OBJECTS) $(TK_SO) libinit.a ../../lib_graphic/$(ARCH)
#		/bin/cp Makefile ../../lib_graphic/$(ARCH)
#		/bin/cp tk.pl tcl.pl xlib.pl tr_xlib.pl tkext.pl tk_common.pl \
#			../../lib_graphic/tk
#		/bin/cp -r local doc README ../../lib_graphic/tk
#		-chmod -R +w ../../lib_graphic/tk
#		-chmod -R a+rX ../../lib_graphic/tk

#
# Install ProTcl as a standalone library, it can be anywhere
#
local:		$(TK_O) libinit.a dirs.pl tk.pl
		-@chmod 644 tk.*o libinit.a tk.pl dirs.pl
		-@chmod -R a+r .


tk.so:		$(OBJECTS) libinit.a
		$(CC) $(LDFLAGS) -G $(OBJECTS) -o $@ \
		    -L. -L$(TCL_LIBRARY) -L$(TK_LIBRARY) \
		    -linit -ltk4.0 -ltcl7.4 $(XLIBSW) -lm

tkext.so:	$(OBJECTS)
		$(CC) $(LDFLAGS) -G $(OBJECTS) -o $@ \
		    $(USER_IBJECTS) \
		    -L. -L$(TCL_LIBRARY) -L$(TK_LIBRARY) \
		    -ltk4.0 -ltcl7.4 $(XLIBSW) -lm

# tk.pl:		tk.o
#		/bin/cp $(TOP_FILE) tk.pl

dirs.pl:
		echo "tcl_library('$(TCL_LIBRARY)')." > dirs.pl
		echo "tk_library('$(TK_LIBRARY)')." >> dirs.pl
		echo "protcl_source('$(PROTCL_SOURCE)')." >> dirs.pl
		echo "xlibsw('$(XLIBSW)')." >> dirs.pl
		echo "x_include('$(X_INCLUDE)')." >> dirs.pl
		echo "protcl_objects('$(OBJECTS)')." >> dirs.pl

libinit.a:	tkAppInit.o
		ar rcv ./libinit.a tkAppInit.o
		$(RANLIB) ./libinit.a

clean:
		/bin/rm *.o *.so

tags:
		etags -t *.[ch]
		etags -a -l none -r '/^[a-zA-Z0-9_]+(/' -r "/^'[^']*'(/" *.pl

touch:
		touch *.c
