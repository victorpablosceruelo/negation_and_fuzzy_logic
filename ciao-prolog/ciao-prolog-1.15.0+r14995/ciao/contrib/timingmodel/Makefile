# -*- mode: Makefile; -*-
##
## Makefile
##  
## Made by Edison Mera
## Login   <edison@clip.dia.fi.upm.es>
##
## Started on  Tue Aug 28 16:55:54 2007 Edison Mera
## Last update Tue Dec 29 23:26:49 2009 Edison Mera
## 

include SHARED

##############################################################################
# We have to fix this: DONT USE -include !!! --EMM
-include $(CIAODESRC)/build/CONFIG_mkf
##############################################################################

CIAODIR=/home/edison/Local/CiaoDE

EXTRACLEAN=testclean benchclean benchcommonclean binpackclean	\
estimateclean estimatecommonclean benchpackclean

REPOSITORY=svn+ssh://clip.dia.fi.upm.es/home/edison/svnreps/edison/trunk/apps/cpp/miniprolog

MASTER?=$(HOSTNAME)

HOSTNAME?=$(shell hostname)

TARGETS=$(shell mkdir -p bench ; ls bench)

SOURCES=$(shell mkdir -p benchpack ; ls benchpack)

-include SETTINGS-$(MASTER)-$(HOSTNAME)

SSH=ssh -q -T

.PHONY:bench estimate estimatecommon calibrate calib2eq statsciao	\
      benchpack binpack benchpacks benchpacklocals benchpackclean	\
      benchcommonpack benchcommonunpack benchcopy benchcommon clean	\
      benchcommons benchcommonp benchpackcopy benchcopys		\
      benchpackcopys update cleans checkouts extras $(EXTRACLEAN)	\
      cmdpar cmdparrec updates benchs alls cmdser cmdserrec

MAKEREC=$(MAKE) MPARCH=$(MPARCH) EXECSUFFIX=$(EXECSUFFIX) \
	-f $(CURDIR)/Makefile.mk

benchcommon: benchcommon2_$(CROSSCOMPILE)
benchcommon2_$(CROSSCOMPILE): benchcommon1_$(CROSSCOMPILE)

benchcommon1_yes: CROSSCOMPCMD="benchcommon benchcommonpack"
benchcommon1_yes: crosscompcmd

benchcommon2_yes: CROSSCOMPTAR=benchcommon
benchcommon2_yes: crosscompget

benchcommon1_:
	@echo {generating common benchmark files in $(HOSTNAME) ...}
	$(MAKEREC) OBJBASE=benchcommon TARGET=_all benchcommon
	@echo {finished common benchmark files in $(HOSTNAME)}

bench: benchcommon
	@echo {starting benchmarks in $(HOSTNAME) for $(MPARCH) ...}
	@$(MAKEREC) OBJBASE=bench TARGET=_$(MPARCH) bench
	@echo
	@echo {finished benchmarks in $(HOSTNAME) for $(MPARCH)}

estimatecommon:
	@echo {generating common estimation files in $(HOSTNAME) ...}
	@$(MAKEREC) OBJBASE=estimatecommon TARGET=_all estimatecommon
	@echo {finished common estimation files in $(HOSTNAME)}

estimate: estimatecommon
	@echo {estimating times in $(MPARCH), please wait ...}
	@$(MAKEREC) OBJBASE=estimate TARGET=_$(MPARCH) estimate;
	@echo {finished estimating times in $(MPARCH)}

estimates: $(addsuffix .esti, $(TARGETS))
%.esti: estimatecommon
	echo {estimating times in $*, please wait ...}
	$(MAKEREC) OBJBASE=estimate TARGET=$* estimate

calibrate:
	@echo {calibrating $(MPARCH), please wait ...}
	@$(MAKEREC) OBJBASE=estimate TARGET=_$(MPARCH) calibrate

calib2eq:
	@echo {calibrating $(MPARCH) with method 2, please wait ...}
	@$(MAKEREC) OBJBASE=estimate TARGET=_$(MPARCH) calib2eq

calibrates: $(addsuffix .cali, $(TARGETS))
%.cali:
	echo {calibrating $*, please wait ...}
	$(MAKEREC) OBJBASE=estimate TARGET=$* calibrate;

calib2eqs:
	echo {calibrating $(TARGET) with method 2, please wait ...}
	$(MAKEREC) OBJBASE=estimate TARGET=$* calib2eq

statsciao:
	(echo "use_module(library(hrtime)).";\
	  echo "consult('tests/fib.pl').";\
	  echo "hrtime(_T1), fib(20,N), hrtime(_T2), TimeFib is _T2-_T1.";\
	  echo;\
	  echo "consult('tests/hanoi.pl').";\
	  echo "hrtime(_T1), hanoi(8,a,b,c,_N), hrtime(_T2), TimeHanoi is _T2-_T1.";\
	  echo;\
	  echo "halt.") | \
	ciao
	(echo "use_module(library(hrtime)).";\
	  echo "consult('tests/nreverse.pl').";\
	  echo "hrtime(_T1), length(X,20), hrtime(_T2), TimeRev is _T2-_T1.";\
	  echo;\
	  echo "halt.") | \
	ciao

clean: testclean
	$(MAKE) -C miniprolog clean

oticlean:
	$(RM) bench/_$(MPARCH)/*.oti estimate/_$(MPARCH)/*.oti

benchclean:
	$(RM) -r bench

benchcommonclean: benchcommonclean_$(CROSSCOMPILE)
	$(RM) -r benchcommon

benchcommonclean_yes: CROSSCOMPCMD=benchcommonclean
benchcommonclean_yes: crosscompcmd

benchcommonclean_:

estimateclean:
	$(RM) -r estimate

estimatecommonclean:
	$(RM) -r estimatecommon

testclean: benchclean benchcommonclean estimateclean	\
	   estimatecommonclean benchpackclean

benchpackclean:
	$(RM) -r benchpack

benchpack: AUTODIR=bench
benchpack: packdir

benchunpack: AUTODIR=bench
benchunpack: unpackdir

benchcommonpack: AUTODIR=benchcommon
benchcommonpack: TARGET=_all
benchcommonpack: packdir

benchcommonunpack: AUTODIR=benchcommon
benchcommonunpack: TARGET=_all
benchcommonunpack: unpackdir

benchpacklocals: $(addsuffix .bplc, $(TARGETS))
%.bplc:
	$(TAR) --owner=0 --group=0 \
	  --directory=bench -czf benchpack/$*.tar.gz \
	  $(*:.tar.gz=)

benchunpacks benchunpacklocals: $(addsuffix .bupl, $(SOURCES))
%.bupl:
	$(TAR) --directory=bench -xzf benchpack/$*

installpack:
	cp miniprolog.tar $(CIAODIR)/ciao/contrib/timingmodel/ ; \
	  rm -rf $(CIAODIR)/ciao/contrib/timingmodel/miniprolog/ ; \
	  cd $(CIAODIR)/ ; ./ciaosetup build_timingmodel ; lpmake benchmp

update: update_$(CROSSCOMPILE)
	echo {updating $(HOSTNAME) ...}
	svn up
	echo {updated $(HOSTNAME)}

update_yes: CROSSCOMPCMD=update
update_yes: crosscompcmd

update_:

checkouts: $(addsuffix .cout, $(HOSTS))
%.cout:
	echo "mkdir -p $(SUBDIR[$(HOST)]) ; cd $(SUBDIR[$(HOST)]) ; \
	  ( svn co $(REPOSITORY) miniprolog ; cd miniprolog ; \
	  $(MAKE[$*]) MASTER=$(MASTER) HOSTNAME=$* checkouts ) " \
	  | $(SSH) $(SSHARGS[$*]) $(USER[$*])@$*

# checkouts:
# 	$(foreach HOST,$(HOSTS),( echo "cd $(SUBDIR[$(HOST)]) ; \
# 	  ( svn co $(REPOSITORY) miniprolog ; cd miniprolog ; \
# 	  $(MAKE[$(HOST)]) MASTER=$(MASTER) HOSTNAME=$(HOST) checkouts ) " \
# 	  | $(SSH) $(USER[$(HOST)])@$(HOST) & ) ; )

MAKERECOPTS=RECURSIVECOMMAND=$(RECURSIVECOMMAND) EXTRACOMMAND=$(EXTRACOMMAND) \
	    PROCEXTRAS=$(PROCEXTRAS) SKIPBRIDGES=$(SKIPBRIDGES) MASTER=$(MASTER)

cmdser: cmdserrec cmdser1$(SKIPBRIDGES)2$(BRIDGE)
cmdser1yes2yes:
cmdser12 cmdser1yes2 cmdser12yes: cmdser3$(PROCEXTRAS)
cmdser3yes: $(RECURSIVECOMMAND) extras
cmdser3: $(RECURSIVECOMMAND)

cmdserrec: $(addsuffix .cmds, $(HOSTS))
%.cmds: # This rule cannot be placed in .PHONY even considering that is a command
	echo "cd $(SUBDIR[$*])/miniprolog ; \
	  $(MAKE[$*]) $(MFLAGS) $(MAKERECOPTS) HOSTNAME=$* cmdser" \
	  | $(SSH) $(SSHARGS[$*]) $(USER[$*])@$*


cmdpar: cmdparrec cmdpar1$(SKIPBRIDGES)2$(BRIDGE)
cmdpar1yes2yes:
cmdpar12 cmdpar1yes2 cmdpar12yes: cmdpar3$(PROCEXTRAS)
cmdpar3yes: $(RECURSIVECOMMAND) extras
cmdpar3: $(RECURSIVECOMMAND)

cmdparrec: $(addsuffix .cmdp, $(HOSTS))
%.cmdp: # This rule cannot be placed in .PHONY even considering that is a command
	echo "cd $(SUBDIR[$*])/miniprolog ; \
	  $(MAKE[$*]) $(MFLAGS) $(MAKERECOPTS) HOSTNAME=$* cmdpar" \
	  | $(SSH) $(SSHARGS[$*]) $(USER[$*])@$* &

extras: $(addsuffix .extr, $(EXTRAS))
%.extr:
	echo {Processing extra architecture $*}
	MPARCH=$* $(MAKE) $(MFLAGS) $(RECURSIVECOMMAND)

# suffix s means serialized, p means parallelized,
# To generate final benchmarks use serialized options.

alls: RECURSIVECOMMAND=all
alls: PROCEXTRAS=yes
alls: SKIPBRIDGES=yes
alls: cmdser

# alls:
# 	$(MAKE) RECURSIVECOMMAND=all MASTER=$(MASTER) \
# 	  PROCEXTRAS=yes SKIPBRIDGES=yes cmdser

updates:
	$(MAKE) RECURSIVECOMMAND=update MASTER=$(MASTER) cmdser

cleans:
	$(MAKE) RECURSIVECOMMAND=clean MASTER=$(MASTER) cmdser

benchcommons:
	$(MAKE) RECURSIVECOMMAND=benchcommon MASTER=$(MASTER) SKIPBRIDGES=yes \
	    cmdser

benchs:
	$(MAKE) RECURSIVECOMMAND=bench MASTER=$(MASTER) PROCEXTRAS=yes \
	    SKIPBRIDGES=yes cmdser

# Rarely used option, we should not use -j to avoid noise in
# benchmarks:
benchp:
	$(MAKE) RECURSIVECOMMAND=bench MASTER=$(MASTER) PROCEXTRAS=yes \
	    SKIPBRIDGES=yes cmdpar

benchcleans:
	$(MAKE) RECURSIVECOMMAND=benchclean MASTER=$(MASTER) cmdser

benchpackcleans:
	$(MAKE) RECURSIVECOMMAND=benchpackclean MASTER=$(MASTER) cmdser

benchcommoncleans:
	$(MAKE) RECURSIVECOMMAND=benchcommonclean MASTER=$(MASTER) cmdser

estimatecleans:
	$(MAKE) RECURSIVECOMMAND=estimateclean MASTER=$(MASTER) cmdser

estimatecommoncleans:
	$(MAKE) RECURSIVECOMMAND=estimatecommonclean MASTER=$(MASTER) cmdser

benchpacks:
	$(MAKE) RECURSIVECOMMAND=benchpack MASTER=$(MASTER) PROCEXTRAS=yes \
	    SKIPBRIDGES=yes cmdser

benchpackcopy: $(addsuffix .bpcp, $(HOSTS))
%.bpcp:
	scp -C -q -r $(USER[$*])@$*:$(SUBDIR[$*])/miniprolog/benchpack/_* \
	  benchpack

benchcopy: $(addsuffix .bcop, $(HOSTS))
%.bcop:
	scp -C -q -r $(USER[$*])@$*:$(SUBDIR[$*])/miniprolog/bench/_* bench

benchcopys:
	$(MAKE) RECURSIVECOMMAND=benchcopy MASTER=$(MASTER) cmdser

benchpackcopys:
	$(MAKE) RECURSIVECOMMAND=benchpackcopy MASTER=$(MASTER) cmdser

testcleans:
	$(MAKE) RECURSIVECOMMAND=testclean MASTER=$(MASTER) cmdser

run:
	$(PROLOG)

test:
	@echo PROLOG=$(PROLOG)
	@echo PROLOGCMD=$(PROLOGCMD)
	@echo PROLOGTESTCMD=$(PROLOGTESTCMD)
