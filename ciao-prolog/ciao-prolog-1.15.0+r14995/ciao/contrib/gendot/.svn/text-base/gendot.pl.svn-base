:- module(_, [gendot/3], [assertions, isomodes]).

:- doc(title,"Dot generator").

:- doc(author, "Claudio Ochoa").

:- doc(module," This module generates a dot file representing a
         graph. Nodes and edges can contain labels").


:- use_module(library(terms),  [atom_concat/2]).
:- use_module(library(format), [format/3]).

:- pred gendot(+L,+Filename,+Type) # "Generates a dot file from a list
@var{L} representing a graph. It receives the basename @var{Filename}
(without extension) of the output .dot file. Each element of @var{L}
is a node in the graph, represented by a tuple (Identifier, Label,
Edges), where Edges is a list of the outgoing edges of the current
node, and each element of Edges is either an Identifier ot a tuple
(Identifier,Label). In all cases, Labels are atoms. @var{Type}
indicates the type of graph. If the graph is a Tree, then final nodes
are represented by boxes. In all other cases, nodes are represented by
circles".

gendot(L,Filename,Type):-
	atom_concat([Filename,'.dot'],Dotfile),
	open(Dotfile,write,Output),
	format(Output,"digraph g{~n",[]),
	(Type == tree ->
	    gen_tree(L,Output)
	;
	    gen_graph(L,Output)),
	format(Output,"}~n",[]),
	close(Output).

gen_graph([],_).
gen_graph([(Id,Label,Edges)|T],Out):-
	format(Out," ~0f [label=\"~w\"];~n",[Id,Label]),
	gen_edges(Edges,Id,Out),
	gen_graph(T,Out).

gen_tree([],_).
gen_tree([(Id,Label,Edges)|T],Out):-
	(Edges == [] ->
	    format(Out," ~0f [label=\"~w\", shape=box];~n",[Id,Label])
	;
	    format(Out," ~0f [label=\"~w\"];~n",[Id,Label]),
	    gen_edges(Edges,Id,Out)),
	gen_tree(T,Out).

gen_edges([],_,_).
gen_edges([(Link,Label)|T],Id,Out):-!,
	format(Out," ~0f -> ~0f [label=\"~w\"]~n",[Id,Link,Label]),
	gen_edges(T,Id,Out).
gen_edges([Link|T],Id,Out):-
	format(Out," ~0f -> ~0f ~n",[Id,Link]),
	gen_edges(T,Id,Out).

/*
:- pred rundot(+Filename,+Ext) # "Takes a .dot file as generated by
gendot/2, and generates a file with extension @var{Ext} using the dot
command. Supported extensions include .ps, .fig, .png, .jpg,,.gif, etc
(see dot's user manual). This predicate needs to have dot (graphviz)
installed, and thus it should be used only with testing purposes, in
order to do no create any dependence from these external libraries".

rundot(Filename,Ext):- 
	atom_concat(['dot -T',Ext,' -o ',Filename,'.',Ext,' ',Filename,'.dot'],Cmd), 
	system(Cmd).
*/

%test:- gendot([(1,a,[(2,z),(3,y)]),(2,b,[]),(3,c,[4]),(4,d,[])],'/tmp/test'),
% 	rundot('/tmp/test','ps').
