store		Num. ags.	Description
-----		--------	-----------
1			3		Yokoo
2			3		*,>,(+,>)
3			3		>,*,(+,>)
4			3		Only propagation
5			3		4-Queens (wrong design)
5-prime			3		4-Queens (5 fixed by autom. distrib.)
6			6		4-Queens
7			3		4-Queens (changing vars. distribution)
8			4		SMM(all_different all agents,all vars)
9			4		SMM(all_different all agents,used vars)
10			2		>
11			3		>,*, (+,>)
12			2		(>,*), (+,>)
13			4		4-Queens (1 var - 1 agent)
14			6		Net
15			2		>, <>
16			4		4-Queens (like 13, calls to store/2 changed order)
18			2		disperse >, <>
19			3		Yokoo with automatic variable distribution
queens			N		N-Queens (parametrizable)
magic3			3		Magic square
magicN			N		Magic square (parametrizable)
dec_seqs		N		Inverse  (forces failure)
dec_seqs2		N		Inverse sequence

Notese que, en general, si el valor dado a una variable no es
exhaustivamente aceptado por todos los agentes que la usan, no se puede
asegurar que sea correcto! Para eso, el programador debe asegurarse cuando
usa el predicado store/3 para asignar una variable a un agente
(en automatico ya lo hace) de que todos los agentes que la usan son de
prioridad inferior al que la declara.  (Mmmm, no estoy seguro. Pensarlo con
mas calma). No es necesario (menos mal); si la usan agentes de prioridad
superior, el proceso se invierte: es el agente que la posee el que evalua
las asignaciones de estos agentes, generando un no_good si no son
compatibles. 

Conclusion: En el modo normal, en el que a un ok se le responde con nada o
con un no_good, este esquema funciona bien. Pero en modo backtracking
inducido en el que se genera un no_good de motu proprio para generar mas
soluciones no, porque estas soluciones no se contrastan con lo que tienen
los agentes de mayor prioridad. A pensar en otro esquema para este caso.

