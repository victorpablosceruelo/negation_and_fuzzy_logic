:- module(intjust, [buildJust/1]).

buildJust(S) :-

write(S,' :- use_module(library(filenames)).\n'),
write(S,' :- data incParm/2, hideNode/0.\n\n'),

write(S,' :- export(addHideFlag/0).\n'),
write(S,'addHideFlag :- assertz_fact(hideNode).\n'),
write(S,'remHideFlag :- retractall_fact(hideNode).\n\n'),

write(S,' :- export(incFM/2).\n'),
write(S,' :- export(remFM/0).\n'),
write(S,' :- export(jjjj/5).\n'),

write(S,'incFM(T1,T2) :- remFM,\n'),
write(S,'	assertz_fact(incParm(T1,T2)).\n\n'),
write(S,'remFM :- retractall_fact(incParm(_,_)).\n\n'),

write(S,'qualifyAtom(Atom,A1) :- \n'),
write(S,'	incParm(T1,T2),\n'),
write(S,'	(T2>0 -> modelqualify(Atom,T2,A1);\n'),
write(S,'	(T1=t -> filequalify(Atom,A1);A1=Atom)),!.\n'),
write(S,'qualifyAtom(A,A).\n\n'),

write(S,'modelqualify(Atom,No,A2) :- aspFileName(F),\n'),
write(S,'	absolute_file_name(F,F1),\n'),
write(S,'	no_path_file_name(F1,F2),\n'),
write(S,'	number_atom(No,No1),\n'),
write(S,'	atoms_concat([model,''('',No1,'')''],AA1),\n'),
write(S,'	module_concat(F2,AA1,T1),\n'),
%write(S,'	term_atom(T1,AT1),\n'),
write(S,'	module_concat(T1,Atom,A2),!.\n\n'),
%write(S,'       term_atom(A1,A2),!.\n\n'),

write(S,'filequalify(Atom,A2) :- aspFileName(F),\n'),
write(S,'	absolute_file_name(F,F1),\n'),
write(S,'	no_path_file_name(F1,F2),\n'),
write(S,'	module_concat(F2,Atom,A2),!.\n\n'),
%write(S,'	term_atom(A1,A2),!.\n\n'),


write(S,'% -----------------------------------------------\n'),
write(S,'% Justification code:\n'),
write(S,'% -----------------------------------------------\n'),
write(S, 'justify_atoms(L, Q) :-\n'),
write(S, '      just_atoms(Q,L).\n'),
write(S, ' justify_all(Q) :-\n'),
write(S,'	Q:atomClass(AtomClass),\n'),
write(S, '      findall(H, AtomClass:atom(_,H), L),\n'),
write(S, '      just_atoms(Q,L).\n'),
write(S,''), nl(S),
write(S,'just_atoms(Q, Atom_List) :-'), nl(S),
write(S,'	init_just(S1, S2),'), nl(S),
%write(S,'       display(''Drawing justification, please wait''),'), nl(S),
write(S,'	jjjj(Q, Atom_List, S1, S2, 0),'), nl(S),
write(S,'	close_all(S1, S2),'), nl(S),
write(S,'%	graph_justify.'), nl(S),
write(S,'	wshow_graph.'), nl(S),
write(S,''), nl(S),
write(S,'init_just(S1, S2) :- '), nl(S),
write(S,'	open(''f1.daVinci'', write, S1),'), nl(S),
write(S,'	open(''f2.daVinci'', write, S2),'), nl(S),
write(S,'	write(S1, ''[''),'), nl(S),
write(S,'	write(S2, ''''''graph(new(['').\n\n'),

write(S,':- export(clearData/0).\n'),
write(S,'clearData :-\n'),
write(S,'	retractall(rule_computed(_)),\n'),
write(S,'	retractall(computed(_)).\n\n'),

write(S,'close_all(S1, S2) :-'), nl(S),
write(S,'%	message([''close all::'']),'), nl(S),
write(S,'	write(S1, ''].''),'), nl(S),
write(S,'	write(S2, '']))''''.''),'), nl(S),
write(S,'	close(S1),'), nl(S),
write(S,'	close(S2), '), nl(S),
write(S,'	retractall(rule_computed(_)),'), nl(S),
write(S,'	retractall(computed(_)).'), nl(S),
write(S,''), nl(S),
write(S,'jjjj(_, [], _, _, _) :- !.'), nl(S),
write(S,'jjjj(Q, Atom_list, S1, S2, C) :-'), nl(S),
%write(S,'	message([''j::New Atom List: '', Atom_list]),'), nl(S),
write(S,'	just(Q, Atom_list, S1, S2, C, New_Atom_list),'), nl(S),
%write(S,'	message([''j::New Atom List: '', New_Atom_list]),'), nl(S),
write(S,'	jjjj(Q, New_Atom_list, S1, S2, 1).\n\n'),
%write(S,''), nl(S),
%write(S,' calling draw_just on each atom in the Atom_List.'), nl(S),
write(S,'just(_, [], _, _, _, []).'), nl(S),
write(S,'just(Q, [Atom_no|T], S1, S2, C, New) :-'), nl(S),
%write(S,'       display(''.''),\n'),
write(S,'	number(Atom_no), !,'), nl(S),
write(S,'	Q:getAtomNo(Atom,Atom_no),\n'),
%write(S,'	Q:atomClass(AtomClass),\n'),
%write(S,'	AtomClass:atom(Atom_no, Atom),'), nl(S),
%write(S,'       self(XXX), display(XXX),\n'),
%write(S,'	display(''justify atom: ''), display(Atom), nl,\n'),
%write(S,'	read(_),'), nl(S),
write(S,'	term_atom(Atom, Atom_Term),'), nl(S),
%write(S,'       display(Atom_Term), nl,'), nl(S),
write(S,'	Q:just(Atom_no, ValueNo, Reason),'), nl(S),
write(S,'       get_value(ValueNo, Value),\n'),
%write(S,'      write(Atom_no), nl,'), nl(S),
%write(S,'      write(Reason), nl,'), nl(S),
write(S,'	wrt_comma(C, S1, S2),'), nl(S),
%write(S,'       display(''call drawJust''), nl,\n'),
write(S,'	drawJust(Q,Atom_Term,Atom,Value,Reason,S1,S2,New_Atoms),'), nl(S),
write(S,'	assertz(computed(Atom_no)),'), nl(S),
write(S,'	just(Q,T, S1, S2, 1, New1),'), nl(S),
write(S,'	my_append(New_Atoms, New1, New).'), nl(S),
write(S,'just(Q,[Atom|T], S1, S2, C, New) :- !,'), nl(S),
%write(S,'       display(''.''),\n'),
%write(S,'       self(XXX), display(XXX),nl,\n'),
%write(S,'	display(''justify atom: ''), display(Atom), nl,\n'), nl(S),
%write(S,'	read(_),'), nl(S),
%write(S,'	message([''N='',N, '' Atom='', Atom]),'), nl(S),
write(S,'	Q:getAtomNo(Atom,Atom_no),\n'),
%write(S,'	Q:atomClass(AtomClass),\n'),
%write(S,'	AtomClass:atom(Atom_no, Atom),'), nl(S),
%write(S,'	message([''Atom_noooo='', Atom_no]),'), nl(S),
write(S,'	term_atom(Atom, Atom_Term),'), nl(S),
%write(S,'       display('' Atom_Term=''),display(Atom_Term),nl,\n'),
write(S,'	Q:just(Atom_no, ValueNo, Reason),\n'),
write(S,'       get_value(ValueNo, Value),\n'),
%write(S,'	display(''Reason=''), display(Reason),nl,\n'),
write(S,'	wrt_comma(C, S1, S2),'), nl(S),
write(S,'	drawJust(Q,Atom_Term,Atom,Value,Reason,S1,S2,New_Atoms),'), nl(S),
write(S,'	assertz(computed(Atom_no)),'), nl(S),
write(S,'	just(Q,T, S1, S2, 1, New1),'), nl(S),
write(S,'	my_append(New_Atoms, New1, New).'), nl(S),
write(S,''), nl(S),
write(S, 'get_value(2, unknown).\n'),
write(S, 'get_value(1, true).\n'),
write(S, 'get_value(0, false).\n\n'),

write(S,'childASPMember(M,[asp(M,F)|_T],F) :- !.\n'),
write(S,'childASPMember(M,[_|T],F) :- childASPMember(M,T,F).\n\n'),

write(S,'drawJust(Q,_Atom,Term, _Value,_Reason,S1,S2,[]) :-\n'),
%write(S,'   self(X),\n'),
%write(S,'   display(''self=''),display(X), nl,\n'),
%write(S,'    display(''print SymbolTable <---------------''), nl, \n'),
%write(S,'    prtSymbolTable,\n'),
write(S,'	functor(Term,PRED,NoArgs),\n'),
write(S,'	Term =.. [PRED|Args],\n'),
write(S,'       Args=[ModelNo|ArgsList],\n'),
write(S,'	Q:symboltableClass(ST),\n'),
write(S,'	(ST:symbolTable(aspm(QQ,0,M),Pred,PRED,NoArgs,1)-> \n'),
%write(S,'       display(''Term1=''), display(Term), nl,read(_),\n'),
write(S,'	(B =.. [Pred|Args],\n'),
write(S,'	callSkepJust(QQ,M,B,S1,S2));\n'),
write(S,'	(ST:symbolTable(aspm(QQ,ModelNo,M),Pred,PRED,NoArgs,1),\n'),
%write(S,'       display(''Term2=''), display(Term), nl,read(_),\n'),
%write(S,'       Args=[ModelNo|ArgsList],\n'),
%write(S,'       display(''Pred=''),display(Pred),nl,\n'),
%write(S,'       display(''ArgsList=''),display(ArgsList),nl,\n'),
write(S,'       B1=.. [Pred|ArgsList],\n'),
%write(S,'       display(''B1=''),display(B1),nl,\n'),
write(S,'	callModJust(QQ,M,B1,S1,S2))),!.\n'),

%write(S,'	display(''QQ=''), display(QQ),nl,\n'),
%write(S,'    display(''In draw_just1:''), nl,\n'),
%write(S,'    display(''M=''), display(M), nl,\n'),
%write(S,'    display(''B=''), display(B), nl,\n'),
%write(S,'    display(''No=''), display(No),nl, read(_),\n'),
%write(S,'	children(C),\n'),
%write(S,'    display(''C=''), display(C), nl,\n'),
%write(S,'	(childASPMember(M,C,F)-> callSkepJust(Q,F,B,S1,S2);\n'),
%write(S,'        (M1=aspm(_Class,ModelNo,F),\n'),
%write(S,'       display(F),display('' ''), display(ModelNo),nl, read(_),\n'),
%write(S,'	getModelComputed(SymbolTable,M1,Pred,PRED,NoArgs,1),\n'),
%write(S,'         callModJust(M1,B1,S1,S2))),!.\n\n'),

% drawJust for prolog module:
write(S,'drawJust(Q,_Atom,Term,Value,_Reason,S1,S2,[]) :-\n'),
%write(S,'    display(''draw_just2:Term=''), display(Term), nl,\n'),
%write(S,'    display(''print SymbolTable <---------------''), nl, \n'),
%write(S,'    prtSymbolTable,\n'),
%write(S,'    display(''-------------------------------------''), nl,\n'),
write(S,'	functor(Term,PRED,NoArgs),\n'),
%write(S,'     display(''Term=''), display(Term), nl,\n'),
%write(S,'     display(''PRED=''), display(PRED), nl,\n'),
write(S,'	Q:symboltableClass(SymbolTable),\n'),
write(S,'	SymbolTable:symbolTable(M,Pred,PRED,NoArgs,0),\n'),
%write(S,'     display(''Pred=''), display(pred), nl,\n'),
write(S,'	Term =.. [PRED|Args],\n'),
write(S,'	B =.. [Pred|Args],\n'),
%write(S,'    display(''In draw_just2:''), nl,\n'),
%write(S,'    display(''M=''), display(M), nl,\n'),
%write(S,'    display(''B=''), display(B), nl, read(_),\n'),
write(S,'	term_atom(B,BA),\n'),
write(S,'	module_concat(M,BA,MB),\n'),
%write(S,'    display(''MB=''), display(MB), nl,\n'),
%write(S,'    display(''Value=''), display(Value), nl,\n'),
write(S,'	(Value=true-> Reason=[fact(prolog)];Reason=[no_support]),\n'),
%write(S,'	termToStr(MB,MBString),\n'),
%write(S,'	name(MBAtom,MBString),\n'),
%write(S,'     display(''call draw_atom_node:''),nl,\n'),
write(S,'	draw_atom_node(MB, Value, S1, S2),'), nl(S),
write(S,'	write(S1, ''[''), write(S2, ''[''),'), nl(S),
%write(S,'     display(''call draw_rule_edges:''),nl,\n'),
write(S,'	draw_rule_edges(MB, S1, S2, 0, Reason),'), nl(S),
write(S,'	write(S1, '']))''), write(S2, '']))''),'), nl(S),
%write(S,'     display(''call draw_rule_node:''),nl,\n'),
write(S,'	draw_rule_node(_Q,Reason,Value,S1,S2,1,_L),!.'), nl(S),

% drawJust for model Q:
%write(S,'drawJust(_Q,_Atom,Term,_Value,_Reason,S1,S2,[]) :-\n'),
%write(S,'	functor(Term,PRED,NoArgs),\n'),
%write(S,'     display(''Term=''), display(Term), nl,\n'),
%write(S,'     display(''PRED=''), display(PRED), nl,\n'),
%write(S,'	symbolTable(aspm(ModelNo,ModuleName),Pred,PRED,NoArgs,0),\n'),
%write(S,'     display(''Pred=''), display(pred), nl,\n'),
%write(S,'	Term =.. [PRED|Args],\n'),
%write(S,'	B =.. [Pred|Args],\n'),
%write(S,'    display(''In draw_just3:''), nl,\n'),
%write(S,'    display(''ModuleName=''), display(ModuleName), nl,\n'),
%write(S,'    display(''B=''), display(B), nl,read(_),\n'),
%write(S,'	getCState(CState),\n'),
%write(S,'	ModuleName:aspModel(CState, ModelNo, Q),\n'),
%write(S,'	module_concat(Q,B,MB),\n'),
%write(S,'    display(''MB=''), display(MB), nl,\n'),
%write(S,'    display(''Value=''), display(Value), nl,\n'),
%write(S,'    display(''modJust:''), display(B), nl, \n'),
%write(S,'	Q:modJust([B],S1,S2),!.\n\n'),

%write(S,'	(Value=true-> Reason=[fact(prolog)];Reason=[no_support]),\n'),
%write(S,'	termToStr(MB,MBString),\n'),
%write(S,'	name(MBAtom,MBString),\n'),
%write(S,'     display(''call draw_atom_node:''),nl,\n'),
%write(S,'	draw_atom_node(MBAtom, Value, S1, S2),'), nl(S),
%write(S,'	write(S1, ''[''), write(S2, ''[''),'), nl(S),
%write(S,'     display(''call draw_rule_edges:''),nl,\n'),
%write(S,'	draw_rule_edges(MBAtom, S1, S2, 0, Reason),'), nl(S),
%write(S,'	write(S1, '']))''), write(S2, '']))''),'), nl(S),
%write(S,'     display(''call draw_rule_node:''),nl,\n'),
%write(S,'	draw_rule_node(_Q,Reason,Value,S1,S2,1,_L),!.'), nl(S),

write(S,'drawJust(Q,Atom1,_Term,Value,Reason,S1,S2,L) :-\n'),
%write(S,'       display(''In drawJust Atom1=''),display(Atom1),nl,\n'),
write(S,'	qualifyAtom(Atom1,Atom),\n'),
%write(S,'       display(''drawJust: Atom=''), display(Atom), nl,\n'),
write(S,'	draw_just(Q,Atom,Value,Reason,S1,S2,L).\n\n'),

write(S,'getModelComputed(S,aspm(Class,ModelNo,File),P1,P2,A,T) :-\n'),
write(S,'	S:symbolTable(aspm(Class,ModelNo,File),P1,P2,A,T).\n\n'),

write(S,'draw_just(Q,Atom, Value, Reason, S1, S2, L) :-'), nl(S),
%write(S,'	display(''  Atom: ''),'), nl(S),
%write(S,'	display(Atom), display('' ''),'), nl(S),
%write(S,'	display(''draw_just:draw_Atom_node''),nl,\n'),
write(S,'	draw_atom_node(Atom, Value, S1, S2),'), nl(S),
write(S,'	write(S1, ''[''), write(S2, ''[''),'), nl(S),
%write(S,'	display(''draw_just:draw_rule_edges''),nl,\n'),
write(S,'	draw_rule_edges(Atom, S1, S2, 0, Reason),'), nl(S),
write(S,'	write(S1, '']))''), write(S2, '']))''),'), nl(S),
%write(S,'	display(''draw_just:draw_rule_node''),nl,\n'),
%write(S,'    display(''Reason=''), display(Reason),nl,\n'),
write(S,'	draw_rule_node(Q,Reason, Value, S1, S2, 1, L).\n\n'),

write(S,'callSkepJust(SK,M,B,S1,S2) :-\n'),
%write(S,'    display(''In CallSkipJust''), nl,\n'),
%write(S,'	Q:skepClass(SK),\n'),
%write(S,'	getCState(State),\n'),
%write(S,'	stateSkep(State,SK),\n'),
%write(S,'    display(''State=''), display(State), nl,\n'),
%write(S,'    display(''SK=''), display(SK),nl, \n'),
%write(S,'    display(''M=''), display(M), nl,\n'),
%write(S,'    display(''B=''), display(B), nl,\n'),

write(S,'	module_concat(M,clearData,G3),\n'),
write(S,'	''$meta_call''(G3),\n'),
%write(S,'	retractall_fact(rule_computed(_)),\n'),
%write(S,'	retractall_fact(computed(_)),\n'),
%write(S,'      display(''callSkepJust:''), display(B), nl,\n'),
write(S,'      module_concat(M,incFM(t,0),G2),\n'),
write(S,'      ''$meta_call''(G2),\n'),
write(S,'      module_concat(M,addHideFlag,G4),\n'),
write(S,'      ''$meta_call''(G4),\n'),
write(S,'	module_concat(M,jjjj(SK,[B],S1,S2,0),G),\n'),
%write(S,'       display(''call:''), display(G),nl,\n'),
write(S,'	''$meta_call''(G).\n'),

write(S,'callModJust(Q,M,B,S1,S2) :-\n'),
%write(S,'	getCState(CState),\n'),
%write(S,'	ModuleName:aspModel(CState, ModelNo, Q),\n'),
%write(S,'	B=[Pred|ModelNo,ArgsList],\n'),
%write(S,'       B1=.. [Pred|ArgsList],\n'),
%write(S,'       display(''callModJust:''),nl,\n'),
%write(S,'    display(''Q=''), display(Q),nl, \n'),
%write(S,'    display(''M=''), display(M), nl,\n'),
%write(S,'    display(''B=''), display(B), nl,\n'),
write(S,'	module_concat(M,clearData,G3),\n'),
write(S,'	''$meta_call''(G3),\n'),
%write(S,'      display(''call Q:modJust''),nl,\n'),
write(S,'	Q:modJust([B],S1,S2).\n'),

%write(S,'        module_concat(ModuleName, jjjj(Q,[B],S1,S2,1), MM),\n'),
%write(S,'        ''$meta_call''(MM).\n'),

%write(S,'	module_concat(Q,modJust(ModuleName,[B],S1,S2),G),\n'),
%write(S,'	''$meta_call''(G).\n'),

write(S,'draw_atom_node(Atom, Value, S1, S2) :- '), nl(S),
write(S,'      atoms_concat([Atom, ''('', Value, '')''], Atom_value),'), nl(S),
write(S,'%	make_atom(Atom, Value, Atom_value),'), nl(S),
write(S,'	draw_node(Atom, Atom_value, '''',S1, S2).\n\n'),

write(S,'draw_node(Node_name, Node_print, Info, S1, S2) :-'), nl(S),
write(S,'      l_node_name(Node_name, L_name),'), nl(S),
write(S,'      node_name(Node_print, Object),'), nl(S),
write(S,'      node_color(Node_Color),'), nl(S),
write(S,'      node_info(Info, I),'), nl(S),
write(S,'      (hideNode-> H='',a("HIDDEN","true")'';true),\n'),
write(S,'	(hideNode->atoms_concat([L_name,''n("",'',Object,Node_Color,I,H,''],''], A1);\n'),
write(S,'      atoms_concat([L_name,''n("",'',Object,Node_Color,I,''],''], A1)),\n'),
%write(S,'      atoms_concat([L_name,''n("node",'',Object,Node_Color,''],''], A1),'), nl(S),
%write(S,'      atoms_concat([L_name,''n("",'',Object,Node_Color,I,''],''], A1),'), nl(S),
write(S,'	remHideFlag,\n'),
write(S,'      write(S1, A1),'), nl(S),
write(S,'      write(S2, A1).\n'), nl(S),

write(S,'l_node_name(Node_name, L_name) :-'), nl(S),
%write(S,'	qualifyAtom(Node_name,A1),\n'),
write(S,'      atoms_concat([''l("'', Node_name, ''",''], L_name).\n\n'),

write(S,'node_name(Name, Object) :-'), nl(S),
write(S,'      atoms_concat([''[a("OBJECT","'', Name, ''"),''], Object).\n\n'),

write(S,'node_color(''a("COLOR","yellow")'').\n\n'),

write(S,'node_info('''','''') :-!.'), nl(S),
write(S,'node_info(I,A) :- atom_concat(['',a("INFO","'',I,''")''],A).\n\n'),


write(S,'l_string_node_name(Node_name, L_name) :-'), nl(S),
write(S,'      atoms_concat([''l(string('''''', Node_name, '''''')''], L_name).\n\n'),

write(S,'string_node_name(Name, Object) :-'), nl(S),
write(S,'      atom_concat([''[a(string(''''OBJECT''''),string('''''', Name, '''''')),''],Object).'), nl(S),
write(S,'string_node_color(''a(string(''''COLOR''''),string(yellow))'').\n\n'),

write(S,'l_edge_color(''e("",[a("EDGECOLOR","blue")],'',0).'), nl(S),
write(S,'l_edge_color(''e("",[a("EDGECOLOR","red")],'',1).'), nl(S),
write(S,'string_edge_color(''e(string(edge),[a(string(''''EDGECOLOR''''),string(blue))],'',0).'), nl(S),
write(S,'string_edge_color(''e(string(edge),[a(string(''''EDGECOLOR''''),string(red))],'',1).\n\n'),

write(S,'draw_edge(S1, S2, Neg) :-'), nl(S),
write(S,'%      l_node_name(A, L_name),'), nl(S),
write(S,'      l_edge_color(A1, Neg),'), nl(S),
write(S,'%      atom_concat(L_name, E_COLOR, A1),'), nl(S),
write(S,'      write(S1,A1),'), nl(S),
write(S,'      write(S2,A1).\n\n'),

write(S,'draw_rule_edges(_, _, _, _, []).'), nl(S),
write(S,'draw_rule_edges(Atom, S1, S2, C, [assume|_]) :- !,'), nl(S),
write(S,'	wrt_comma(C,S1,S2),'), nl(S),
%write(S,'	qualifyAtom(Atom,A1),\n'),
write(S,'      atom_concat([e,Atom,r],A2),'), nl(S),
write(S,'%	atom_concat(e, Atom, A1),'), nl(S),
write(S,'%	atom_concat(r, A1, A2),'), nl(S),
write(S,'	draw_edge(S1, S2,0),'), nl(S),
write(S,'	atom_concat(A2, assume, A3),'), nl(S),
write(S,'	draw_node(A3, assume, '''',S1, S2),'), nl(S),
write(S,'%	message(['' assumption'']),'), nl(S),
write(S,'	write(S1, ''[])))''),'), nl(S),
write(S,'	write(S2, ''[])))'').'), nl(S),
write(S,'draw_rule_edges(Atom, S1, S2, C, [compute_true|_]) :- !,'), nl(S),
write(S,'	wrt_comma(C,S1,S2),'), nl(S),
write(S,'      atom_concat([e,Atom,r],A2),'), nl(S),
write(S,'%	atom_concat(e, Atom, A1),'), nl(S),
write(S,'%	atom_concat(r, A1, A2),'), nl(S),
write(S,'	draw_edge(S1, S2,0),'), nl(S),
write(S,'	atom_concat(A2, compute_true, A3),'), nl(S),
write(S,'	draw_node(A3, compute_true, '''',S1, S2),'), nl(S),
write(S,'%	message(['' assumption'']),'), nl(S),
write(S,'	write(S1, ''[])))''),'), nl(S),
write(S,'	write(S2, ''[])))'').'), nl(S),
write(S,'draw_rule_edges(Atom, S1, S2, C, [compute_false|_]) :- !,'), nl(S),
write(S,'	wrt_comma(C,S1,S2),'), nl(S),
write(S,'      atom_concat([e,Atom,r],A2),'), nl(S),
write(S,'%	atom_concat(e, Atom, A1),'), nl(S),
write(S,'%	atom_concat(r, A1, A2),'), nl(S),
write(S,'	draw_edge(S1, S2,0),'), nl(S),
write(S,'	atom_concat(A2, compute_false, A3),'), nl(S),
write(S,'	draw_node(A3, compute_false, '''',S1, S2),'), nl(S),
write(S,'%	message(['' assumption'']),'), nl(S),
write(S,'	write(S1, ''[])))''),'), nl(S),
write(S,'	write(S2, ''[])))'').'), nl(S),
write(S,'draw_rule_edges(Atom, S1, S2, C, [user_force_true|_]) :- !,'), nl(S),
write(S,'	wrt_comma(C,S1,S2),'), nl(S),
write(S,'      atom_concat([e,Atom,r],A2),'), nl(S),
write(S,'%	atom_concat(e, Atom, A1),'), nl(S),
write(S,'%	atom_concat(r, A1, A2),'), nl(S),
write(S,'	draw_edge(S1, S2,0),'), nl(S),
write(S,'	atom_concat(A2, user_force_true, A3),'), nl(S),
write(S,'	draw_node(A3, user_force_true, '''',S1, S2),'), nl(S),
write(S,'%	message(['' assumption'']),'), nl(S),
write(S,'	write(S1, ''[])))''),'), nl(S),
write(S,'	write(S2, ''[])))'').'), nl(S),
write(S,'draw_rule_edges(Atom, S1, S2, C, [user_force_false|_]) :- !,'), nl(S),
write(S,'	wrt_comma(C,S1,S2),'), nl(S),
write(S,'      atom_concat([e,Atom,r],A2),'), nl(S),
write(S,'%	atom_concat(e, Atom, A1),'), nl(S),
write(S,'%	atom_concat(r, A1, A2),'), nl(S),
write(S,'	draw_edge(S1, S2,0),'), nl(S),
write(S,'	atom_concat(A2, user_force_false, A3),'), nl(S),
write(S,'	draw_node(A3, user_force_false, '''',S1, S2),'), nl(S),
write(S,'%	message(['' assumption'']),'), nl(S),
write(S,'	write(S1, ''[])))''),'), nl(S),
write(S,'	write(S2, ''[])))'').'), nl(S),

write(S,'draw_rule_edges(Atom, S1, S2, C, [no_support|_]) :- !,'), nl(S),
write(S,'	wrt_comma(C,S1,S2),'), nl(S),
write(S,'      atoms_concat([e,Atom,r],A2),'), nl(S),
write(S,'%	atom_concat(e, Atom, A1),'), nl(S),
write(S,'%	atom_concat(r, A1, A2),'), nl(S),
write(S,'	draw_edge(S1, S2,0),'), nl(S),
write(S,'	atom_concat(A2, no_support, A3),'), nl(S),
write(S,'	draw_node(A3, no_support, '''',S1, S2),'), nl(S),
write(S,'%	message(['' no_support'']), '), nl(S),
write(S,'	write(S1, ''[])))''),'), nl(S),
write(S,'	write(S2, ''[])))'').'), nl(S),

write(S,'draw_rule_edges(Atom, S1, S2, C, [fact(R)|_]) :- !,'), nl(S),
write(S,'%	message([''fact found'']),'), nl(S),
%write(S,'	display(''  fact(r''), display(R), display(''): ''),'), nl(S),
%write(S,'        prt_rule(Q,R,Rule_text),\n'),
%write(S,'       display(Rule_text), nl,'), nl(S),
write(S,'	wrt_comma(C, S1, S2),'), nl(S),
write(S,'	atom_concat(e, Atom, A1),'), nl(S),
write(S,'	(number(R) -> number_atom(R, N1);N1=R),'), nl(S),
write(S,'	atom_concat(r, N1, A2),'), nl(S),
write(S,'	atom_concat(A1, A2, A3),'), nl(S),
write(S,'	draw_edge(S1, S2,0),'), nl(S),
write(S,'	atom_concat(A3, fact, A4),'), nl(S),
write(S,'	(number(R)-> make_atom(fact,A2,A5);\n'),
write(S,'	make_atom(fact,R,A5)),'), nl(S),
write(S,'	(number(R) -> Info='''';\n'),
write(S,'	Info=prolog_fact),\n'),
write(S,'	draw_node(A4, A5, Info,S1, S2),'), nl(S),
write(S,'	write(S1, ''[])))''),'), nl(S),
write(S,'	write(S2, ''[])))'').'), nl(S),
%write(S,'	write(S1, ''r("''),'), nl(S),
%write(S,'	write(S1, A2), write(S1, ''"))''),'), nl(S),
%write(S,'	write(S2, ''r("''),'), nl(S),
%write(S,'	write(S2, A2), write(S2, ''"))'').'), nl(S),


write(S,'draw_rule_edges(Atom, S1, S2, C, [choice(R)|T]) :- !,'), nl(S),
write(S,'%	message([''draw_rule_edges::choice('', R, '')'']),'), nl(S),
%write(S,'	display(''choice rule: ''),'), nl(S),
%write(S,'	prt_rule(Q,R,Rule_text),\n'),
%write(S,'       display(Rule_text), nl,'), nl(S),
write(S,'	wrt_comma(C, S1, S2),'), nl(S),
write(S,'	atom_concat(e, Atom, A1),'), nl(S),
write(S,'	number_atom(R, N1),'), nl(S),
write(S,'	atom_concat(r, N1, A2),'), nl(S),
write(S,'	atom_concat(A1, A2, A3),'), nl(S),
write(S,'	draw_edge(S1, S2,0),'), nl(S),
write(S,'	atom_concat(A3, choice, A4),'), nl(S),
write(S,'	make_atom(choice, A2, A5),'), nl(S),
write(S,'	draw_node(A4, A5, '''',S1, S2),'), nl(S),
write(S,'	write(S1, ''[])))''),'), nl(S),
write(S,'	write(S2, ''[])))''), '), nl(S),
write(S,'	draw_rule_edges(Atom, S1, S2, 1, T).'), nl(S),

write(S,'draw_rule_edges(Atom, S1, S2, C, [Rule_no, _|T]) :- !,'), nl(S),
%write(S,'	message([''draw rule edges 1'']),'), nl(S),
%write(S,'        display('''),
%write(S,'     r''), display(Rule_no), display('' ''),'), nl(S),
%write(S,'	prt_rule(Q,Rule_no,Rule_text),\n'),
%write(S,'       display(Rule_text),'), nl(S),
%write(S,'	display(''   [''),'), nl(S),
%write(S,'	prt_atom_list(Q,Atom_List, 0, Atoms_text),'), nl(S),
%write(S,'	display(Atoms_text),'), nl(S),
%write(S,'	display('']'), nl(S),
%write(S,'''),'), nl(S),
write(S,'	wrt_comma(C, S1, S2),'), nl(S),
%write(S,'	atom_concat(e, Atom, A1),'), nl(S),
write(S,'	number_atom(Rule_no, N1),'), nl(S),
write(S,'	atom_concat(r, N1, A2),'), nl(S),
write(S,'	qualifyAtom(A2,AA2),\n'),
%write(S,'     display(''1)AA2=''),display(AA2), nl,\n'),
%write(S,'	atom_concat(A1, A2, A3),'), nl(S),
write(S,'	draw_edge(S1, S2,0), '), nl(S),
write(S,'	write(S1, ''r("''),'), nl(S),
write(S,'	write(S1, AA2), write(S1, ''"))''),'), nl(S),
write(S,'	write(S2, ''r("''),'), nl(S),
write(S,'	write(S2, AA2), write(S2, ''"))''),'), nl(S),
%write(S,'	write(S2, ''r(string(''),'), nl(S),
%write(S,'	write(S2, A2), write(S2, ''))))''),'), nl(S),
write(S,'	draw_rule_edges(Atom, S1, S2, 1, T).'), nl(S),

write(S,'draw_rule_edges(_, S1, S2, C, [Rule_no]) :- !,'), nl(S),
%write(S,'	message([''draw rule edges 2'']),'), nl(S),
%write(S,'        display('''), 
%write(S,'    r''), display(Rule_no), display('' ''),'), nl(S),
%write(S,'	prt_rule(Q,Rule_no, Rule_text),\n'),
%write(S,'       display(Rule_text), nl,'), nl(S),
write(S,'	wrt_comma(C, S1, S2),'), nl(S),
%write(S,'	atom_concat(e, Atom, A1),'), nl(S),
write(S,'	number_atom(Rule_no, N1),'), nl(S),
write(S,'	atom_concat(r, N1, A2),'), nl(S),
write(S,'	qualifyAtom(A2,AA2),\n'),
%write(S,'     display(''2)AA2=''),display(AA2), nl,\n'),
%write(S,'	atom_concat(A1, A2, A3),'), nl(S),
write(S,'	draw_edge(S1, S2,0), '), nl(S),
write(S,'	write(S1, ''r("''),'), nl(S),
write(S,'	write(S1, AA2), write(S1, ''"))''),'), nl(S),
write(S,'	write(S2, ''r("''),'), nl(S),
write(S,'	write(S2, AA2), write(S2, ''"))'').'), nl(S),
%write(S,'	write(S2, ''r(string(''),'), nl(S),
%write(S,'	write(S2, A2), write(S2, ''))))'').\n\n'),

write(S,'%draw rule node:'), nl(S),
write(S,'draw_rule_node(_,[], _, _, _, _, []).'), nl(S),
write(S,'draw_rule_node(_,[assume|_], _, _, _, _, []) :- !.'), nl(S),
write(S,'draw_rule_node(_,[compute_ture], _, _, _, _, []) :- !.'), nl(S),
write(S,'draw_rule_node(_,[compute_false], _, _, _, _, []) :- !.'), nl(S),
write(S,'draw_rule_node(_,[user_force_true], _, _, _, _, []) :- !.'), nl(S),
write(S,'draw_rule_node(_,[user_force_false], _, _, _, _, []) :- !.'), nl(S),
write(S,'draw_rule_node(_,[no_support|_], _, _, _, _, []) :- !.'), nl(S),

write(S,'draw_rule_node(_Q,[fact(_R)|_], _, _, _, _, []) :- !.'), nl(S),
%write(S,'	(atom_concat(r,N,R)-> RuleNo=N;RuleNo=R),\n'),
%write(S,'	(number(RuleNo)-> prt_rule(Q,RuleNo,RuleInfo);\n'),
%write(S,'	 RuleInfo=''prolog_rule''),\n'),
%write(S,'	make_atom(fact,R,D),\n'),
%write(S,'	 draw_node(...,D,Rule_info,S1,S2).\n'),

write(S,'draw_rule_node(Q,[choice(_)|T], V, S1, S2, C, New) :- !,'), nl(S),
write(S,'	draw_rule_node(Q,T, V, S1, S2, C, New).'), nl(S),
write(S,'draw_rule_node(Q,[Rule_no], V, S1, S2, C, New_List_Atom) :- '), nl(S),
write(S,'	\\+ rule_computed(Rule_no), !,'), nl(S),
write(S,'	wrt_comma(C, S1, S2),'), nl(S),
write(S,'	number_atom(Rule_no, N1),'), nl(S),
write(S,'	atom_concat(r, N1, A1),'), nl(S),
write(S,'       qualifyAtom(A1,AA1),\n'),
write(S,'	Q:ruleClass(RuleClass),'), nl(S),
write(S,'	RuleClass:rule(Rule_no, _, B),'), nl(S),
write(S,'	(B=[]->(atoms_concat([fact,''('',A1,'')''],A2),\n'),
write(S,'	 qualifyAtom(A2,AA2));AA2=AA1),\n'),
%write(S,'	chk_choice_head(Rule_no, H, A1, A2),'), nl(S),
write(S,'	prt_rule(Q,Rule_no,Rule_info),'), nl(S),
%write(S,'    display(''Rule_info=''), display(Rule_info), nl,\n'),
write(S,'	draw_node(AA1, AA2, Rule_info,S1, S2),'), nl(S),
write(S,'	write(S1, ''[''), write(S2, ''[''),'), nl(S),
%write(S,'    display(''B=''), display(B), nl,\n'),
write(S,'	draw_ref_body(Q,B,V, S1, S2, 0, A1),'), nl(S),
%write(S,'    display(''B=''), display(B), nl,\n'),
write(S,'	write(S1, '']))''), write(S2, '']))''),'), nl(S),
%write(S,'	draw_rule_node(Q,T, V, S1, S2, 1, Rest_New_Atom_List),'), nl(S),
write(S,'	assertz(rule_computed(Rule_no)),'), nl(S),
%write(S,'	make_pos(B, Bpos),'), nl(S),
%write(S,'	my_append(Rest_New_Atom_List, BPos, New_List_Atom).'), nl(S),
%write(S,'	display(''draw_rule_node:B=''), display(B), nl,\n'),
write(S,'    make_pos(B, New_List_Atom).\n'),
%write(S,'	display(''draw_rule_node:New_List_Atom=''), display(New_List_Atom), nl.\n'),
%write(S,'%	message([''end draw node rule'']).'), nl(S),
%write(S,'draw_rule_node(Q,[r(_,[])|T], V, S1, S2, C, New) :- !,'), nl(S),
%write(S,'	draw_rule_node(Q,T, V, S1, S2, C, New).'), nl(S),

write(S,'draw_rule_node(Q,[Rule_no, Atom_List|T], V, S1, S2, C, New_List_Atom) :- '), nl(S),
%write(S,'    display(''Rule_no=''), display(Rule_no),\n'),
write(S,'	\\+ rule_computed(Rule_no), !,'), nl(S),
write(S,'	wrt_comma(C, S1, S2),'), nl(S),
write(S,'	number_atom(Rule_no, N1),'), nl(S),
write(S,'	atom_concat(r, N1, A1),'), nl(S),
write(S,'       qualifyAtom(A1,AA1),\n'),
write(S,'%	chk_choice_head(Rule_no, H, A1, A2),'), nl(S),
%write(S,'    display(''Rule_no=''), display(Rule_no),\n'),
write(S,'	prt_rule(Q,Rule_no,Rule_info),'), nl(S),
write(S,'	draw_node(AA1, AA1, Rule_info, S1, S2),'), nl(S),
write(S,'	write(S1, ''[''), write(S2, ''[''),'), nl(S),
%write(S,'%	message([''draw_rule_node::Atom_List '', Atom_List]),'), nl(S),
%write(S,'%	display('' [''),'), nl(S),
%write(S,'%	prt_atom_list(Atom_List, 0),'), nl(S),
%write(S,'    display(''draw_rule_node:Atom_List=''), display(Atom_List),\n'),
write(S,'	draw_ref_body(Q,Atom_List, V, S1, S2, 0, A1),'), nl(S),
%write(S,'%	display('']''), nl,'), nl(S),
write(S,'	write(S1, '']))''), write(S2, '']))''),'), nl(S),
write(S,'	draw_rule_node(Q,T, V, S1, S2, C, Rest_New_Atom_List),'), nl(S),
write(S,'	assertz(rule_computed(Rule_no)),'), nl(S),
write(S,'	make_pos(Atom_List, Pos_Atom_List),'), nl(S),
write(S,'	my_append(Rest_New_Atom_List, Pos_Atom_List, New_List_Atom).'), nl(S),
write(S,'draw_rule_node(Q,[_,_|T], V, S1, S2, C, New_List_Atom) :- '), nl(S),
%write(S,'%	display('' [''),'), nl(S),
%write(S,'%	prt_atom_list(Q,Atom_List, 0),'), nl(S),
%write(S,'%	display('']''), nl,'), nl(S),
write(S,'	draw_rule_node(Q,T, V, S1, S2, C, New_List_Atom).'), nl(S),

%write(S,'draw_rule_node(Q,[Rule_no|T], V, S1, S2, C, New_List_Atom) :- '), nl(S),
%write(S,'	\\+ rule_computed(Rule_no), !,'), nl(S),
%write(S,'	wrt_comma(C, S1, S2),'), nl(S),
%write(S,'	number_atom(Rule_no, N1),'), nl(S),
%write(S,'	atom_concat(r, N1, A1),'), nl(S),
%write(S,'	Q:ruleClass(Rule_no, _, B),'), nl(S),
%write(S,'%	chk_choice_head(Rule_no, H, A1, A2),'), nl(S),
%write(S,'	prt_rule(Q,Rule_no,Rule_info),'), nl(S),
%write(S,'	draw_node(A1, A1, Rule_info,S1, S2),'), nl(S),
%write(S,'	write(S1, ''[''), write(S2, ''[''),'), nl(S),
%write(S,'	draw_ref_body(Q,B, V, S1, S2, 0, A1),'), nl(S),
%write(S,'	write(S1, '']))''), write(S2, '']))''),'), nl(S),
%write(S,'	draw_rule_node(Q,T, V, S1, S2, 1, Rest_New_Atom_List),'), nl(S),
%write(S,'	assertz(rule_computed(Rule_no)),'), nl(S),
%write(S,'	make_pos(B, BPos),'), nl(S),
%write(S,'	my_append(Rest_New_Atom_List, BPos, New_List_Atom).'), nl(S),
%write(S,'%	message([''end draw node rule'']).'), nl(S),

%write(S,'draw_rule_node(Q,[_|T], V, S1, S2, C, New) :-'), nl(S),
%write(S,'	draw_rule_node(Q,T, V, S1, S2, C, New).'), nl(S),
%write(S,''), nl(S),

%write(S,' draw references to body atoms (ref("atom"))'), nl(S),
write(S,'draw_ref_body(_,[], _, _, _, _, _).'), nl(S),
write(S,'draw_ref_body(Q,[B|T], V, S1, S2, C, A) :- !,'), nl(S),
write(S,'	get_atom(Q,B, _, Atom1),'), nl(S),
%write(S,'    display(''draw_ref_body:Atom1=''), display(Atom1), nl,\n'),
%write(S,'	term_atom(Atom1,Atom),\n'),
write(S,'	(atom(Atom1)->Atom=Atom1;\n'),
write(S,'	termToStr(Atom1, Str1),name(Atom,Str1)),'), nl(S),
%write(S,'	atom_concat(e, A, A1),'), nl(S),
%write(S,'	atom_concat(A1, Atom, A2),'), nl(S),
write(S,'	wrt_comma(C, S1, S2),'), nl(S),
%write(S,'	prt_comma(C),'), nl(S),
%write(S,'	display(''draw_ref_body:Atom=''),display(Atom1),nl,\n'),
%write(S,'	draw_edge(A2, S1, S2,0),'), nl(S),
write(S,'	draw_sign(B, S1, S2),'), nl(S),
write(S,'	qualifyAtom(Atom,AA2),\n'),
%write(S,'	display(''AA2 =''),display(AA2),nl,\n'),
write(S,'	write(S1, ''r("''),'), nl(S),
write(S,'	write(S1, AA2),'), nl(S),
write(S,'	write(S1, ''")''),'), nl(S),
write(S,'	write(S2, ''r("''),'), nl(S),
write(S,'	write(S2, AA2),'), nl(S),
write(S,'	write(S2, ''")''),'), nl(S),
%write(S,'	write(S2, ''r(string(''),'), nl(S),
%write(S,'	write(S2, Atom), write(S2, ''))''),'), nl(S),
%write(S,'	close_sign(B, S1, S2),'), nl(S),
write(S,'	write(S1, '')''),'), nl(S),
write(S,'	write(S2, '')''),'), nl(S),
write(S,'	draw_ref_body(Q,T, V, S1, S2, 1, A).'), nl(S),
write(S,'draw_ref_body(Q,[_|T], V, S1, S2, C, A) :-'), nl(S),
write(S,'	draw_ref_body(Q,T, V, S1, S2, C, A).'), nl(S),
write(S,''), nl(S),
write(S,'% draw sign node with edges.'), nl(S),
write(S,'draw_sign(B, S1, S2) :- B>0, draw_edge(S1,S2,0).\n'),
write(S,'draw_sign(B, S1, S2) :- B<0, draw_edge(S1,S2,1).\n\n'),

write(S,'close_sign(B, _, _) :- B>0.\n'),
write(S,'close_sign(B, S1, S2) :- B<0,\n'),
write(S,'	write(S1, ''))]))''),\n'),
write(S,'	write(S2, ''))]))'').\n\n'),

write(S,'% change term to atom.'), nl(S),
write(S,'term_atom(A1, A1) :- atom(A1), !.'), nl(S),
write(S,'term_atom(A1, A2) :- '), nl(S),
write(S,'%	message([''transfering term to string: '', A1]),'), nl(S),
write(S,'	term_to_string(A1, S1),'), nl(S),
write(S,'	name(A2, S1).\n\n'),

write(S,'% get atom index and its name.'), nl(S),
write(S,'%get_atom(B, I, T) :- B>0, fail.'), nl(S),
write(S,'get_atom(Q,I, I, T) :- I>0, Q:atomClass(AtomClass),\n'),
write(S,'	AtomClass:atom(I, A),\n'),
write(S,'	A =.. [P|Arg],\n'),
write(S,'	functor(A,P,NoArg),\n'),
write(S,'	(atom_concat(aspprolog,_,P)->\n'),
write(S,'	symbolTableName(Q,P,NoArg,Arg,T);T=A),!.\n'),
%write(S,'	qualifyAtom(T1,T),!.\n'),
write(S,'get_atom(Q,I, P, T) :- I<0, P is -I,\n'),
write(S,'	Q:atomClass(AtomClass),\n'),
%write(S,'	display(''P=''), display(P), nl,\n'),
write(S,'	AtomClass:atom(P, A),\n'),
%write(S,'	display(''A=''), display(A), nl,\n'),
write(S,'	A =.. [PRED|Arg],\n'),
%write(S,'     display(''PRED=''), display(PRED),nl,\n'),
write(S,'	functor(A,PRED,NoArg),\n'),
%write(S,'       number_atom(NoArg,No),\n'),
%write(S,'     display(''No=''), display(No),nl,\n'),
write(S,'	(atom_concat(aspprolog,_,PRED)->\n'),
write(S,'	symbolTableName(Q,PRED,NoArg,Arg,T);T=A),!.\n\n'),
%write(S,'	qualifyAtom(T1,T),!.\n'),

write(S,'symbolTableName(Q,P,N,Arg,T) :-\n'),
%write(S,'    display(''P=''), display(P),nl,\n'),
write(S,'	Q:symboltableClass(ST),\n'),
%write(S,'       display(''symbolTableName ST=''),display(ST),nl,\n'),
write(S,'	(ST:symbolTable(aspm(_QQ,0,MName),B,P,N,1) -> \n'),
write(S,'	(R=.. [B|Arg],term_atom(R,RA),\n'),
write(S,'	module_concat(MName,getAspName(F), G1),\n'),
write(S,'	''$meta_call''(G1),\n'),
write(S,'	module_concat(F,RA,T));\n'),
write(S,'	(Arg=[MNo|Arg1],\n'),
write(S,'	 ST:symbolTable(aspm(_QQ,MNo,MName),B,P,N,_),\n'),
write(S,'	 R=.. [B|Arg1],\n'),
write(S,'	module_concat(MName,getAspName(F), G1),\n'),
write(S,'	''$meta_call''(G1),\n'),
write(S,'	 module_concat(F,''model'',F1),\n'),
write(S,'	 number_atom(MNo,ANo),\n'),
write(S,'	 term_atom(R,RA),\n'),
write(S,'	 atoms_concat([F1,''('',ANo,''):'',RA],T))),!.\n'),

write(S,'symbolTableName(Q,P,N,Arg,T) :-\n'),
%write(S,'    display(''P=''), display(P),nl,\n'),
write(S,'	Q:symboltableClass(ST),\n'),
%write(S,'       display(''symbolTableName ST=''),display(ST),nl,\n'),
write(S,'	ST:symbolTable(MName,B,P,N,0),\n'),
write(S,'	R=.. [B|Arg],term_atom(R,RA),\n'),
write(S,'	module_concat(MName,RA, T),!.\n'),

write(S,'symbolTableName(_,P,_,Arg,T) :-\n'),
write(S,'	R =.. [P|Arg],\n'),
write(S,'	module_concat(''system_error:'',R,T).\n\n'),

write(S,'% combine A with V to generate atom B'), nl(S),
write(S,'make_atom(A, V, B) :-'), nl(S),
write(S,'%      atoms_concat([A, ''('', V, '')''], B), read(_).'), nl(S),
write(S,'	atom_concat(A, ''('', A1),'), nl(S),
write(S,'	atom_concat(A1, V, A2),'), nl(S),
write(S,'	atom_concat(A2, '')'', B).'), nl(S),
write(S,''), nl(S),
write(S,'% change Atom_list_indices to positive Atom List.'), nl(S),
write(S,'make_pos([], []).'), nl(S),
write(S,'make_pos([H|T],[H|T1]) :- H>0, make_pos(T, T1).'), nl(S),
write(S,'make_pos([H|T],[X|T1]) :- H<0, X is -H, make_pos(T, T1).'), nl(S),
write(S,''), nl(S),

write(S,'prt_rule(Q,R,S) :-'), nl(S),
write(S,'	Q:ruleClass(RuleClass),'), nl(S),
write(S,'	RuleClass:rule(R,H,B),'), nl(S),
write(S,'	prt_head(Q,H, S1),'), nl(S),
write(S,'	chk_fact(B, S2),'), nl(S),
write(S,'	prt_body(Q,B,0,S3),'), nl(S),
write(S,'	atom_concat([S1,S2,S3], S).'), nl(S),
write(S,''), nl(S),
write(S,'prt_head(Q,[L,U|B],S1) :- !,'), nl(S),
write(S,'	get_lbound(L,B,A1),'), nl(S),
write(S,'	get_ubound(U,B,A2),'), nl(S),
write(S,'	prt_atom_list(Q,B,0,A3),'), nl(S),
write(S,'	atom_concat([A1,'' {'', A3, ''} '', A2],S1).'), nl(S),
write(S,'prt_head(Q,0,S1) :- prt_atom_list(Q,[],_,S1),!.\n'),
write(S,'prt_head(Q,H,S1) :-'), nl(S),
write(S,'	prt_atom_list(Q,[H],0,S1).'), nl(S),
write(S,''), nl(S),
write(S,'prt_atom_list(_,[],_,'''').'), nl(S),
write(S,'prt_atom_list(Q,[H|T],C,A) :- get_atom(Q,H,_,Atom),!, '), nl(S),
%write(S,'	Q:atomClass(AtomClass),\n'),
%write(S,'	AtomClass:atom(H,Atom),'), nl(S),
%write(S,'	term_atom(Atom, Atom_Term),'), nl(S),
write(S,'	(atom(Atom) -> Atom_Term=Atom;\n'),
write(S,'	(termToStr(Atom,Str),name(Atom_Term,Str))),\n'),
write(S,'	prt_comma(C,A1),'), nl(S),
write(S,'	prt_atom_list(Q,T,1,A2),'), nl(S),
write(S,'	(H>0-> atom_concat([A1,Atom_Term,A2],A);\n'),
write(S,'	atom_concat([A1,''not('', Atom_Term,'')'',A2],A)).\n\n'),
%write(S,'prt_atom_list(Q,[H|T], C,A) :- H<0, !,'), nl(S),
%write(S,'	Y is -H,'), nl(S),
%write(S,'	Q:atomClass(AtomClass),\n'),
%write(S,'	AtomClass:atom(Y,Atom),'), nl(S),
%write(S,'	term_atom(Atom, Atom_Term),'), nl(S),
%write(S,'	prt_comma(C,A1),'), nl(S),
%write(S,'	prt_atom_list(Q,T,1,A2),'), nl(S),
%write(S,'	atom_concat([A1,''not('', Atom_Term,'')'',A2],A).'), nl(S),
%write(S,''), nl(S),
write(S,'chk_fact([],'''') :- !.'), nl(S),
write(S,'chk_fact(_, '':-'').'), nl(S),
write(S,''), nl(S),
write(S,'get_lbound(0, _, '''') :- !.'), nl(S),
write(S,'get_lbound(L,_,A) :- number_atom(L,A).'), nl(S),
write(S,'get_ubound(U, B, A) :-'), nl(S),
write(S,'	(length(B,U);B=0), !,'), nl(S),
write(S,'	 length(B,L),'), nl(S),
write(S,'	 number_atom(L,A).'), nl(S),
write(S,'get_ubound(U,_,A) :- !,'), nl(S),
write(S,'	number_atom(U,A).'), nl(S),
write(S,''), nl(S),
write(S,'prt_body(_,[],_,''.'').'), nl(S),
write(S,'prt_body(Q,[constraint([L,U|B])|T],C,A) :- !,'), nl(S),
write(S,'	prt_comma(C,A1),'), nl(S),
write(S,'	get_lbound(L,B,A2),'), nl(S),
write(S,'	get_ubound(U,B,A3),'), nl(S),
write(S,'	prt_atom_list(Q,B,0,A4),'), nl(S),
write(S,'	prt_body(Q,T,1,A5),'), nl(S),
write(S,'	atom_concat([A1,A2,'' {'',A4,''} '', A3, A5],A).'), nl(S),
write(S,''), nl(S),
write(S,'prt_body(Q,[weight([L,U|B])|T], C, A) :- !,'), nl(S),
write(S,'        prt_comma(C,A1),'), nl(S),
write(S,'	get_lbound(L,B,A2),'), nl(S),
write(S,'	get_ubound(U,B,A3),'), nl(S),
write(S,'	prt_atom_weight_list(Q,B,0,A4),'), nl(S),
write(S,'	prt_body(Q,T,1,A5),'), nl(S),
write(S,'	atom_concat([A1,A2,'' {'',A4,''} '', A3, A5],A).'), nl(S),
write(S,''), nl(S),
write(S,'prt_body(Q,[B|T],C, A) :-'), nl(S),
write(S,'	prt_comma(C,A1),'), nl(S),
write(S,'	prt_atom_list(Q,[B],0,A2),'), nl(S),
write(S,'	prt_body(Q,T,1,A3),'), nl(S),
write(S,'	atom_concat([A1,A2,A3],A).'), nl(S),
write(S,''), nl(S),
write(S,'prt_atom_weight_list(_,[],_,''.'').'), nl(S),
write(S,'prt_atom_weight_list(Q,[(B,W)|T], C,A) :-'), nl(S),
write(S,'	prt_comma(C,A1),'), nl(S),
write(S,'	prt_atom_list(Q,[B],0,A2),'), nl(S),
write(S,'	number_atom(W,A4),'), nl(S),
write(S,'	prt_atom_weight_list(Q,T,1,A3),'), nl(S),
write(S,'	atom_concat([A1,A2,''='',A4,A3],A).'), nl(S),
write(S,''), nl(S),

write(S,'% show daVinci in windows.'), nl(S),
write(S,'wshow_graph:- '), nl(S),
write(S,'	system(''uDrawGraph f1.daVinci &'').'), nl(S),
write(S,''), nl(S),

write(S,'gen_graph(Q,AtomList,G) :-\n'),
write(S,'       start_gen_graph(Q,AtomList),\n'),
write(S,'       findall(Node_Edges, graph_list(Node_Edges), G).\n\n'),

write(S,'start_gen_graph(_,[]).\n'),
write(S,'start_gen_graph(Q,[Atom|Rest]):-\n'),
write(S,'	one_atom(Q,Atom,Rest1),\n'),
write(S,'	append(Rest,Rest1,Rest2),\n'),
write(S,'	start_gen_graph(Q,Rest2).\n\n'),

write(S,'one_atom(_,A,[]) :-\n'),
write(S,'	computed(A),!.\n\n'),

write(S,'one_atom(Q,Atom,L) :-\n'),
write(S,'	assertz_fact(computed(Atom)),\n'),
write(S,'	Q:atomClass(AtomClass),'), nl(S),
write(S,'	AtomClass:atom(Ano, Atom),\n'),
write(S,'	Q:just(Ano,V,R),\n'),
write(S,'	get_value(V,Truth),\n'),
write(S,'	assertz_fact(graph_list(node(Atom,Truth))),\n'),
write(S,'       node_rule_edge((Atom,Truth),R),\n'),
write(S,'	rule_graph(Q,R,L).\n\n'),

write(S,'rule_graph(_,[],[]).\n'),
write(S,'rule_graph(_,[assume],[]) :-\n'),
write(S,'	computed(assume),!.\n'),
write(S,'rule_graph(_,[assume],[]) :-\n'),
write(S,'	assertz_fact(graph_list(node(assume,false))),\n'),
write(S,'	!.\n'),
write(S,'rule_graph(_,[compute_true],[]) :-\n'),
write(S,'	computed(compute_true),!.\n'),
write(S,'rule_graph(_,[compute_true],[]) :-\n'),
write(S,'	assertz_fact(graph_list(node(compute_true,false))),\n'),
write(S,'	!.\n'),
write(S,'rule_graph(_,[compute_false],[]) :-\n'),
write(S,'	computed(compute_flase),!.\n'),
write(S,'rule_graph(_,[compute_false],[]) :-\n'),
write(S,'	assertz_fact(graph_list(node(compute_false,false))),\n'),
write(S,'	!.\n'),
write(S,'rule_graph(_,[user_force_true],[]) :-\n'),
write(S,'	computed(user_force_true),!.\n'),
write(S,'rule_graph(_,[user_force_true],[]) :-\n'),
write(S,'	assertz_fact(graph_list(node(user_force_true,false))),\n'),
write(S,'	!.\n'),
write(S,'rule_graph(_,[user_force_false],[]) :-\n'),
write(S,'	computed(user_force_false),!.\n'),
write(S,'rule_graph(_,[user_force_false],[]) :-\n'),
write(S,'	assertz_fact(graph_list(node(user_force_false,false))),\n'),
write(S,'	!.\n'),
write(S,'rule_graph(_,[no_support],[]) :-\n'),
write(S,'	computed(no_support),!.\n'),
write(S,'rule_graph(_,[no_support],[]) :-\n'),
write(S,'	assertz_fact(graph_list(node(no_support,false))),\n'),
write(S,'	!.\n'),

write(S,'rule_graph(Q,[No,AL|T],L) :-\n'),
write(S,'	Q:ruleClass(RuleClass),'), nl(S),
write(S,'	RuleClass:rule(No,H,_),\n'),
write(S,'	list(H),!,\n'),
write(S,'	choice_rule(Q,No,AL,L1),\n'),
write(S,'	rule_graph(Q,T,L2),\n'),
write(S,'	append(L1,L2,L).\n'),
write(S,'rule_graph(Q,[No,AL|T],L) :-\n'),
write(S,'	save_rule_node(Q,No,AL,L1),\n'),
write(S,'	rule_graph(Q,T,L2),\n'),
write(S,'	append(L1,L2,L).\n\n'),
write(S,'rule_graph(Q,[No], L) :-\n'),
write(S,'	Q:ruleClass(RuleClass),'), nl(S),
write(S,'	RuleClass:rule(No,_,Body),\n'),
write(S,'	save_rule_node(Q,No,Body,L).\n'),
%write(S,'	rule_graph(Q,Tail,L2),\n'),
%write(S,'	append(L1,L2,L).\n'),

%write(S,'rule_graph(Q,[fact(No)], L) :-\n'),
%write(S,'	save_rule_node(Q,No, [], L).\n'),

write(S,'node_rule_edge(_,[]).\n'),
write(S,'node_rule_edge(A,[assume]) :-\n'),
write(S,'	assertz_fact(graph_list(edge(A,assume,1))),!.\n'),
write(S,'node_rule_edge(A,[compute_true]) :-\n'),
write(S,'	assertz_fact(graph_list(edge(A,compute_true,1))),!.\n'),
write(S,'node_rule_edge(A,[compute_false]) :-\n'),
write(S,'	assertz_fact(graph_list(edge(A,compute_false,1))),!.\n'),
write(S,'node_rule_edge(A,[user_force_true]) :-\n'),
write(S,'	assertz_fact(graph_list(edge(A,user_force_true,1))),!.\n'),
write(S,'node_rule_edge(A,[user_force_false]) :-\n'),
write(S,'	assertz_fact(graph_list(edge(A,user_force_false,1))),!.\n'),
write(S,'node_rule_edge(A,[no_support]) :-\n'),
write(S,'	assertz_fact(graph_list(edge(A,no_supprt,1))),!.\n'),

%write(S,'node_rule_edge(A,[fact(No)]) :-\n'),
%write(S,'	number_atom(No,Rno),\n'),
%write(S,'	atoms_concat([''fact(r'',Rno, '')''], Rule),\n'),
%write(S,'	assertz_fact(graph_list(edge(A,Rule,1))).\n'),
write(S,'node_rule_edge(A,[No,_|T]) :-\n'),
write(S,'	number_atom(No,Rno),\n'),
write(S,'	atom_concat(''r'',Rno, Rule),\n'),
write(S,'	assertz_fact(graph_list(edge(A,Rule,1))),\n'),
write(S,'	node_rule_edge(A,T).\n'),
write(S,'node_rule_edge(A,[No]) :-\n'),
write(S,'	number_atom(No,Rno),\n'),
write(S,'	atom_concat(''r'',Rno, Rule),\n'),
write(S,'	assertz_fact(graph_list(edge(A,Rule,1))).\n'),
%write(S,'	node_rule_edge(A,T).\n\n'),

write(S,'save_rule_node(Q,No,AL,L) :-\n'),
write(S,'	prt_rule(Q,No,RT),\n'),
write(S,'	number_atom(No,RNO),\n'),
write(S,'	atom_concat(''r'',RNO,Rule_no),\n'),
write(S,'	assertz_fact(graph_list(node(Rule_no,RT))),\n'),
write(S,'	add_edges(Q,Rule_no,AL,L).\n\n'),
write(S,'save_rule_node(Q,No,[],L) :-\n'),
write(S,'	prt_rule(Q,No,RT),\n'),
write(S,'	number_atom(No,RNO),\n'),
write(S,'	atom_concat(''r'',RNO,Rule_no),\n'),
write(S,'	assertz_fact(graph_list(node(Rule_no,RT))),\n'),
write(S,'	add_edges(Q,Rule_no,[fact],L).\n'),


write(S,'choice_rule(_,No,_,[]) :-\n'),
write(S,'	rule_computed(No),!.\n'),
write(S,'choice_rule(Q,No,AL,L) :-\n'),
write(S,'	save_rule_node(Q,No,AL,L).\n\n'),

write(S,'add_edges(_,_,[],[]).\n'),
write(S,'add_edges(Q,Rno,[H|T],L) :-\n'),
write(S,'	Q:atomClass(AtomClass),'), nl(S),
write(S,'	AtomClass:atom(H,Atom),\n'),
write(S,'	Q:just(H,V,_),\n'),
write(S,'	get_value(V,Truth),\n'),
write(S,'	get_sign(H,Sign),\n'),
write(S,'	assertz_fact(graph_list(edge(Rno,(Atom,Truth),Sign))),\n'),
write(S,'	atoms_to_be_computed(H,L1),\n'),
write(S,'	add_edges(Q,Rno,T,L2),\n'),
write(S,'	append(L1,L2,L).\n\n'),

write(S,'atoms_to_be_computed(H,[]) :-\n'),
write(S,'	computed(H),!.\n'),
write(S,'atoms_to_be_computed(H,[H]).\n\n'),
	
write(S,'get_sign(A,1) :- A>0,!.\n'),
write(S,'get_sign(A,0) :- A<0.\n\n').

