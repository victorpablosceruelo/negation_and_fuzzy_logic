:- module(intretract, [buildRetract/1]).

buildRetract(S) :-

write(S,':- use_module(library(system_extra)).\n\n'),
write(S,':- data retracted_list/1.\n\n'),

write(S,'% retract a list of rules from asp file: ------------'), nl(S),
write(S,'retract([]) :- !.'), nl(S),
write(S,'retract(L) :- '), nl(S),
write(S,'	list(L),\n'),
write(S,'	asp2prologList(L,R),\n'),
%write(S,'   display(''R=''), display(R),\n'),
write(S,'	retractAsp(R),!,\n'),
write(S,'	findall(L1, retracted_list(L1), R1),'), nl(S),
%write(S,'   display(''R1=''), display(R1),nl,\n'),
%write(S,'       set_ftime,\n'),
write(S,'       this_module(TT),\n'),
write(S,'	module_concat(TT, retract2(R1), M), '), nl(S),
write(S,'	und(M), !.'), nl(S),
write(S,''), nl(S),
write(S,'% retrace list of rules from ASP files.'), nl(S),
write(S,'retractAsp(R) :-'), nl(S),
write(S,'	aspFileName(FullName),\n'),
%write(S,'   display(''FullName=''),display(FullName),nl,\n'),
write(S,'	atom_concat(FullName, ''1'', TmpAsp),\n'),
%write(S,'   display(''TmpAsp=''),display(TmpAsp),nl,\n'),
write(S,'	open(FullName, read, FS),\n'),
write(S,'	open(TmpAsp, write, TS),\n'),
write(S,'	read_file(FS, LineTerm,V),\n'),
%write(S,'   display(''LineTerm=''),display(LineTerm),nl,\n'),
write(S,'	matchTermList(LineTerm, R, TS,V), !,\n'),
write(S,'	close(FS),\n'),
write(S,'	close(TS),\n'),
%write(S,'    display(''copy file TmpAsp=''),display(TmpAsp),nl,\n'),
write(S,'	copy_file(TmpAsp, FullName),\n'),
write(S,'	incState.\n'),

write(S,'matchTermList(end_of_file, _, _,_V) :- !.\n'),
write(S,'matchTermList(end, _, _,_V) :- !.\n'),
write(S,'matchTermList(LineTerm,[],TS,V) :- !,\n'),
%write(S,'    display(''writing2ASPFile LineTerm=''),display(LineTerm),nl,\n'),
write(S,'	write2ASPFile(TS, LineTerm,V),\n'),
write(S,'	!,fail.\n'),
write(S,'matchTermList(LineTerm, [H|_], _,_V) :-\n'),
write(S,'	ask(LineTerm, H), !,\n'),
%write(S,'    display(''saving in retracted_list:''),display(H),nl,\n'),
write(S,'	assertz_fact(retracted_list(H)),\n'),
write(S,'	this_module(TM),\n'),
write(S,'	module_concat(TM,setStateChanged,TMCHANGED),\n'),
write(S,'	''$meta_call''(TMCHANGED),\n'),
%write(S,'	this_module(TM),\n'),
%write(S,'	TM:setStateChanged,\n'),
write(S,'	!, fail.\n\n'),
write(S,'matchTermList(LineTerm, [_|T], TS,V) :-\n'),
write(S,'	matchTermList(LineTerm, T, TS,V),\n'),
write(S,'	!, fail.\n'),

write(S,'asp2prologList([], []).\n'),
write(S,'asp2prologList([H|T], [H1|T1]) :-\n'),
write(S,'	asp2prolog(H,H1,_VV),\n'),
write(S,'	asp2prologList(T,T1).\n\n'),

write(S,'% used on backtrack'), nl(S),
write(S,'retract2([]) :- !.\n'),
write(S,'retract2(L) :-'), nl(S),
%write(S,'  display(''retract2 L=''), display(L),nl,\n'),
%write(S,'	getCState(State),!,\n'),
%write(S,'   display(''retract2: state=''),display(State),nl,\n'),
%write(S,'	popEndModels(State),\n'),
%write(S,'   display(''retract2: popEndModels=''),nl,\n'),
write(S,'	this_module(TM),\n'),
write(S,'	module_concat(TM,setStateChanged,TMCHANGED),\n'),
write(S,'	''$meta_call''(TMCHANGED),\n'),
%write(S,'   display(''retract2: setStateChanged=''),nl,\n'),
%write(S,'    display(''backtrack from retract''), nl,\n'),
write(S,'       decState,'), nl(S),
%write(S,'  display(''-------------------------------''),nl,\n'),
write(S,'	append2ASPFile(L),!.\n\n'),

write(S,'% retract non backtrack... -----------------------'), nl(S),
write(S,'retract_nb([]) :- !.'), nl(S),
write(S,'retract_nb(L) :- '), nl(S),
write(S,'       list(L),'), nl(S),
write(S,'	asp2prologList(L,R),\n'),
write(S,'	retractAsp(R),'), nl(S),
%write(S,'      set_ftime,\n'),
write(S,'	self(ModuleName),\n'),
write(S,'	atoms_concat([ModuleName,'':'',reset_asp], G),\n'),
write(S,'	''$meta_call''(G).\n'),
%write(S,'	reset_asp.'), nl(S),
write(S,'% -------------------------------------------------------\n').

