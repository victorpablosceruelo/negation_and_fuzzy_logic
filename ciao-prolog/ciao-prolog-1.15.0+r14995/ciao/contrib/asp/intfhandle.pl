:- module(intfhandle, [buildFormatHandle/1]).

buildFormatHandle(S) :-

% cnv2NProlgo: convert ASP format rule into New Prolog Format.
% input/output are:
%    if input is atom or term, output is term.
%    if input is string, output is string.
%    if input is list of atoms or term, output is a list of atoms or terms
%    if input is list of string, output is a list of string
% DELCODE: cnv2NProlog: is not used any more...
write(S,'cnv2NProlog(ASPFormat, NPFormat) :-'), nl(S),
write(S,'	string(ASPFormat), !,'), nl(S),
write(S,'	stringConvert2EP(ASPFormat, NPFormat).\n'), nl(S),
write(S,'cnv2NProlog(ASPFormat, NPFormat) :-'), nl(S),
write(S,'	list(ASPFormat),!,'), nl(S),
write(S,'	cnvList2NPList(ASPFormat, NPFormat).'), nl(S),
write(S,'cnv2NProlog(ASPFormat, NPFormat) :-'), nl(S),
write(S,'	(atom(ASPFormat);term(ASPFormat)),!,'), nl(S),
write(S,'	atomTerm2NPAtomTerm(ASPFormat, NPFormat).'), nl(S),

write(S,'cnvList2NPList([], []).'), nl(S),
write(S,'cnvList2NPList([H|T], [H1|T1]) :-'), nl(S),
write(S,'	((atom(H);term(H))-> '), 
write(S,'	 atomTerm2NPAtomTerm(H,H1);'),
write(S,'	stringConvert2EP(H,H1)),\n'),
write(S,'	 cnvList2NPList(T,T1).'), nl(S),
%-----------------------------------------------------------
% DELCODE: atomTerm2NPAtomTerm is not used any more...
write(S,'atomTerm2NPAtomTerm(A, B) :-'), nl(S),
write(S,'	(atom(A) -> name(A, Str1); term_to_string(A,Str1)),'), nl(S),
write(S,'	stringConvert2EP(Str1, Str2),\n'),
%write(S,'	 one_space_string_format(Str1,Str2),'), nl(S),
%write(S,'	 reverse_convert(Str2,Str3),'), nl(S),
write(S,'	 append(Str2, ".", Str4),'), nl(S),
write(S,'	 string_to_term(Str4,B),!.\n'), nl(S),
% ---------------------------------------------------------------
% DELCODE: stringConvert2EP is not used any more...
write(S,'% convert special: ''{'' --> ''^'', ''}'' --> ''#'', ''['' --> ''&'', '']'' --> ''@'''), nl(S),
%write(S,'stringConvert2EP(String, String) :-'), nl(S),
%write(S,'   append("compute ", _, String), !.'), nl(S),
write(S,'stringConvert2EP(String,String) :-\n'),
write(S,'	append("#const ", _, String).\n'),
write(S,'stringConvert2EP(String,String) :-\n'),
write(S,'	append("#domain ", _, String).\n'),
write(S,'stringConvert2EP(String,String) :-\n'),
write(S,'	append("#external ", _, String).\n'),
write(S,'stringConvert2EP(String,String) :-\n'),
write(S,'	append("#function ", _, String).\n'),
write(S,'stringConvert2EP(String,String) :-\n'),
write(S,'	append("#hide ", _, String).\n'),
write(S,'stringConvert2EP(String,String) :-\n'),
write(S,'	append("#show ", _, String).\n'),
write(S,'stringConvert2EP(String,String) :-\n'),
write(S,'	append("#weight ", _, String).\n'),
write(S,'stringConvert2EP(String,String) :-\n'),
write(S,'	append("#option ", _, String).\n'),
write(S,'stringConvert2EP([], []).'), nl(S),
write(S,'stringConvert2EP([0''{|T], [0''^|T1]) :- !,'), nl(S),
%write(S,'	left_brace(H), power(C2), !,'), nl(S),
write(S,'	stringConvert2EP(T, T1).'), nl(S),
write(S,'stringConvert2EP([0''}|T], [0''#|T1]) :- !,'), nl(S),
%write(S,'	right_brace(H), hash(C2), !,'), nl(S),
write(S,'	stringConvert2EP(T, T1).'), nl(S),
write(S,'stringConvert2EP([0''[|T], [0''&|T1]) :- !,'), nl(S),
%write(S,'	left_bracket(H), andc(C2), !,'), nl(S),
write(S,'	stringConvert2EP(T, T1).'), nl(S),
write(S,'stringConvert2EP([0'']|T], [0''@|T1]) :- !,'), nl(S),
%write(S,'	right_brace(H), ats(C2), !,'), nl(S),
write(S,'	stringConvert2EP(T, T1).'), nl(S),
write(S,'stringConvert2EP([H|T], [H|T1]) :-'), nl(S),
write(S,'	 stringConvert2EP(T, T1).'), nl(S),
write(S,'%-------------------------------------------------'), nl(S),
% ------------------------------------------------------------------------

write(S,'% reverse format ''{'' --> ''^'', ''}'' --> ''#'', ''['' --> ''&'', '']'' --> ''@''.'), nl(S),
write(S,'reverseFormat(Atm, String) :-'), nl(S),
%write(S,'   display(''reverseFormat0''),nl,\n'),
write(S,'   atom(Atm), '), nl(S),
write(S,'   name(Atm, String1),'), nl(S),
write(S,'   rem_last_dot(String1, String2),'), nl(S),
write(S,'   reverse_convert(String2, String).'), nl(S),
write(S,'reverseFormat(Term, String) :-'), nl(S),
%write(S,'   display(''reverseFormat 1:''), nl,\n'),
write(S,'      term(Term), !,'), nl(S),
%write(S,'   display(''reverseFormat 2:''), nl,\n'),
%write(S,'      create_dict(Term, D),'), nl(S),
%write(S,'      D=dic(L, B),'), nl(S),
%write(S,'      rename_dict(B, B1, 65),'), nl(S),
%write(S,'      D1=dic(L,B1),'), nl(S),
%write(S,'      rename(Term, D1),'), nl(S),
%write(S,'      display(''in reverseFormat: Term=''), display(Term),nl,\n'),
write(S,'      term_to_string(Term, String1),'), nl(S),
%write(S,'    display(''String1=''), display(String1), nl,\n'),
%write(S,'   display(''reverseFormat:''),\n'),
%write(S,'    write_string(String1), nl, \n'),
write(S,'      reverse_convert(String1, String).'), nl(S),

write(S,'reverse_convert([], []).'), nl(S),
write(S,'reverse_convert(L1,L1) :-\n'),
write(S,'	append("#use_asp",_,L1),!.\n'),
write(S,'reverse_convert(L1,L1) :-\n'),
write(S,'	append("#import",_,L1),!.\n'),
write(S,'reverse_convert(L1,L1) :-\n'),
write(S,'	append("#const",_,L1),!.\n'),
write(S,'reverse_convert(L1,L1) :-\n'),
write(S,'	append("#weight",_,L1),!.\n'),
write(S,'reverse_convert(L1,L1) :-\n'),
write(S,'	append("#domain",_,L1),!.\n'),
write(S,'reverse_convert(L1,L1) :-\n'),
write(S,'	append("#external",_,L1),!.\n'),
write(S,'reverse_convert(L1,L1) :-\n'),
write(S,'	append("#function",_,L1),!.\n'),
write(S,'reverse_convert(L1,L1) :-\n'),
write(S,'	append("#hide",_,L1),!.\n'),
write(S,'reverse_convert(L1,L1) :-\n'),
write(S,'	append("#show",_,L1),!.\n'),
write(S,'reverse_convert(L1,L1) :-\n'),
write(S,'	append("#option",_,L1),!.\n'),
write(S,'reverse_convert([0''^|T1], [0''{|T2]) :- !,'), nl(S),
write(S,'   reverse_convert(T1,T2).'), nl(S),
write(S,'reverse_convert([0''#|T1], [0''}|T2]) :- !,'), nl(S),
write(S,'   reverse_convert(T1,T2).'), nl(S),
write(S,'reverse_convert([0''&|T1], [0''[|T2]) :- !,'), nl(S),
write(S,'   reverse_convert(T1,T2).'), nl(S),
write(S,'reverse_convert([0''@|T1], [0'']|T2]) :- !,'), nl(S),
write(S,'   reverse_convert(T1,T2).'), nl(S),
%write(S,'reverse_convert([H1,0''\s|T], [0''"|T1]) :-\n'),
%write(S,'	single_quote(H1), !,\n'),
%write(S,'	reverse_convert(T,T1).\n'),
write(S,'reverse_convert([H|T],[H|T1]) :- \n'),
write(S,'	var(H),\n'),
write(S,'	reverse_convert(T,T1).\n'),
write(S,'reverse_convert([0''~|T], [0''"|T1]) :- !,\n'),
%write(S,'	single_quote(H1), !,\n'),
write(S,'	reverse_convert(T,T1).\n'),
%write(S,'reverse_convert([H1|T], T1) :-\n'),
%write(S,'	single_quote(H1), !,\n'),
%write(S,'	reverse_convert(T,T1).\n'),
write(S,'reverse_convert([H1|T1], [H1|T2]) :-'), nl(S),
write(S,'   !, reverse_convert(T1,T2).\n\n'),
%write(S,'%-----------------------------------------'),

write(S,'% remove last dot from string'), nl(S),
write(S,'rem_last_dot([], []).'), nl(S),
write(S,'rem_last_dot([H], []) :-'), nl(S),
write(S,'   dot(H), !.'), nl(S),
write(S,'rem_last_dot([H, C|_], []) :-'), nl(S),
write(S,'   dot(H), (space(C);tabb(C)), !.'), nl(S),
write(S,'rem_last_dot([H|T], [H|T1]) :-'), nl(S),
write(S,'   rem_last_dot(T, T1).'), nl(S),
write(S,'% -------------------------------------'), nl(S),

write(S,'% use dictionary to rename variables: A, B, ..., Z.'), nl(S),
write(S,'rename_dict([], [], _).'), nl(S),
write(S,'rename_dict([_|T], [C|T1], X) :-'), nl(S),
write(S,'	X1 is X+1,'), nl(S),
write(S,'	char_code(C, X),'), nl(S),
write(S,'	rename_dict(T, T1, X1).'), nl(S),
write(S,''), nl(S), nl(S).
