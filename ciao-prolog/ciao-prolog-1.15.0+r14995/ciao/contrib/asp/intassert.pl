:- module(intassert, [buildAssert/1]).

buildAssert(S) :-
    
write(S,'% Assert a list of rules into ASP.'), nl(S),
write(S,'assert([]) :- !.'), nl(S),
write(S,'assert(L) :- %  spy(assert2), notrace,'), nl(S),
write(S,'	list(L), '), nl(S),
write(S,'	assert_list(L,R),'), nl(S),
%write(S,'       set_ftime,\n'),
%write(S,'	getCState(State),\n'),
%write(S,'	pushEndModels(State,1),\n'),
write(S,'       this_module(TT),'), nl(S),
write(S,'	module_concat(TT, assert2(R), M), '), nl(S),
write(S,'        und(M).'), nl(S),
write(S,''), nl(S),
write(S,'assert_list(L,R) :- '), nl(S),
write(S,'      aspFileName(X),'), nl(S),
write(S,'      open(X, append, S),'), nl(S),
write(S,'	assertList(S,L,R),\n'),
write(S,'	close(S),\n'),
%write(S,'display(''R=''), display(R), nl, read(_),\n'),
%write(S,'	append2ASPFile(R),\n'),
write(S,'	this_module(TM),\n'),
write(S,'	module_concat(TM,setStateChanged,TMCHANGED),\n'),
write(S,'	''$meta_call''(TMCHANGED),\n'),
%write(S,'display(''incState''), nl,\n'),
write(S,'	incState.\n\n'),
%write(S,'display(''end''), nl.\n\n'),

write(S,'makeV(25,[''Z'']).\n'),
write(S,'makeV(N,[B|T]) :- \n'),
write(S,'	X is N+64,\n'),
write(S,'	char_code(B,X),\n'),
write(S,'	N1 is N+1,\n'),
write(S,'	makeV(N1,T).\n\n'),

write(S,'assignVar([],V,V).\n'),
write(S,'assignVar([VHead|T],[VHead|VTail],V1) :-\n'),
write(S,'	!,assignVar(T,VTail,V1).\n'),
write(S,'assignVar([B|T],V,V1) :-\n'),
write(S,'	atomic(B), !,\n'),
write(S,'	assignVar(T,V,V1).\n'),
write(S,'assignVar([B|T],V,V1) :-\n'),
write(S,'	term(B),!,\n'),
write(S,'	B=.. [_|Arg],\n'),
write(S,'	assignVar(Arg,V,V2),\n'),
write(S,'	assignVar(T,V2,V1).\n\n'),

write(S,'assignV((H:-B),V) :-\n'),
write(S,'	H =.. [_|T],\n'),
write(S,'	assignVar(T,V,V1),\n'),
write(S,'	assignV(B,V1).\n'),

write(S,'assignV((B1,B2),V) :- \n'),
write(S,'	B1 =.. [_|T],\n'),
write(S,'	assignVar(T,V,V1),\n'),
write(S,'	assignV(B2,V1).\n'),
write(S,'assignV(B,V) :- \n'),
write(S,'	B =.. [_|T],\n'),
write(S,'	assignVar(T,V,_).\n\n'),

write(S,'asp2prolog(H, H1, VV) :-\n'),
write(S,'	(atom(H) -> name(H,Str);\n'),
%write(S,'	(makeV(1,V),\n'),
%write(S,'       assignV(H,V),\n'),
write(S,'	term_to_string(H,Str)), \n'),
write(S,'	(append(_,".",Str)-> Str2=Str;append(Str,".",Str2)),\n'),
write(S,'	 makePrologTerm(Str2, H1, VV).\n\n'),

write(S,'assertList(_,[],[]).\n'),	
write(S,'assertList(S,[H|T],[H1|T1]) :- \n'),
write(S,'	asp2prolog(H,H1,_VV),\n'),
write(S,'	copy_term(H1,H2),\n'),
write(S,'	makeV(1,V),\n'),
write(S,'       assignV(H2,V),\n'),
write(S,'	reverseFormat(H2,String3),\n'),
write(S,'	write_string(S,String3), write(S,''.''), nl(S),!,\n\n'),
write(S,'	assertList(S,T,T1).\n\n'),

write(S,'append2ASPFile(R) :-\n'),
write(S,'      aspFileName(X),'), nl(S),
write(S,'      open(X, append, S),'), nl(S),
%write(S,'   display(''append2ASPFile: R=''),display(R),nl,\n'),
write(S,'      append_to_file(S, R),'), nl(S),
%write(S,'   display(''close(S)''), nl,\n'),
write(S,'	close(S).\n'),
%write(S,'   display(''deleteGroundASP''), nl,\n'),
%write(S,'	deleteGroundASP,\n'),
%write(S,'   display(''setStateChanged''), nl,\n'),
%write(S,'	this_module(TM),\n'),
%write(S,'	module_concat(TM,setStateChanged,TMCHANGED),\n'),
%write(S,'	''$meta_call''(TMCHANGED).\n'),
%write(S,'  this_module(TM),\n'),
%write(S,'      TM:setStateChanged.\n\n'),
write(S,''), nl(S),
write(S,'% assert2 is used on backtrack to restore the rules added to asp file.'), nl(S),
write(S,'assert2(L) :- '), nl(S),
%write(S,'   display(''assert2: deleteGroundASP''),nl,\n'),
%write(S,'	deleteGroundASP,\n'),
%write(S,'   display(''retract_list''),nl,\n'),
write(S,'	retract_list(L),'), nl(S),
%write(S,'	getCState(State),!,\n'),
%write(S,'	popEndModels(State),\n'),
%write(S,'   display(''decState''),nl,\n'),
write(S,'	decState.\n'), nl(S),
write(S,'%       trace,'), nl(S),
write(S,'% --------------------------------------------------------'), nl(S),
write(S,''), nl(S),
write(S,'% assert non backtrack... -------------------------'), nl(S),
write(S,'assert_nb([]) :- !.'), nl(S),
write(S,'assert_nb(L) :- list(L), '), nl(S),
write(S,'      assert_list(L,_),'), nl(S),
%write(S,'      set_ftime,\n'),
write(S,'	self(ModuleName),\n'),
write(S,'	atoms_concat([ModuleName,'':'',reset_asp], G),\n'),
write(S,'	''$meta_call''(G).\n'),
%write(S,'      resetParentASP.\n\n'),   need to be implemented
%write(S,'      reset_asp.'), nl(S),
write(S,'% -------------------------------------------------'), nl(S),
write(S,''), nl(S),
write(S,'retract_list(L) :-'), nl(S),
%write(S,'       display(''backtracking from assert''),nl,\n'),
write(S,'	aspFileName(ASPFile),'), nl(S),
%write(S,'	aspFileName(ASPFile,ASPTemp,_),'), nl(S),
write(S,'	atom_concat(ASPFile,''1'',ASPTemp),'), nl(S),
%write(S,'   display(''Open ASPFile=''),display(ASPFile),nl,\n'),
write(S,'	open(ASPFile, read, ASPRead),'), nl(S),
%write(S,'   display(''Open TmpFile=''),display(ASPTemp),nl,\n'),
write(S,'	open(ASPTemp, write, Tmp),'), nl(S),
write(S,'	read_file(ASPRead, LineTerm, V),'), nl(S),
write(S,'	termNotMember(LineTerm, L),'), nl(S),
write(S,'	write2ASPFile(Tmp,LineTerm, V),'), nl(S),
%write(S,'   display(''closing files''),nl,\n'),
write(S,'	close(Tmp),'), nl(S),
write(S,'	close(ASPRead),'), nl(S),
%write(S,'   display(''end retract_list''),nl,\n'),
write(S,'	copy_file(ASPTemp,ASPFile),\n'),
write(S,'	!.\n'), nl(S),	

write(S,'termNotMember(end_of_file, _) :- !.\n'),
write(S,'termNotMember(_,[]) :- !.\n'),
write(S,'termNotMember(LineTerm, [H|_]) :-\n'),
%write(S,'       display(''LineTerm:''),display(LineTerm), nl,\n'),
%write(S,'       display(''H=''), display(H), nl,\n'),
write(S,'	ask(LineTerm, H), !,\n'),
%write(S,'       display(yes),nl,\n'),
write(S,'	this_module(TM),\n'),
write(S,'	module_concat(TM,setStateChanged,TMCHANGED),\n'),
write(S,'	''$meta_call''(TMCHANGED),\n'),
%write(S,'      TM:setStateChanged,\n\n'),
write(S,'	!,fail.\n\n'),
write(S,'termNotMember(LineTerm, [_|T]) :-\n'),
write(S,'	termNotMember(LineTerm, T),\n'),
write(S,'	!.\n').
