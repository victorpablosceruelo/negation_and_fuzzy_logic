:- module(intground, [buildGroundASP/1]).

buildGroundASP(S) :- 

write(S,':- data qualify/2, counter/1, tmpFile/1, tmpST/1.\n'),
write(S,':- data weight/2, const/2.\n\n'),
%write(S,':- data symbolTable/5.\n\n'),

write(S,'existgroundASP :-\n'),
write(S,'	aspFileName(ASPFile),\n'),
%write(S,'	aspFileName(ASPFile,ASPF,_),\n'),
write(S,'	atom_concat(ASPFile, ''1'',ASPF),\n'),
write(S,'	file_exists(ASPF),!.\n\n'),

write(S,'groundAsp :-\n'),
write(S,'	retractall_fact(qualify(_,_)),\n'),
write(S,'	retractall_fact(weight(_,_)),\n'),
write(S,'	retractall_fact(const(_,_)),\n'),
write(S,'       retractall_fact(tmpST(_)),\n'),
write(S,'	aspFileName(ASPFile),\n'),
%write(S,'	aspFileName(ASPFile,ASPTmp,_),\n'),
write(S,'	children(L),\n'),
%write(S,'   display(''groundAsp:''), display(L), nl, \n'),
write(S,'	(L=[]->fail;atom_concat(ASPFile,''1'',ASPTmp)),!,\n'),

%write(S,'	atom_concat(ASPFile, ''1'', ASPTmp),\n'),
write(S,'       ST new symboltab,\n'),
write(S,'       assertz_fact(tmpST(ST)),\n'),
write(S,'	open(ASPFile, read, ASPRead),\n'),
write(S,'	open(ASPTmp, write, Tmp),\n'),
write(S,'	saveTmp(Tmp),\n'),
write(S,'	read_file(ASPRead, LineTerm, V),\n'),
%write(S,'   display(''LineTerm=''),display(LineTerm),nl,\n'),
write(S,'	factorRule(Tmp,LineTerm, V),!,\n'),
write(S,'	close(ASPRead), close(Tmp), \n'),
%write(S,'      display(''end intground''), nl,\n'),
%write(S,'       display(''------->''),nl,prtSymbolTable,\n'),
write(S,'        !.\n'),
write(S,'groundAsp.\n\n'),

write(S,'factorRule(_,end_of_file, _V) :- !.\n'),
write(S,'factorRule(_,end, _V) :- !.\n'),
write(S,'factorRule(_,''#use_asp''(_,_),_V) :-\n'),
write(S,'	!,fail.\n\n'),
write(S,'factorRule(_,''#use_asp''(_,_,_),_V) :-\n'),
write(S,'	!,fail.\n\n'),
write(S,'factorRule(_,''#import''(_,_),_V) :-\n'),
write(S,'	!,fail.\n\n'),

write(S,'factorRule(_, ''#const''(=(C,V)), _V) :- !,\n'),
%write(S,'  display(''const found''), nl, read(_),\n'),
write(S,'	assertz_fact(const(C,V)),\n'),
write(S,'	getTmp(Tmp),\n'),
%write(S,'     display(''Tmp=''), display(Tmp), nl,\n'),
write(S,'	write(Tmp, ''#const ''),\n'),
write(S,'	write(Tmp, C),\n'),
write(S,'	write(Tmp, ''=''),\n'),
write(S,'	write(Tmp, V),\n'),
write(S,'	write(Tmp, ''.''), nl(Tmp), !, fail.\n'),

write(S,'factorRule(_, ''#weight''(=(W,V)), true) :- !,\n'),
write(S,'	assertz_fact(weight(W,V)),\n'),
write(S,'	getTmp(Tmp),\n'),
write(S,'	write(Tmp, ''#weight ''),\n'),
write(S,'	write(Tmp, W),\n'),
write(S,'	write(Tmp, ''=''),\n'),
write(S,'	write(Tmp, V),\n'),
write(S,'	write(Tmp, ''.''), nl(Tmp), !, fail.\n'),

write(S,'factorRule(_, ''#show''(A), true) :- !,\n'),
write(S,'	getTmp(Tmp),\n'),
write(S,'	write(Tmp, ''#show ''),\n'),
write(S,'	write(Tmp, A),\n'),
write(S,'	write(Tmp, ''.''), nl(Tmp), !, fail.\n'),
write(S,'factorRule(_, ''#hide''(A), true) :- !,\n'),
write(S,'	getTmp(Tmp),\n'),
write(S,'	write(Tmp, ''#hide ''),\n'),
write(S,'	write(Tmp, A),\n'),
write(S,'	write(Tmp, ''.''), nl(Tmp), !, fail.\n'),

write(S,'factorRule(Tmp,LineTerm,V) :-\n'),
write(S,'	LineTerm =.. RL,\n'),
%write(S,'   display(''RL=''),display(RL),nl,\n'),
write(S,'	RL=['':-'',Head,Body],!,\n'),
%write(S,'	disp_list([''Body='',Body,nl]),\n'),
write(S,'	!,groundRule(Tmp,LineTerm,Head,Body,V),!,fail.\n\n'),
write(S,'factorRule(Tmp,LineTerm,V) :-\n'),
write(S,'	addNewRule(Tmp,LineTerm,V),!,fail.\n\n'),

write(S,'groundRule(Tmp,LineTerm,Head,Body,V) :-\n'),
write(S,'	reset_counter,\n'),
write(S,'	groundPred1(LineTerm,Body,Body1),\n'),
%write(S,'   display(''groundPred1:Body1=''), display(Body1),nl,\n'),
write(S,'	groundPred2(LineTerm,Body1,Body2,V),\n'),
%write(S,'   display(''groundPred2:Body2=''), display(Body2), nl,\n'),
write(S,'	(Body2=true -> RL=Head;RL=..['':-'',Head,Body2]),\n'),
write(S,'	addNewRule(Tmp,RL,V),fail.\n\n'),

% model term: -----------------------------
write(S,'groundPred1(R, ((A:model(B)),Rest), Rest1) :- !,\n'),
%write(S,'    display(''groundPred1:A=''), display(A), nl,\n'),
write(S,'	(ground(A) -> true;grounderr(1)),\n'),
write(S,'	children(ChildModules),\n'),
write(S,'	memberChild(A,_,ChildModules,1),!,\n'),
%write(S,'	counter(N), incCounter,\n'),
write(S,'	term_to_string(B,StrB),\n'),
%write(S,'	B=N,\n'),
write(S,'	saveQualification(A,StrB),\n'),
write(S,'	groundPred1(R,Rest,Rest1).\n'),
% Card trem: -----------------------------
write(S,'groundPred1(R,((#(Up,@(Low,A))),Rest),Rest1):- !,\n'),
write(S,'	groundPred1(R,A,T1),\n'),
write(S,'	(T1=true -> grounderr(1);A1=(#(Up,(@(Low,T1))))),\n'),
write(S,'	groundPred1(R,Rest,T2),\n'),
write(S,'	(T2=true -> Rest1=A1;Rest1=(A1,T2)).\n'),
write(S,'groundPred1(R,((#(@(Low,A))),Rest),Rest1):- !,\n'),
write(S,'	groundPred1(R,A,T1),\n'),
write(S,'	(T1=true -> grounderr(1);A1=(#(@(Low,T1)))),\n'),
write(S,'	groundPred1(R,Rest,T2),\n'),
write(S,'	(T2=true -> Rest1=A1;Rest1=(A1,T2)).\n'),
write(S,'groundPred1(R,((#(Up,@(A))),Rest),Rest1):- !,\n'),
write(S,'	groundPred1(R,A,T1),\n'),
write(S,'	(T1=true -> grounderr(1);A1=(#(Up,(@(T1))))),\n'),
write(S,'	groundPred1(R,Rest,T2),\n'),
write(S,'	(T2=true -> Rest1=A1;Rest1=(A1,T2)).\n'),
write(S,'groundPred1(R,((#(@(A))),Rest),Rest1):- !,\n'),
write(S,'	groundPred1(R,A,T1),\n'),
write(S,'	(T1=true -> grounderr(1);A1=(#(@(T1)))),\n'),
write(S,'	groundPred1(R,Rest,T2),\n'),
write(S,'	(T2=true -> Rest1=A1;Rest1=(A1,T2)).\n'),

% weight term: ---------------------------
write(S,'groundPred1(R,((&(Up,^(Low,A))),Rest),Rest1):- !,\n'),
write(S,'	groundPred1(R,A,T1),\n'),
write(S,'	(T1=true -> grounderr(1);A1=(&(Up,(^(Low,T1))))),\n'),
write(S,'	groundPred1(R,Rest,T2),\n'),
write(S,'	(T2=true -> Rest1=A1;Rest1=(A1,T2)).\n'),

write(S,'groundPred1(_R,(=(:(_A,model(_B)),_N),_Rest), _Rest1) :- !,\n'),
write(S,'	grounderr(1).\n'),

% negated model term: -----------------------------
write(S,'groundPred1(_, (not(_:model(_)),_), _) :- !,\n'),
write(S,'	grounderr(1).\n'),
% basic trem: ----------------------------
write(S,'groundPred1(R,(A,Rest),Rest1) :- !,\n'),
write(S,'	groundPred1(R,Rest,T),\n'),
write(S,'	(T=true-> Rest1=A;Rest1=(A,T)).\n'),
% model term: -----------------------------
write(S,'groundPred1(_,(A:model(B)),true) :- !,\n'),
%write(S,'     display(''groundPred:A=''), display(A), nl,\n'),
write(S,'	(ground(A) -> true;grounderr(1)),\n'),
write(S,'	children(ChildModules),\n'),
write(S,'	memberChild(A,_,ChildModules,1),!,\n'),
%write(S,'	counter(N), incCounter,\n'),
write(S,'	term_to_string(B,StrB), \n'),
%write(S,'	B=N,\n'),
%write(S,'	assertz_fact(classvar(A,N)),\n'),
write(S,'	saveQualification(A,StrB).\n'),
% card term: -------------------------------------
write(S,'groundPred1(R,(#(Up,@(Low,A))),A1):-\n'),
write(S,'	groundPred1(R,A,T1),\n'),
write(S,'	(T1=true -> grounderr(1);A1=(#(Up,(@(Low,T1))))).\n'),
% weight term: ------------------------------------
write(S,'groundPred1(R,(&(Up,^(Low,A))),A1):-\n'),
write(S,'	groundPred1(R,A,T1),\n'),
write(S,'	(T1=true -> grounderr(1);A1=(&(Up,(^(Low,T1))))).\n'),

write(S,'groundPred1(_R,(=(:(_A,model(_B)),_N)), _Rest1) :- !,\n'),
write(S,'	grounderr(1).\n'),

% negated model trem: -----------------------------------
write(S,'groundPred1(_, (not(_:model(_))), _) :- !,\n'),
write(S,'	grounderr(1).\n'),
% basic term: ------------------------------------
write(S,'groundPred1(_,A,A).\n\n'),
%-------------------------------------------------------------

% groundPred2: -----------------------------------------------
write(S,'groundPred2(R, ((Q:B),Rest), Rest1,V) :- \n'),
write(S,'	B =.. [_|ArgList],\n'),
%write(S,'    display(''groundPred2:Q=''), display(Q), nl, read(_),\n'),
write(S,'	(var(Q) -> Arg=[Q|ArgList];Arg=ArgList),\n'),
write(S,'	tmpVarTerm(_,Arg,T),\n'),
write(S,'	groundTempVar(Q,B,T,V),\n'),
write(S,'	!, groundPred2(R,Rest,Rest2,_V),\n'),
write(S,'	(Rest2=true -> Rest1=T;Rest1=(T,Rest2)).\n'),

write(S,'groundPred2(R,((#(Up,@(Low,A))),Rest),Rest1,V):-\n'),
write(S,'	groundPred2(R,A,T1,V),\n'),
write(S,'	(T1=true -> A1=true;\n'),
write(S,'	(termDiff(A,T1,D),L1 is Low-D,U1 is Up-D,A1=(#(U1,(@(L1,T1)))))),\n'),
write(S,'	groundPred2(R,Rest,T2,_V1),\n'),
write(S,'	(T2=true -> Rest1=A1;(A1=true->Rest1=T2;Rest1=(A1,T2))).\n'),

write(S,'groundPred2(R,((&(Up,^(Low,A))),Rest),Rest1,V):-\n'),
write(S,'	groundPred2(R,A,T1,V),\n'),
write(S,'	(T1=true -> A1=true;\n'),
write(S,'	(termDiff(A,T1,D),L1 is Low-D,U1 is Up-D,\n'),
write(S,'	A1=(&(U1,(^(L1,T1)))))),\n'),
write(S,'	groundPred2(R,Rest,T2,_V1),\n'),
write(S,'	(T2=true -> Rest1=A1;(A1=true->Rest1=T2;Rest1=(A1,T2))).\n'),

write(S,'groundPred2(R,(=(:(A,B),N),Rest),Rest1,V) :- !,\n'),
write(S,'	B =.. [_|ArgList],\n'),
%write(S,'     display(''groundPred2:''),nl,\n'),
write(S,'	(var(A) -> Arg=[A|ArgList];Arg=ArgList),\n'),
write(S,'	tmpVarTerm(_,Arg,T),\n'),
write(S,'	groundTempVar(A,B,T,V),\n'),
write(S,'	!,groundPred2(R,Rest,Rest2,V),\n'),
write(S,'	(Rest2=true -> Rest1=(=(T,N));Rest1=(=(T,N),Rest2)).\n'),

write(S,'groundPred2(R,(not(=(:(A,B),N)),Rest),Rest1,V) :- !,\n'),
write(S,'	N1 is -N,\n'),
write(S,'	groundPred2(R,(=(:(A,B),N1),Rest), Rest1, V).\n'),

write(S,'groundPred2(R,(:(:(A,B),C), Rest),Rest1,V) :- !,\n'),
write(S,'	B =.. [_|ArgList],\n'),
write(S,'	(var(A) -> Arg=[A|ArgList];Arg=ArgList),\n'),
write(S,'	tmpVarTerm(_,Arg,T),\n'),
write(S,'	groundTempVar(A,B,T,V),\n'),
write(S,'	!, groundPred2(R,Rest,Rest2,V),\n'),
write(S,'	(Rest2=true -> Rest1=(:(T,C));Rest1=(:(T,C),Rest2)).\n'),

write(S,'groundPred2(R,(not(A:B),Rest), Rest1,V) :-\n'),
write(S,'	B =.. [_|ArgList],\n'),
write(S,'	(var(A) -> Arg=[A|ArgList];Arg=ArgList),\n'),
write(S,'	tmpVarTerm(_,Arg,T),\n'),
write(S,'	groundTempVar(A,B,T,V),\n'),
%write(S,'	display(''T=''), display(T),nl,\n'),
%write(S,'	display(''Rest=''), display(Rest),nl,\n'),
%write(S,'	display(''R=''), display(R),nl,\n'),
%write(S,'   read(_),\n'),
write(S,'	!,groundPred2(R,Rest,Rest2,V),\n'),
write(S,'	(Rest2=true -> Rest1=not(T);Rest1=(not(T),Rest2)).\n'),
%write(S,'    display(Rest1), nl, read(_).\n'),

write(S,'groundPred2(R,(H,Rest),Rest1,_V) :- !,\n'),
%write(S,'   display(''in groundpred2_2.''),nl,\n'),
write(S,'	groundPred2(R,Rest,T,_V), \n'),
%write(S,'   display(''T=''),display(T),nl,\n'),
write(S,'	(T=true-> Rest1=H;Rest1=(H,T)).\n'),

write(S,'groundPred2(_R,(Q:B),T,V) :- \n'),
write(S,'	B =.. [_|ArgList],\n'),
write(S,'	(var(Q) -> Arg=[Q|ArgList];Arg=ArgList),\n'),
write(S,'	tmpVarTerm(_,Arg,T),\n'),
write(S,'	groundTempVar(Q,B,T,V),!.\n'),

%write(S,'	(qualify(A,Q) -> true;A=Q),\n'),
%write(S,'	children(ChildModules),\n'),
%write(S,'	memberChild(A,F,ChildModules,Type),!,\n'),
%%write(S,'	display(''F,Type=''), display(F), display(Type),nl,\n'),
%write(S,'	!,groundOnePred(R,Q,F,B,Type).\n'),

write(S,'groundPred2(R,(#(Up,@(Low,A))),A1,V):-\n'),
write(S,'	groundPred2(R,A,T1,V),\n'),
write(S,'	(T1=true -> A1=true;\n'),
write(S,'	(termDiff(A,T1,D),L1 is Low-D,U1 is Up-D,\n'),
write(S,'	A1=(#(U1,(@(L1,T1)))))).\n'),

write(S,'groundPred2(R,(&(Up,^(Low,A))),A1,V):-\n'),
write(S,'	groundPred2(R,A,T1,V),\n'),
write(S,'	(T1=true -> A1=true;\n'),
write(S,'	(termDiff(A,T1,D),L1 is Low-D,U1 is Up-D,\n'),
write(S,'	A1=(&(U1,(^(L1,T1)))))).\n'),

write(S,'groundPred2(_R,(=(:(A,B),N)),(=(T,N)),V) :- !,\n'),
write(S,'	B =.. [_|ArgList],\n'),
write(S,'	(var(A) -> Arg=[A|ArgList];Arg=ArgList),\n'),
write(S,'	tmpVarTerm(_,Arg,T),\n'),
write(S,'	groundTempVar(A,B,T,V),\n'),
write(S,'	!.\n'),

write(S,'groundPred2(R,(not(=(:(A,B),N))),Rest1,V) :-\n'),
write(S,'	N1 is -N,\n'),
write(S,'	groundPred2(R,(=(:(A,B),N1)), Rest1,V).\n'),

write(S,'groundPred2(_R,(:(:(A,B),C)),(:(T,C)),V) :- !,\n'),
write(S,'	B =.. [_|ArgList],\n'),
write(S,'	(var(Q) -> Arg=[Q|ArgList];Arg=ArgList),\n'),
write(S,'	tmpVarTerm(_,Arg,T),\n'),
write(S,'	groundTempVar(A,B,T,V),\n'),
write(S,'	!.\n'),

write(S,'groundPred2(_R,(not(A:B)), (not(T)),V) :-\n'),
write(S,'	B =.. [_|ArgList],\n'),
write(S,'	(var(A) -> Arg=[A|ArgList];Arg=ArgList),\n'),
write(S,'	tmpVarTerm(_,Arg,T),\n'),
write(S,'	groundTempVar(A,B,T,V),!.\n'),

write(S,'groundPred2(_R,A,A,_V).\n\n'),

% groundTempVar  ------------------------------
write(S,'groundTempVar(A,B,T,V) :-\n'),
%write(S,'   display(''groundTempVar''), nl,'),
write(S,'	groundPred3(T,(A:B)), \n'),
write(S,'	getTmp(Tmp),\n'),
%write(S,'   display(''groundTempVar:T=''),display(T), read(_),nl,\n'),
write(S,'	addNewRule(Tmp,T,V),fail.\n'),
write(S,'groundTempVar(_,_,_,_V).\n\n'),
% ------------------------------------------------
% groundPred3: ---------------------------------------------
write(S,'groundPred3(R, (Q:B)) :- \n'),
%write(S,'	display(''groundPred3''),nl,\n'),
%write(S,'	(qualify(A,Q) -> true;A=Q),\n'),
write(S,'	(var(Q) -> (term_to_string(Q,StrQ),qualify(A,StrQ));A=Q),\n'),
write(S,'	children(ChildModules),\n'),
%write(S,'     display(ChildModules),nl,\n'),
%write(S,'     display(''F=''),display(F),nl,\n'),
%write(S,'     display(''A=''),display(A),nl,\n'),
write(S,'	memberChild(A,F,ChildModules,Type),!,\n'),
%write(S,'	display(''F,Type=''),display(F),display('' ''),display(Type),nl,\n'),
write(S,'	!,groundOnePred(R,Q,F,B,Type).\n'),
% ------------------------------------------------

write(S,'memberChild(A,F,ChildList,0) :- member(prolog(A,F),ChildList),!.\n'),
write(S,'memberChild(A,F,ChildList,1) :- member(asp(A,F),ChildList).\n\n'),

% IntName: Interface Name, as in :- #use_asp(IntName, ASP_File_Name).
% ModuleName: Module Name, as in :- module(ModuleName,...).
% handles prolog programs calls:
write(S,'groundOnePred(R,IntName,ModuleName,B,0) :-\n'),
write(S,'	B =.. [Pred|ArgList],\n'),
%write(S,'    display(''groundOnePred:prolog:pred''),nl,\n'),
%write(S,'    display(''ModuleName=''),display(ModuleName),nl,\n'),
%write(S,'    display(''B=''), display(B), nl, read(_),\n'),
write(S,'	findall(B,ModuleName:B,L),\n'),
%%write(S,'  display(''L=''),display(L), nl,read(_),\n'),
write(S,'	list2set(L,L1),\n'),
%write(S,'  display(''L1=''),display(L1), nl,read(_),\n'),
write(S,'	groundList(R,Pred,ArgList,L1),\n'),
write(S,'	functor(R,PRED,N),\n'),
write(S,'	tmpST(ST),\n'),
%write(S,'   display(bbbbbbbbbbbbb),nl,\n'),
write(S,'	(ST:symbolTable(IntName,Pred,PRED,N,0) -> true;\n'),
write(S,'	ST:addSymbolTable(IntName,Pred,PRED,N,0)).\n'),

% particular model, as in Q:pred
write(S,'groundOnePred(R,QC,ModuleName,B,1) :-\n'),   
write(S,'	var(QC),!,\n'),
%write(S,'display(''groundOnePred2:ModuleName=''),display(ModuleName),nl,\n'),
%write(S,'   display(''groundOnePred2:QC=''),display(QC), nl,\n'),
%write(S,'   display(''groundOnePred2:B=''),display(B), nl,\n'),
%write(S,'    display(''groundOnePred:Q:pred''),nl,\n'),
write(S,'	module_concat(ModuleName,model(Q),AA),\n'),
write(S,'	''$meta_call''(AA),\n'),      % Q is assigned a model name
write(S,'	Q:getTrueAtoms(L),\n'),
%write(S,'   display(''groundOnePred1:L=''),display(L),nl,\n'),
write(S,'	B =.. [Pred|ArgList],\n'),
write(S,'	groundList(R,Pred,ArgList,L),\n'),
write(S,'	module_concat(ModuleName,aspModel(_,ModelNo,Q),G1),\n'),
write(S,'	''$meta_call''(G1),\n'),
%write(S,'   display(''groundOntPred:ModelNo=''),display(ModelNo),nl,\n'),
write(S,'	R =.. [_|Arg2],\n'),
write(S,'	Arg2=[ModelNo|_],\n'),
%write(S,'   display(''Arg2=''), display(Arg2),nl,\n'),
%write(S,'   display(''R=''),display(R), nl,\n'),
write(S,'	functor(R,PRED,ArgNo),\n'),
write(S,'	tmpST(ST),\n'),
%write(S,'   display(bbbbbbbbbbbbbcccccccccccccccc),nl,\n'),
%write(S,'	module_concat(ModuleName,aspFileName(FF),G2),\n'),
%write(S,'	''$meta_call''(G2),\n'),
%write(S,'	absolute_file_name(FF,FF1),\n'),
%write(S,'	no_path_file_name(FF1,FF2),\n'),
write(S,'	(ST:symbolTable(aspm(Q,ModelNo,ModuleName),Pred,PRED,ArgNo,1) ->'),
write(S,'true;\n'),
write(S,'	ST:addSymbolTable(aspm(Q,ModelNo,ModuleName),Pred,PRED,ArgNo,1)).\n'),

% skeptical model, as in asp:pred
write(S,'groundOnePred(R,_IntName,ModuleName,B,1) :- !,\n'), 
write(S,'	module_concat(ModuleName,getAllSkepTrue(L),AA),\n'),
%write(S,'   display(''groundOnePred2:ModuleName=''),display(ModuleName),nl,\n'),
%write(S,'   display(''groundOnePred2:IntName=''),display(IntName),nl,\n'),
%write(S,'    display(''B=''),display(B),\n'),
%write(S,'   display(''AA=''),display(AA), nl,\n'),
%write(S,'    display(''groundOnePred:asp:pred''),nl,\n'),
write(S,'	''$meta_call''(AA),\n'),
%write(S,'   display(''groundPred2:L=''),display(L), nl, read(_),\n'),
write(S,'	B =.. [Pred|ArgList],\n'),
%write(S,'   display(''groundOnePred:B=''),display(B), nl, read(_),\n'),
write(S,'	groundList(R,Pred,ArgList,L),\n'),
write(S,'	functor(R,PRED,N),\n'),
write(S,'	tmpST(ST),\n'),
write(S,'	module_concat(ModuleName,stateSkep(_,SK),G1),\n'),
write(S,'	''$meta_call''(G1),\n'),
%write(S,'	module_concat(ModuleName,aspFileName(FF),G2),\n'),
%write(S,'	''$meta_call''(G2),\n'),
%write(S,'	absolute_file_name(FF,FF1),\n'),
%write(S,'	no_path_file_name(FF1,FF2),\n'),
write(S,'	(ST:symbolTable(aspm(SK,0,ModuleName),Pred,PRED,N,1) -> true;\n'),
write(S,'	ST:addSymbolTable(aspm(SK,0,ModuleName),Pred,PRED,N,1)).\n\n'),

write(S,'groundList(R,Pred,ArgList,[H|_]) :-\n'),
write(S,'	H =.. [Pred|Ta],\n'),
%write(S,'   display(Ta),nl,\n'),
%write(S,'   display(''groundList:''),display(ArgList),nl,display(Ta),nl,\n'),
write(S,'	start_ground(ArgList, Ta, R).\n'),
write(S,'groundList(R,Pred,ArgList,[_|T]) :-\n'),
%write(S,'     display(''in second groundList''),nl,\n'),
write(S,'	groundList(R,Pred,ArgList,T).\n'),

write(S,'start_ground([H|T],[H1|T1],R) :-\n'),
write(S,'	ground(H), !,\n'),
%write(S,'    display('' ---> ground H=.''), display(H), nl,\n'),
write(S,'	H=H1,\n'),
write(S,'	start_ground(T,T1,R).\n\n'),

write(S,'start_ground([H|T],[H1|T1],R) :-\n'),
write(S,'	var(H),!,\n'),
%write(S,' display(''aaaaaaaaaaaaaa''),\n'),
%write(S,'	disp_list([''start_ground,H='',H, '' var,H1='',H1,nl]),\n'),
write(S,'	H=H1,\n'),
write(S,'	start_ground(T,T1,R).\n'),
write(S,'start_ground([], [], _).\n\n'),
%write(S,'       display(''--------------------empty lists reached''),nl.\n\n'),

write(S,'addNewRule(Tmp, R,V) :-\n'),
% write R in file Tmp, revese format, then write in Tmp.
%write(S,'	varNames(V),\n'),
%write(S,'  display(''addNewRule:''), nl,\n'),
%write(S,'  display(''V=''), display(V),nl,\n'),
%write(S,'    display(''R=''), display(R),\n'),
write(S,'	change_names(V),\n'),
%write(S,'    display(''R=''), display(R),nl,\n'),
%write(S,'   display(''bbbbbbbbbbbbbbbbbbbb''),nl,\n'),
write(S,'	reverseFormat(R,Str),\n'),
write(S,'	retractall_fact(ruleString(_)),\n'),
%write(S,'	emptyRuleString(Tmp),\n'),
%write(S,'    write_string(Str), nl, read(_),\n'),
write(S,'	write_string(Tmp,Str), write(Tmp,''.''), nl(Tmp),!.\n\n'),

write(S,'deleteGroundASP :-\n'),
write(S,'	aspFileName(ASPFile),\n'),
%write(S,'	aspFileName(ASPFile,ASPTmp,_),\n'),
write(S,'	atom_concat(ASPFile,''1'',ASPTmp),\n'),
write(S,'	(file_exists(ASPTmp)->delete_file(ASPTmp);true).\n\n'),

write(S,'incCounter :- counter(N), !,N1 is N+1,\n'),
write(S,'	retractall_fact(counter(_)),\n'),
write(S,'	assertz_fact(counter(N1)).\n'),
write(S,'incCounter :- reset_counter.\n'),
write(S,'reset_counter :- retractall_fact(counter(_)),\n'),
write(S,'	assertz_fact(counter(1)).\n\n'),

write(S,'grounderr(1) :- \n'),
write(S,'	this_module(M),\n'),
write(S,'	aspFileName(AspF),\n'),
%write(S,'	aspFileName(AspF,_,_),\n'),
write(S,'	Err=''grounding asp module: '',\n'),
write(S,'	atom_concat(Err, AspF, Err1),\n'),
write(S,'	atom_concat(Err1,'' at line: '', Err2),\n'),
write(S,'	lineNoAtom(_,ANo),\n'),
write(S,'	atom_concat(Err2, ANo, Err3),\n'),
write(S,'	err(0,M,Err3,0).\n'),


write(S,'prtSymbolTable :- \n'),
write(S,'	tmpST(ST), ST:prtSymbolTable.\n\n'),
%write(S,'		symbolTable(X,Y,Z,N,C),\n'),
%write(S,'		display(X), display('' ''),\n'),
%write(S,'		display(Y), display(''/''),'),
%write(S,'	        display(N), display('' ''),\n'),
%write(S,'		display(Z), display(''/''),'),
%write(S,'	        display(N), display('' ''),\n'),
%write(S,'		display(C), display('' ''),\n'),
%write(S,'		nl, fail.\n'),
%write(S,'	prtSymbolTable.\n'),


write(S,'saveQualificatoin(A,B) :- qualify(A,B),!.\n'),
write(S,'saveQualification(A,B) :- assertz_fact(qualify(A,B)).\n\n'),

write(S,'saveTmp(Tmp) :- retractall_fact(tmpFile(_)), \n'),
write(S,'	assertz_fact(tmpFile(Tmp)).\n'),
write(S,'getTmp(Tmp) :- tmpFile(Tmp).\n\n').

%write(S,'qualifyIntName(A,B) :- qualify(A,B), display(B), nl, read(_),ClassVar==B,!.\n'),
%write(S,'qualiftIntName(_,_) :- \n'),
%write(S,'	this_module(M),\n'),
%write(S,'	aspFileName(F),\n'),
%write(S,'	atom_concat('' in ASP '', F, F1),\n'),
%write(S,'	atom_concat(F1, '', qualification error. '',F2),\n'),
%write(S,'	err(_,M,F2,0).\n\n').



%write(S,'memberInChildren(UserInt, [P|_]) :-\n'),
%write(S,'	(P=asp(UserInt,ModuleInt);P=prolog(UserInt,ModuleInt)).\n'),
%write(S,'memberInChildren(A,[_|T]) :-\n'),
%write(S,'	memberInChildren(A,T).\n\n').



