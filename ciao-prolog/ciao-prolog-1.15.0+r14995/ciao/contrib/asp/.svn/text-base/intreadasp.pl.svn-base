% Zaineb: Spet. 12 11:30 Tues.

:- module(intreadasp,[buildReadAsp/1]).

buildReadAsp(S) :-

write(S,':- data prev/1, currLine/1, ruleString/1.\n'),
write(S,':- data eor/1.\n'),
write(S,':- data lineNo/1.\n'),
write(S,':- data last_char/1.\n'),
write(S,':- data par/1, doubleq/1.\n'),

write(S,'prev([]).\n\n'),

%	open('asp1.lp', read, S),
%	read_file(S,LineTerm, V),
%	(LineTerm=end_of_file -> true;fail),
%	 close(S).

write(S,'read_file(S, LineTerm, V) :-\n'),
write(S,'	initReadASP,\n'),
write(S,'	repeat,\n'),
write(S,'	get_line(S, String),\n'),
write(S,'	(String=[]->assertz_fact(ruleString([]));true),\n'),
%	(String=end_of_file -> display(String);write_string(String)), nl,
write(S,'	splitLine(String),\n'),
%	display('CurrLine: \n'),
%	prtCurrLine,
%	display('-----------------------------\n'),
write(S,'	(String=end_of_file -> (LineTerm=end_of_file,V=[]);\n'),
write(S,'	    makeTerm(LineTerm,V)).\n\n'),

write(S,'splitLine(end_of_file) :- !.\n'),
write(S,'splitLine([]) :- !.\n'),
write(S,'splitLine(String) :-\n'),
%	display('Prev:'), nl,
%	prtPrev,
%	display('------------------\n'),
write(S,'	prev(Str),\n'),
write(S,'	save_prev([]),\n'),
write(S,'	append(Str, String, String1),\n'),
write(S,'	resetDoubleQ, resetPar, \n'),
write(S,'	(doubleq(0)-> rem_start_space(String1,String2);true),\n'),
%	display('splitLine: String2='), write_string(String2),nl,
write(S,'	check_end_term(String2, String3, Rest),\n'),
%	display('splitLine: String3='), write_string(String3),nl,
%	display('splitLine: Rest='), write_string(Rest),nl,
%	(eor(1) -> display('eor(1)');display('eor(0)')), nl,
write(S,'	(eor(1) -> (append("(",String3,String4),\n'),
write(S,'	assertz_fact(currLine(String4)),\n'),
write(S,'	save_eor(0));\n'),
write(S,'	    save_prev(String3)),\n'),
write(S,'	splitLine(Rest).\n\n'),

write(S,'makeTerm(LineTerm, V) :-\n'),
write(S,'	currLine(Str),\n'),
write(S,'	makePrologTerm(Str, LineTerm,V).\n\n'),
write(S,'makeTerm(_,_) :- retractall_fact(currLine(_)), !, fail.\n\n'),

write(S,'makePrologTerm(Str, LineTerm, V) :- \n'),
write(S,'	convert2prologTerm(Str,Str1),\n'),
%write(S,'     display(''makeTerm:Str1= ''), write_string(Str1),nl,\n'),
write(S,'	convert_term(Str1,LineTerm,V),!.\n'),

% convert string into either atom or term.
write(S,'convert_term(String, Term,_) :-\n'),
%	display('1\n'),
write(S,'	append("(#const ", Str1, String), !,\n'),
%write(S,'	name(Term, String).\n'),
write(S,'	append("''#const''(", Str1, Str2),\n'),
write(S,'	!, string_to_term(Str2,Term).\n'),
write(S,'convert_term(String, Term,_) :-\n'),
%	display('1\n'),
write(S,'	append("(#hide ", Str1, String), !,\n'),
%write(S,'	name(Term, String).\n'),
write(S,'	append("''#hide''(", Str1, Str2),\n'),
write(S,'	!, string_to_term(Str2,Term).\n'),
write(S,'convert_term(String, Term,_) :-\n'),
%	display('1\n'),
write(S,'	append("(#show ", Str1, String), !,\n'),
%write(S,'	name(Term, String).\n'),
write(S,'	append("''#show''(", Str1, Str2),\n'),
write(S,'	!, string_to_term(Str2,Term).\n'),
write(S,'convert_term(String, Term,_) :-\n'),
%	display('1\n'),
write(S,'	append("(#show ", Str1, String), !,\n'),
%write(S,'	name(Term, String).\n'),
write(S,'	append("''#show''(", Str1, Str2),\n'),
write(S,'	!, string_to_term(Str2,Term).\n'),
write(S,'convert_term(String, Term,_) :-\n'),
%	display('1\n'),
write(S,'	append("(#weight ", Str1, String), !,\n'),
%write(S,'	name(Term, String).\n'),
write(S,'	append("''#weight''(", Str1, Str2),\n'),
write(S,'	!, string_to_term(Str2,Term).\n'),
write(S,'convert_term(String, Term,_) :-\n'),
%	display('1\n'),
write(S,'	append("(#weight ", Str1, String), !,\n'),
%write(S,'	name(Term, String).\n'),
write(S,'	append("''#weight''(", Str1, Str2),\n'),
write(S,'	!, string_to_term(Str2,Term).\n'),

write(S,'convert_term(String, Term,_) :-\n'),
%write(S,'	display(''2''),nl,\n'),
%write(S,'       write_string(String),nl,\n'),
write(S,'	append("(compute ", S1, String), !,\n'),
write(S,'	append(N,S0,S1),\n'),
%write(S,'	write_string(S0), nl,\n'),
%write(S,'	write_string(N), nl,\n'),
write(S,'	append("^",S2,S0),\n'),
%write(S,'	write_string(S2), nl,\n'),
write(S,'	append(S3,"#).",S2),\n'),
%write(S,'	write_string(S3), nl,\n'),
write(S,'	append(S3,".",S4),\n'),
%write(S,'       write_string(S4),nl,\n'),
write(S,'	string_to_term(S4,T3),\n'),
write(S,'	read_from_string_atmvars(N,NT),\n'),
%	display('NT='),display(NT), nl,
write(S,'	(N=[]-> Term=compute(#(^(T3)));Term=compute(#(^(NT,T3)))).\n'),
write(S,'convert_term(String,Term,_) :-\n'),
%	display('3\n'),
write(S,'	append("(#import",Str1,String),\n'),
write(S,'	append("(''#import''",Str1,Str2),\n'),
write(S,'	!,string_to_term(Str2, Term).\n'),
write(S,'convert_term(String,Term,_V) :-\n'),
%	display('4\n'),
%	display(String), nl,
%	write_string(String), nl, read(_),
write(S,'	append("(#use_asp",Str1,String),\n'),
write(S,'	append("(''#use_asp''",Str1,Str2),\n'),
write(S,'	!,string_to_term(Str2, Term).\n'),
write(S,'convert_term(String, Term,V) :-\n'),
%write(S,'  display(''convert_term:String=''), write_string(String), nl,\n'),
write(S,'	strToTerm(String, Term,V).\n'),
%   display('Term='),
%   prt_term(Term), nl.

% prev data handler:
write(S,'rem_prev :- retractall_fact(prev(_)), !.\n'),
write(S,'rem_prev.\n\n'),

write(S,'save_prev(String) :- rem_prev, assertz_fact(prev(String)), !.\n\n'),
% -----------------------------------------------
% eor handler:
write(S,'rem_eor :- retractall_fact(eor(_)), !.\n'),
write(S,'rem_eor.\n\n'),

write(S,'save_eor(X) :- rem_eor, assertz_fact(eor(X)).\n\n'),
% ------------------------------------------------

% remove the begining space and stop at the first non-space char.
write(S,'rem_start_space([], []) :- !.\n'),
write(S,'rem_start_space([C1|T1], T2) :-\n'),
write(S,'	(space(C1);tabb(C1)), !,\n'),
write(S,'	 rem_start_space(T1, T2).\n'),
write(S,'rem_start_space(T1, T1).\n\n'),
%---------------------------------------------

% check end of rule exists..........
write(S,'check_end_term([], [], []).\n'),
write(S,'check_end_term([0''"|T1], [0''"|T2], T3) :- !,\n'),
write(S,'      change_doubleq,\n'),
write(S,'      check_end_term(T1, T2, T3).\n'),
write(S,'check_end_term([0''(|T1], [0''(|T2], T3) :- !,\n'),
write(S,'      inc_par,\n'),
write(S,'      check_end_term(T1, T2, T3).\n'),
write(S,'check_end_term([0'')|T1], [0'')|T2], T3) :- !,\n'),
write(S,'      dec_par,\n'),
write(S,'      check_end_term(T1, T2, T3).\n'),
write(S,'check_end_term([0''%|T],[],[]) :- \n'),
write(S,'	doubleq(0),!,\n'),
write(S,'	assertz_fact(ruleString([0''%|T])).\n'),
write(S,'check_end_term([0''.], [0''),0''.], []) :-\n'),
write(S,'	 doubleq(0), \n'),
write(S,'	 par(0), !, \n'),
write(S,'	 save_eor(1).\n'),
write(S,'check_end_term([0''., C2|T], [0''),0''.], T) :-\n'),
write(S,'      (space(C2);tabb(C2)),\n'),
%       (doubleq(0)-> display('doubleq(0)');display('doubleq(1)')), nl,
write(S,'	doubleq(0),\n'),
%	(par(0)-> display('par(0)');display('par(1)')), nl,
write(S,'	par(0), !,\n'),
write(S,'	save_eor(1).\n'),
write(S,'check_end_term([C1|T1], [C1|T2], T3) :-\n'),
write(S,'	!, check_end_term(T1, T2, T3).\n\n'),
% -----------------------------------------------

write(S,'convert2prologTerm(String,String1) :-\n'), 
write(S,'     convert_special(String,String1).\n\n'),

write(S,'convert_special([], []).\n'),
write(S,'convert_special([0''{|T], [0''^|T1]) :- !,\n'),
write(S,'	convert_special(T, T1).\n'),
write(S,'convert_special([0''}|T], [0''#|T1]) :- !,\n'),
write(S,'	convert_special(T, T1).\n'),
write(S,'convert_special([0''[|T], [0''&|T1]) :- !,\n'),
write(S,'	convert_special(T, T1).\n'),
write(S,'convert_special([0'']|T], [0''@|T1]) :- !,\n'),
write(S,'	convert_special(T, T1).\n'),
write(S,'convert_special([0''"|T], [H,0''\~|T1]) :- \n'),
write(S,'	doubleq(0), !,\n'),
write(S,'	single_quote(H),\n'),
write(S,'	change_doubleq,\n'),
write(S,'	convert_special(T,T1).\n'),
write(S,'convert_special([0''"|T], [0''~,H|T1]) :- \n'),
write(S,'	doubleq(1), !,\n'),
write(S,'	single_quote(H),\n'),
write(S,'	change_doubleq,\n'),
write(S,'	convert_special(T,T1).\n'),
write(S,'convert_special([H|T], [H|T1]) :-\n'),
write(S,'	 convert_special(T, T1).\n\n'),
%-------------------------------------------------

write(S,'resetDoubleQ :- remDoubleQ, assertz_fact(doubleq(0)).\n'),
write(S,'change_doubleq :- doubleq(X), X1 is 1-X,\n'),
write(S,'	remDoubleQ,\n'),
write(S,'	assertz_fact(doubleq(X1)).\n'),
write(S,'remDoubleQ :- retractall_fact(doubleq(_)), !.\n'),
write(S,'remDoubleQ.\n\n'),

write(S,'resetPar :- remPar, assertz_fact(par(0)).\n'),
write(S,'inc_par :- par(X), X1 is X+1,\n'),
write(S,'	retract_fact(par(X)),\n'),
write(S,'	assertz_fact(par(X1)).\n'),
write(S,'dec_par :- par(X), X>0, !, X1 is X-1,\n'),
write(S,'	remPar,\n'),
write(S,'	assertz_fact(par(X1)).\n'),
write(S,'dec_par :- message([''Error in reading file'']), fail.\n'),
write(S,'remPar :- retractall_fact(par(_)), !.\n'),
write(S,'remPar.\n\n'),

%----------------------------------------------------------------------
% Predicates to handle the line number of ASP module.
write(S,'setLineNo(N) :- retractall_fact(lineNo(_)),\n'),
write(S,'	assertz_fact(lineNo(N)).\n'),
write(S,'incLineNo :- lineNo(N), N1 is N+1,\n'),
write(S,'	setLineNo(N1).\n\n'),

write(S,'initReadASP :-\n'),
write(S,'	setLineNo(1),\n'),
write(S,'	resetDoubleQ,\n'),
write(S,'	resetPar,\n'),
write(S,'	save_eor(0),\n'),
write(S,'	save_prev([]).\n\n'),

write(S,'prtRuleString :-\n'),
write(S,'	ruleString(Str),\n'),
write(S,'	write_string(Str), nl,\n'),
write(S,'	fail.\n'),
write(S,'prtRuleString.\n\n'),

write(S,'prtPrev :-\n'),
write(S,'	prev(Str),\n'),
write(S,'	write_string(Str), nl,\n'),
write(S,'	fail.\n'),
write(S,'prtPrev.\n\n'),

write(S,'prtCurrLine :-\n'),
write(S,'	currLine(Str),\n'),
write(S,'	write_string(Str), nl,\n'),
write(S,'	fail.\n'),
write(S,'prtCurrLine.\n\n').

