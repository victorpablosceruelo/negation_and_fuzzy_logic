:- module(intmisc, [buildMisc/1]).

buildMisc(S) :-

write(S,'% pos: determines if first parameter string in the second parameter string,'), nl(S),
write(S,'% if so, then third parameter is the string before and the last parameter'), nl(S),
write(S,'% is the string after. e.g. pos("omar", "hi omar nabil", S1, S2), then'), nl(S),
write(S,'% S1="hi " and S2=" nabil".xs'), nl(S),
write(S,'pos([H1|T1], [H1|T2], [], T) :- '), nl(S),
write(S,'	check_true_string(T1, T2, T), !.'), nl(S),
write(S,'pos(L, [H2|T2], [H2|T3], A) :- pos(L, T2, T3, A).'), nl(S),
write(S,''), nl(S),
write(S,'check_true_string([], T, T).'), nl(S),
write(S,'check_true_string([H1|T1], [H1|T2], T) :- '), nl(S),
write(S,'        check_true_string(T1, T2, T).'), nl(S),
write(S,'% --------------------------------------------------------------'), nl(S),
% We do not need: cmp, set_ftime, rem_mftime
write(S,''), nl(S),
write(S,'cmp :- aspFileName(X),\n'),
write(S,'       modif_time(X,T),\n'),
write(S,'       mftime(T).\n\n'),

write(S,'set_ftime :- aspFileName(X),\n'),
write(S,'       modif_time(X,T),\n'),
write(S,'       rem_mftime,\n'),
write(S,'       assertz(mftime(T)).\n\n'),

write(S,'rem_mftime :- retractall(mftime(_)),!.\n'),
write(S,'rem_mftime.\n\n'),



write(S,''), nl(S),
write(S,'% concat a list of atoms all together'), nl(S),
write(S,'atoms_concat([], '''') :- !.'), nl(S),
write(S,'atoms_concat([[]|T], C) :- '), nl(S),
write(S,'       atoms_concat(T,C),!.'), nl(S),
write(S,'atoms_concat([H|T], C) :-'), nl(S),
write(S,'	atoms_concat(T, C1),'), nl(S),
write(S,'	atom_concat(H, C1, C).'), nl(S),
write(S,''), nl(S),
write(S,'% append to file new rules in case of assert.'), nl(S),
write(S,'append_to_file(_, []).'), nl(S),
write(S,'append_to_file(S, [H|T]) :-'), nl(S),
write(S,'	makeV(1,V),\n'),
write(S,'	assignV(H,V),\n'),
write(S,'   reverseFormat(H, String),'), nl(S),
write(S,'   write_string(S, String),'), nl(S),
write(S,'   write(S, ''.''),'), nl(S),
write(S,'   nl(S),'), nl(S),
write(S,'   append_to_file(S, T).'), nl(S),
write(S,'% -------------------------------------------'), nl(S),

write(S,'cnv_atom(N, Atom) :- number(N), !, number_atom(N,Atom).\n'),
write(S,'cnv_atom(N, Atom) :- string(N), !, atom_codes(Atom, N).\n'),
write(S,'cnv_atom(A, A).\n\n'),

write(S,'cnv2atom_list([],[]).\n'),
write(S,'cnv2atom_list(String,Atom) :-\n'),
write(S,'	get_each_atom(String, String1, Rest),\n'),
write(S,'	name(Atom1, String1),\n'),
write(S,'	cnv2atom_list(Rest,Atom2),\n'),
write(S,'	append([Atom1],Atom2,Atom).\n\n'),

write(S,'get_each_atom(String, String1, Rest) :-\n'),
write(S,'    pos(" ", String, String1, Rest),!.\n'),
write(S,'get_each_atom(String,String,[]).\n\n'),

write(S,'% append atom_list1 to atom_list2 that are not computed.'), nl(S),
write(S,'my_append([], A, A).'), nl(S),
write(S,'my_append([H|T], A, L) :- computed(H), !, my_append(T, A, L).'), nl(S),
write(S,'my_append([H|T], A, L) :- member(H, A), !, my_append(T, A, L).'), nl(S),
write(S,'my_append([H|T], A, [H|T1]) :- my_append(T, A, T1).'), nl(S),
write(S,''), nl(S),
write(S,'%change number to atom'), nl(S),
write(S,'number_atom(N, A) :- '), nl(S),
write(S,'	number_codes(N, S),'), nl(S),
write(S,'	atom_codes(A, S).'), nl(S),
write(S,''), nl(S),
write(S,'% writting comma'), nl(S),
write(S,'wrt_comma(0, _, _).'), nl(S),
write(S,'wrt_comma(1, S1, S2) :- write(S1, '',''), write(S2, '','').'), nl(S),
write(S,''), nl(S),
write(S,'prt_comma(0,'''').'), nl(S),
write(S,'prt_comma(1,'','').'), nl(S),
write(S,''), nl(S),

write(S,''), nl(S),
write(S,'del_file(X) :- file_exists(X), delete_file(X), !.'), nl(S),
write(S,'del_file(_).'), nl(S),
write(S,''), nl(S),
% -------------------------------------------------------------

write(S,'% predicate will work on backtrack. --------'), nl(S),
write(S,'und(X) :- ''$undo_goal''(call(X)).'), nl(S),
write(S,'% ------------------------------------------'), nl(S),nl(S),

write(S,'disp_list([]).\n'),
write(S,'disp_list([H|T]) :- var(H), !,display(H), disp_list(T).\n'),
write(S,'disp_list([nl|T]) :- !, nl, disp_list(T).\n'),
write(S,'disp_list([H|T]) :- string(H), !, write_string(H), disp_list(T).\n'),
write(S,'disp_list([H|T]) :- display(H), disp_list(T).\n\n'),
% ----------------------------------------------------------

write(S,'empty_list([]) :- !, fail.\n'),
write(S,'empty_list(_).\n\n'),

% -------------------------------------------------------------------

write(S,'put_comma(_, 1).\n'),
write(S,'put_comma(S, A) :- A>1, write(S, '','').\n\n'),

write(S,'writeList2File(_,[],_).\n'),
write(S,'writeList2File(S,[H|T],C) :- \n'),
write(S,'	put_comma(S,C),\n'),
write(S,'	write(S,H),\n'),
write(S,'	writeList2File(S,T,1).\n\n'),
% --------------------------------------------------------------------

write(S,'list2set([],[]).\n'),
write(S,'list2set([H|T],R) :- member(H,T), !,list2set(T,R).\n'),
write(S,'list2set([H|T],[H|R]) :- list2set(T,R).\n\n'),
% --------------------------------------------------------------------

write(S,'change_names([]).\n'),
write(S,'change_names([H=H1|T]) :-\n'),
write(S,'	var(H1),!,\n'),
write(S,'	H=H1,\n'),
write(S,'	change_names(T).\n'),
write(S,'change_names([_|T]) :- change_names(T).\n\n'),

write(S,':- data varNames/1.\n\n'),

write(S,'% string-->term and term-->string.'), nl(S),
write(S,'strToTerm(S,T,V) :-'), nl(S),
%write(S,'   display(''strToTerm:''),nl,\n'),
write(S,'        mktemp(''t2sXXXXXX'',TMP),'), nl(S),
write(S,'        open_output(TMP,Out),'), nl(S),
write(S,'        write_string(S), '), nl(S),
write(S,'%	write(''.''),'), nl(S),
write(S,'        close_output(Out),'), nl(S),

write(S,'        open_input(TMP, In),'), nl(S),
write(S,'        read_term(T,[variable_names(V)]),'), nl(S),
%write(S,'     read(T),\n'),
write(S,'        close_input(In),\n'),
%write(S,'   display(''strToTerm:T=''), display(T), nl,\n'),
%write(S,'   display(''V=''), display(V), nl,\n'),
%write(S,'   read(_),\n'),
write(S,'        delete_file(TMP).\n\n'),

write(S,'% string-->term and term-->string.'), nl(S),
write(S,'string_to_term(S,T) :-'), nl(S),
%write(S,'   display(''string_to_term:''),nl,\n'),
write(S,'        mktemp(''t2sXXXXXX'',TMP),'), nl(S),
write(S,'        open_output(TMP,Out),'), nl(S),
write(S,'        write_string(S), '), nl(S),
write(S,'%	write(''.''),'), nl(S),
write(S,'        close_output(Out),'), nl(S),
write(S,'        open_input(TMP, In),'), nl(S),
write(S,'        read_term(T,[variable_names(_V)]),'), nl(S),
write(S,'        close_input(In), '), nl(S),
write(S,'        delete_file(TMP).\n\n'),

write(S,'writeTerm(T) :- var(T), !, write(T).\n'),
write(S,'writeTerm(:-(Head,Body)) :-\n'),
write(S,'	writeTerm(Head),\n'),
write(S,'	write('' :- ''),\n'),
write(S,'	writeTerm(Body).\n'),
write(S,'writeTerm((#(^(N,A)),Rest)) :-\n'),
write(S,'	number(N),\n'),
write(S,'	 write(N),write('' { ''),write(A),\n'),
write(S,'	write('' } ''),\n'),
write(S,'	write('',''),\n'),
write(S,'	writeTerm(Rest).\n'),

write(S,'writeTerm((#(U,^(A)),Rest)) :-\n'),
write(S,'	number(U),\n'),
write(S,'	write('' { ''),write(A),\n'),
write(S,'	write('' } ''),\n'),
write(S,'	write(U),\n'),
write(S,'	write('',''),\n'),
write(S,'	writeTerm(Rest).\n'),

write(S,'writeTerm((#(U,^(N,A)),Rest)) :-\n'),
write(S,'	number(N),\n'),
write(S,'	 write(N),write('' { ''),write(A),\n'),
write(S,'	write('' } ''),\n'),
write(S,'	write(U),\n'),
write(S,'	write('',''),\n'),
write(S,'	writeTerm(Rest).\n'),

write(S,'writeTerm(#(^(N,A))) :-\n'),
write(S,'	number(N),\n'),
write(S,'	write(N),write('' { ''),write(A),\n'),
write(S,'	write('' } '').\n'),

write(S,'writeTerm((#(U,^(A)))) :-\n'),
write(S,'	number(U),\n'),
write(S,'	write('' { ''),write(A),\n'),
write(S,'	write('' } ''),\n'),
write(S,'	write(U).\n'),

write(S,'writeTerm((#(U,^(N,A)))) :-\n'),
write(S,'	number(N),\n'),
write(S,'	 write(N),write('' { ''),write(A),\n'),
write(S,'	write('' } ''),\n'),
write(S,'	write(U).\n'),

write(S,'writeTerm((@(&(N,A)),Rest)) :-\n'),
write(S,'	number(N),\n'),
write(S,'	 write(N),write('' [ ''),write(A),\n'),
write(S,'	write('' ] ''),\n'),
write(S,'	write('',''),\n'),
write(S,'	writeTerm(Rest).\n'),

write(S,'writeTerm((@(&(A),U),Rest)) :-\n'),
write(S,'	number(U),\n'),
write(S,'	write('' [ ''),write(A),\n'),
write(S,'	write('' ] ''),\n'),
write(S,'	write(U),\n'),
write(S,'	write('',''),\n'),
write(S,'	writeTerm(Rest).\n'),

write(S,'writeTerm((@(&(N,A),U),Rest)) :-\n'),
write(S,'	number(N),\n'),
write(S,'	 write(N),write('' [ ''),write(A),\n'),
write(S,'	write('' ] ''),\n'),
write(S,'	write(U),\n'),
write(S,'	write('',''),\n'),
write(S,'	writeTerm(Rest).\n'),

write(S,'writeTerm(@(&(N,A))) :-\n'),
write(S,'	number(N),\n'),
write(S,'	write(N),write('' [ ''),write(A),\n'),
write(S,'	write('' ] '').\n'),

write(S,'writeTerm(@(&(A),U)) :-\n'),
write(S,'	number(U),\n'),
write(S,'	write('' [ ''),write(A),\n'),
write(S,'	write('' ] ''),\n'),
write(S,'	write(U).\n'),

write(S,'writeTerm((@(&(N,A),U))) :-\n'),
write(S,'	number(N),\n'),
write(S,'	 write(N),write('' [ ''),write(A),\n'),
write(S,'	write('' ] ''),\n'),
write(S,'	write(U).\n'),


write(S,'writeTerm(T) :-\n'),
write(S,'	write(T).\n\n'),

write(S,'term_to_string(T,S) :-'), nl(S),
write(S,'        mktemp(''t2sXXXXXX'', TMP), '), nl(S),
write(S,'        open_output(TMP,Out),'), nl(S),
write(S,'        writeTerm(T),'), nl(S),
write(S,'        close_output(Out),'), nl(S),
write(S,'        open_input(TMP, In),'), nl(S),
write(S,'        get_line(S),'), nl(S),
write(S,'        close_input(In), '), nl(S),
%write(S,'   display(''term_to_string:''), write_string(S), nl, read(_),\n'),
write(S,'        delete_file(TMP).\n\n'),

write(S,'termToStr(T,S) :-'), nl(S),
write(S,'        mktemp(''t2sXXXXXX'', TMP), '), nl(S),
write(S,'        open_output(TMP,Out),'), nl(S),
write(S,'        write_term(T,[quoted(true)]),'), nl(S),
write(S,'        close_output(Out),'), nl(S),
%write(S,'    display(''aaaaaaaaaaaaaaaaa''), nl,\n'),
write(S,'        open_input(TMP, In),'), nl(S),
write(S,'        get_line(S),'), nl(S),
write(S,'        close_input(In), '), nl(S),
write(S,'        delete_file(TMP).'), nl(S),
write(S,'%----------------------------------------\n\n'),

write(S,'write2ASPFile(S,end_of_file,_V) :- emptyRuleString(S).'), nl(S),
write(S,'write2ASPFile(_,end,_V).'), nl(S),
write(S,'write2ASPFile(S,''#const''(X),_V) :-\n'),
write(S,'	emptyRuleString(S),\n'),
write(S,'	write(S,''#const ''),\n'),
write(S,'	write(S,X),\n'),
write(S,'	!,fail.\n'),
write(S,'write2ASPFile(S,''#use_asp''(A,B,C),_V) :- !, \n'),
write(S,'	emptyRuleString(S),\n'),
write(S,'	write(S,''#use_asp(''),\n'),
write(S,'	write_term(S,A,[quoted(true)]),\n'),
write(S,'	write(S,'',''),\n'),
write(S,'	write_term(S,B,[quoted(true)]),\n'),
write(S,'	write(S,'',''),\n'),
write(S,'	write_term(S,C,[quoted(true)]),\n'),
write(S,'	write(S,'').''), nl(S),!, fail.\n'),
write(S,'write2ASPFile(S,''#use_asp''(A,B),_V) :- !,\n'),
write(S,'	emptyRuleString(S),\n'),
write(S,'	write(S,''#use_asp(''),\n'),
write(S,'	write_term(S,A,[quoted(true)]),\n'),
write(S,'	write(S,'',''),\n'),
write(S,'	write_term(S,B,[quoted(true)]),\n'),
write(S,'	write(S,'').''), nl(S),!, fail.\n'),
write(S,'write2ASPFile(S,''#import''(A,B),_V) :- !,\n'),
write(S,'	emptyRuleString(S),\n'),
write(S,'	write(S,''#import(''),\n'),
write(S,'	write_term(S,A,[quoted(true)]),\n'),
write(S,'	write(S,'',''),\n'),
write(S,'	write_term(S,B,[quoted(true)]),\n'),
write(S,'	write(S,'').''), nl(S),!, fail.\n'),
write(S,'write2ASPFile(Tmp,AtmTerm,V) :-'), nl(S),
%write(S,'    display(AtmTerm),nl,\n'),
write(S,'	emptyRuleString(Tmp),\n'),
write(S,'	change_names(V),\n'),
write(S,'	reverseFormat(AtmTerm,Str),'), nl(S),
%write(S,'   display(''Str=''), write_string(Str), nl, read(_),\n'),
write(S,'	write_string(Tmp,Str),'), nl(S),
write(S,'       write(Tmp, ''.''),nl(Tmp),'), nl(S),
write(S,'	!,fail.'), nl(S),

write(S,'emptyRuleString(Tmp) :-\n'),
%write(S,'   display(''emptyRuleString:''),nl,\n'),
write(S,'	ruleString(String),\n'),
%write(S,'   display(''String=''), write_string(String), nl,\n'),
write(S,'	write_string(Tmp,String), \n'),
write(S,'	nl(Tmp), fail.\n'),
write(S,'emptyRuleString(_) :- retractall_fact(ruleString(_)).\n\n'),

%--------------------------------------------------------
write(S,'lineNoAtom(N,ANo) :-\n'),
write(S,'	lineNo(N),\n'),
write(S,'	number_atom(N,ANo).\n'),

% --------------------------------------------------------------
% finds the difference of subterms between two terms
write(S,'termDiff(T1,T2,Diff) :- \n'),
write(S,'	termCount(T1,D1),\n'),
write(S,'	termCount(T2,D2),\n'),
write(S,'	Diff is D1-D2.\n'),

% count number of subterms in a term.
write(S,'termCount('''',0).\n'),
write(S,'termCount((_=W,B),D) :- !,\n'),
write(S,'	(number(W) -> V=W;const(W,V)),\n'),
write(S,'	(number(V)-> V1=V;weight(V,V1)),\n'),
write(S,'	termCount(B,D1),\n'),
write(S,'	D is D1+V1.\n'),
write(S,'termCount((_,B),D) :- !,\n'),
write(S,'	termCount(B,D1),\n'),
write(S,'	D is D1+1.\n').
% ---------------------------------------------------------------
