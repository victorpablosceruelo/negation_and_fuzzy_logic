% To test: 
%   ciaoc redata.pl; ./redata < datadata > datadata2; ciaoc segv.pl; ./segv < datadata2

:- module(_,_,[dcg]).

:- use_module(engine(internals)).
:- use_module(library(operators)).
:- use_module(library(aggregates), [findall/3]).
:- use_module(library(read), [read/1]).
:- use_module(library(lists)).
:- use_module(library(dict)).
:- use_module(library(streams), [open_input/2, close_input/1]).

main :-
	crl(10000, _),
	_ = [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a],
	_ = a(a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a),
	_ = a(a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a),
	_ = [a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a),a(a,a,a)],
	_ = [a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a),a(a,a,a,a,a,a,a,a,a,a)],
	crl(1000, _),

        p(a),
	p(a),
	g(a, a, _),
	g(a, b, _),
	r(0, Values),
	s(Values).

crl(0, []) :- !.
crl(N, [a|Xs]) :-
	N1 is N - 1,
	crl(N1, Xs).

:- data p/1.
p(_).
p(_).

:- data g/3.

g(a,a,a).
g(a,b,a).

s(_).

r(N, [a|Xs]) :-
	display(N), nl, 
	myread(X),
	N1 is N + 1,
	r(N1, Xs).

% ---------------------------------------------------------------------------

myread(X) :-
        current_input(Stream),
        read_internal(X, Stream, Stream, _, _, _, read/1).

read_internal(Answer, Stream, CurIn, Variables, Tokens, Lines, Predicate) :-
        catch(read_internal(Answer, Stream, CurIn, Variables, Tokens, Lines),
              error(Error_Term,_),
              (set_input(CurIn), throw(error(Error_Term,Predicate)))).

read_internal(Answer, Stream, CurIn, Variables, Tokens, lines(Ln0,Ln1)) :-
	set_input(Stream),
        line_count(Stream, L0), Ln0 is L0+1,
        read_tokens(Tokens, Variables),
        line_position(Stream, Pos),
        line_count(Stream, L1), Ln1 is L1+sign(Pos),
        ( Tokens = [] -> Term = end_of_file
        ; clearerr(Stream), % Just in case we have reached eof
          read(Tokens, 1200, Term, LeftOver),
          all_read(LeftOver) ->
            the_syntax_error([], 0, _, _) % erase any leftovers
        ; syntax_error_data(Tokens, Msg, ErrorLoc),
          throw(error(syntax_error(Ln0,Ln1,Msg,ErrorLoc),'while reading'))
        ),
        set_input(CurIn),
	Answer = Term.

%   all_read(+Tokens)
%   checks that there are no unparsed tokens left over.

all_read([.]) :- !.
all_read(S) :-
	syntax_error(['operator expected after expression'], S).

%   expect(Token, TokensIn, TokensOut)
%   reads the next token, checking that it is the one expected, and
%   giving an error message if it is not.  It is used to look for
%   right brackets of various sorts, as they're all we can be sure of.

expect(Token, [Token|Rest], Out) :- !, Out=Rest.
expect(Token, S0, _) :-
	syntax_error([Token,' or operator expected'], S0).


%   I want to experiment with having the operator information held as
%   ordinary Prolog facts.  For the moment the following predicates
%   remain as interfaces to current_op.
%   current_prefixop(O -> Self, Rarg)
%   current_postfixop(O -> Larg, Self)
%   current_infixop(O -> Larg, Self, Rarg)

%   after_prefix_op(+Op, +Prec, +ArgPrec, +Rest, +Precedence, -Ans, -LeftOver)

after_prefix_op(Op, Oprec, Aprec, S1, Precedence, Answer, S) :-
	S1 = [Token|_],
	\+ cant_start_expr(Token),
	(   Precedence < Oprec ->
	    syntax_error(['prefix operator ',Op,' in context with precedence ',
	                  Precedence],
		         S1)
	;   read(S1, Aprec, Arg, S2),
	    functor(Term, Op, 1),
	    arg(1, Term, Arg),
	    read_rest(S2, Oprec, Term, Precedence, Answer, S)
	).


cant_start_expr(')').
cant_start_expr(']').
cant_start_expr('}').
cant_start_expr('|').
cant_start_expr(',').
cant_start_expr(.).


%   read(+TokenList, +Precedence, -Term, -LeftOver)
%   parses a Token List in a context of given Precedence,
%   returning a Term and the unread Left Over tokens.

read([Token|RestTokens], Precedence, Term, LeftOver) :-
	read(Token, RestTokens, Precedence, Term, LeftOver).
read([], _, _, _) :-
	syntax_error(['expression expected'], []).


%   read(+Token, +RestTokens, +Precedence, -Term, -LeftOver)

read(X, _, _, _, _) :- var(X), !, fail.		% space saver
read(var(Variable,Name), ['('|S1], Precedence, Answer, S) :-
        current_prolog_flag(read_hiord, on),
        !,
	read(S1, 999, Arg1, S2),
	read_args(S2, RestArgs, S3), !,
        ( Name = "_" ->
          Term =.. ['',Arg1|RestArgs]
        ; Term =.. [call,Variable,Arg1|RestArgs]
        ),
	read_rest(S3, 0, Term, Precedence, Answer, S).
read(var(Variable,_), S0, Precedence, Answer, S) :- !,
	read_rest(S0, 0, Variable, Precedence, Answer, S).
read(atom(-), [number(Number)|S1], Precedence, Answer, S) :-
	number(Number), !,
	Negative is -Number,
	read_rest(S1, 0, Negative, Precedence, Answer, S).
read(atom(Functor), ['('|S1], Precedence, Answer, S) :- !,
	read(S1, 999, Arg1, S2),
	read_args(S2, RestArgs, S3), !,
        ( Term =.. [Functor,Arg1|RestArgs] ->
            read_rest(S3, 0, Term, Precedence, Answer, S)
        ; syntax_error(['maximum arity exceeded'],S3)
        ).
read(atom(Functor), S0, Precedence, Answer, S) :-
	current_prefixop(Functor, Prec, Right),
	after_prefix_op(Functor, Prec, Right, S0, Precedence, Answer, S).
read(atom(Atom), S0, Precedence, Answer, S) :- !,
	read_rest(S0, 0, Atom, Precedence, Answer, S).
read(number(Number), S0, Precedence, Answer, S) :-
	number(Number), !,
	read_rest(S0, 0, Number, Precedence, Answer, S).
read('[', [']'|S1], Precedence, Answer, S) :- !,
	read(atom([]), S1, Precedence, Answer, S).
read('[', S1, Precedence, Answer, S) :- !,
	read(S1, 999, Arg1, S2),
	read_list(S2, RestArgs, S3), !,
	read_rest(S3, 0, [Arg1|RestArgs], Precedence, Answer, S).
read('(', S1, Precedence, Answer, S) :- !,
	read(S1, 1200, Term, S2),
	expect(')', S2, S3), !,
	read_rest(S3, 0, Term, Precedence, Answer, S).
read(' (', S1, Precedence, Answer, S) :- !,
	read(S1, 1200, Term, S2),
	expect(')', S2, S3), !,
	read_rest(S3, 0, Term, Precedence, Answer, S).
read('{', ['}'|S1], Precedence, Answer, S) :- !,
	read(atom({}), S1, Precedence, Answer, S).
read('{', S1, Precedence, Answer, S) :- !,
	read(S1, 1200, Term, S2),
	expect('}', S2, S3), !,
	read_rest(S3, 0, {Term}, Precedence, Answer, S).
read(string(List), ['|','|'|S0], Precedence, Answer, S) :- !,
        dlist(List,Head,Tail),
        read(S0, 0, Tail, S1),
	read_rest(S1, 0, Head, Precedence, Answer, S).
read(string(List), S0, Precedence, Answer, S) :- !,
	read_rest(S0, 0, List, Precedence, Answer, S).
read(badatom(_), S0, _, _, _) :- !,
        syntax_error(['atom too large'], S0).
read('/* ...', S0, _, _, _) :- !,
        syntax_error(['non-terminated /* comment'], S0).
read(Token, S0, _, _, _) :-
	syntax_error([Token,' cannot start an expression'], S0).


%   read_rest(+Tokens, +LPrec, +Term, +Prec, -Answer, -LeftOver)
%   is called by read/4 after it has read a primary (the Term).  It
%   checks for following postfix or infix operators.  The tokens
%   Tokens-LeftOver are parsed and combined with Term into Answer;
%   LPrec and Prec are the lower and upper bounds for the precedence
%   of the topmost operator.


read_rest([atom(F)|S1], LPrec, Term, Precedence, Answer, S) :-
	current_infixop(F, L, O, R),
	Precedence >= O, LPrec =< L,
	(   current_postfixop(F, L1, O1),
	    Precedence >= O1, LPrec =< L1 -> true
	;   !
	),
	read(S1, R, Other, S2),
	functor(Expr, F, 2),
	arg(1, Expr, Term),
	arg(2, Expr, Other),
	read_rest(S2, O, Expr, Precedence, Answer, S).
read_rest([atom(F)|S1], LPrec, Term, Precedence, Answer, S) :-
	current_postfixop(F, L, O),
	Precedence >= O, LPrec =< L, !,
	functor(Expr, F, 1),
	arg(1, Expr, Term),
	read_rest(S1, O, Expr, Precedence, Answer, S).
read_rest([','|S1], LPrec, Term, Precedence, Answer, S) :-
	Precedence >= 1000, LPrec < 1000, !,
	read(S1, 1000, Next, S2),
	read_rest(S2, 1000, (Term,Next), Precedence, Answer, S).
read_rest(['|'|S1], LPrec, Term, Precedence, Answer, S) :-
	Precedence >= 1100, LPrec < 1100, !,
	read(S1, 1100, Next, S2),
	read_rest(S2, 1100, (Term;Next), Precedence, Answer, S).
read_rest(S, _, Term, _, Term, S).


%   read_args(+Tokens, -TermList, -LeftOver)
%   parses {',' expr(999)} ')' and returns a list of terms.

read_args([','|S1], TermList, S) :- !,
	TermList = [Term|Rest],
	read(S1, 999, Term, S2),
	read_args(S2, Rest, S).
read_args([')'|S1], TermList, S) :- !,
	TermList = [],
	S = S1.
read_args(S, _, _) :-
	syntax_error([', or ) expected in arguments'], S).


%   read_list(+Tokens, -TermList, -LeftOver)
%   parses {',' expr(999)} ['|' expr(999)] ']' and returns a list of terms.

read_list([','|S1], TermList, S) :- !,
	TermList = [Term|Rest],
	read(S1, 999, Term, S2),
	read_list(S2, Rest, S).
read_list(['|'|S1], Rest, S) :- !,
	read(S1, 999, Rest, S2),
	expect(']', S2, S).
read_list([']'|S1], TermList, S) :- !,
	TermList = [],
	S = S1.
read_list(S, _, _) :-
	syntax_error([', | or ] expected in list'], S).

:- data 'syntax error'/2.

:- on_abort(retractall_fact('syntax error'(_,_))).

syntax_error(Message, List) :-
	length(List, Length),
	asserta_fact('syntax error'(Message,Length)), !,
	fail.

syntax_error_data(Tokens, Msg, ErrorLoc) :-
	the_syntax_error([], 1000000, Msg0, AfterError),
        tokens_items(Msg0, Msg),
	length(Tokens, Length),
	BeforeError is Length-AfterError,
        error_localization(Tokens, BeforeError, '', ErrorLoc).

the_syntax_error(Msg0, AfterError0, Msg, AfterError) :-
	current_fact('syntax error'(Msg1,AfterError1), Ptr), !,
	erase(Ptr),
	( AfterError0 > AfterError1 ->
	    the_syntax_error(Msg1, AfterError1, Msg, AfterError)
	;
	    the_syntax_error(Msg0, AfterError0, Msg, AfterError)
	).
the_syntax_error(Msg, AfterError, Msg, AfterError).

error_localization(L, 0, _, Msg) :- !,
        Msg = ['\n','** here **','\n'|Msg_],
        error_localization(L, -1, '', Msg_).
error_localization([T|Ts], BeforeError, Sep0, [Sep,I|Is]) :-
        separator(T, Sep0, Sep),
	token_item(T, I),
	Left is BeforeError-1,
	error_localization(Ts, Left, ' ', Is).
error_localization([], _, _, []).

tokens_items([], []).
tokens_items([T|Ts], [I|Is]) :-
        token_item(T, I),
        tokens_items(Ts, Is).

token_item(atom(X),    X    ) :- !.
token_item(number(X),  X    ) :- !.
token_item(var(_,X),   $$(X)) :- !.
token_item(badatom(X), $$(X)) :- !.
token_item(string(X),  $$(S)) :- !, append([0'"|X], """", S).
token_item(X,          X).

separator('(' , _, '') :- !.
separator(' (', _, '') :- !.
separator(_, Sep, Sep).

% --

:- data second_prompt/1.
second_prompt('   ').

second_prompt(Old, New) :-
        New = Old,
        current_fact(second_prompt(Old)).

read_tokens(TokenList, Dictionary) :-
        getct1(Ch, Type),
        second_prompt(SP, SP),
	'$prompt'(Old, SP),
        read_tokens(Type, Ch, Dictionary, TokenList),
	'$prompt'(_, Old).

% The only difference between read_tokens_after_layout(Typ, Ch, D, Tokens)
% and read_tokens/4 is what they do when Ch is "(".  The former finds the
% token to be ' (', while the later finds the token to be '('.  This is
% how the parser can tell whether <atom> <paren> must be an operator
% application or an ordinary function symbol application.

read_tokens_after_layout(5, 0'(, Dict, [' ('|Tokens]) :- !,
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_after_layout(Typ, Ch, Dict, Tokens) :-
	read_tokens(Typ, Ch, Dict, Tokens).

read_tokens(-1, _, _, []).                      % end of file
read_tokens(0, _, Dict, Tokens) :-              % layout
        getct1(NextCh, NextTyp),
        read_tokens_after_layout(NextTyp, NextCh, Dict, Tokens).
read_tokens(1, Ch0, Dict, [Atom|Tokens]) :-     % small letter: atom
        getct(Ch, Typ),
        read_name(Typ, Ch, S0, NextCh, NextTyp),
        atom_token([Ch0|S0], Atom),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens(2, Ch0, Dict, [var(Var,S)|Tokens]) :- % capital letter: variable
        S = [Ch0|S0],
        getct(Ch, Typ),
        read_name(Typ, Ch, S0, NextCh, NextTyp),
        ( S = "_" ->                            % anonymous variable
              true
        ; dic_lookup(Dict, S, Node),            % lookup/enter in dictionary
          check_singleton(Node, Var)
        ),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens(3, Ch, Dict, [number(N)|Tokens]) :-  % number
        read_number(Ch, N, Dict, Tokens).	 % reads continuation too.
read_tokens(4, 0'/, Dict, Tokens) :- !,          % comment if an '*' follows
        getct(NextCh, NextTyp),
        read_possible_comment(NextTyp, NextCh, Dict, Tokens).
read_tokens(4, 0'., Dict, Tokens) :- !,          % end token or graphic atom
        getct(NextCh, NextTyp),         
        read_fullstop(NextTyp, NextCh, Dict, Tokens).
read_tokens(4, Ch, Dict, [Atom|Tokens]) :-       % graphic atom
        getct(AnotherCh, Typ),
        read_symbol(Typ, AnotherCh, Chars, NextCh, NextTyp),
        atom_token([Ch|Chars], Atom),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens(5, Ch, Dict, Tokens) :-
        read_tokens_solo(Ch, Dict, Tokens).

read_tokens_solo(0'!, Dict, [atom(!)|Tokens]) :-
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0';, Dict, [atom(;)|Tokens]) :-
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0'%, Dict, Tokens) :-          % comment
        ( skip_code_prot(10) ->                 % skip newline
            getct1(NextCh, NextTyp),
            read_tokens_after_layout(NextTyp, NextCh, Dict, Tokens)
        ; % end of file
          Tokens = []
        ).
read_tokens_solo(0'(, Dict, ['('|Tokens]) :-
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0'), Dict, [')'|Tokens]) :-
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0',, Dict, [','|Tokens]) :-
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0'[, Dict, ['['|Tokens]) :-
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0'], Dict, [']'|Tokens]) :-
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0'{, Dict, ['{'|Tokens]) :-
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0'|, Dict, ['|'|Tokens]) :-
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0'}, Dict, ['}'|Tokens]) :-
        getct1(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0'", Dict, [string(S)|Tokens]) :-  % "string"
        getct(Ch, Typ),
        read_string(Typ, Ch, S, 0'", NextTyp, NextCh),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
read_tokens_solo(0'', Dict, [Atom|Tokens]) :- % 'atom'
        getct(Ch, Typ),
        read_string(Typ, Ch, S, 0'', NextTyp, NextCh),
        atom_token(S, Atom),
        read_tokens(NextTyp, NextCh, Dict, Tokens).

% read_name(Typ, Char, String, LastCh, LastTyp)
% reads a sequence of letters, digits, and underscores, and returns
% them as String.  The first character which cannot join this sequence
% is returned as LastCh.

read_name(1, Char, String, LastCh, LastTyp) :- !,
        String = [Char|Chars],
        getct(NextCh, NextTyp),
        read_name(NextTyp, NextCh, Chars, LastCh, LastTyp).
read_name(2, Char, String, LastCh, LastTyp) :- !,
        String = [Char|Chars],
        getct(NextCh, NextTyp),
        read_name(NextTyp, NextCh, Chars, LastCh, LastTyp).
read_name(3, Char, String, LastCh, LastTyp) :- !,
        String = [Char|Chars],
        getct(NextCh, NextTyp),
        read_name(NextTyp, NextCh, Chars, LastCh, LastTyp).
read_name(LastTyp, LastCh, [], LastCh, LastTyp).

% read_symbol(Typ, Ch, String, NextCh, NextTyp)
% reads the other kind of atom which needs no quoting: one which is
% a string of "symbol" characters.

read_symbol(4, Char, String, LastCh, LastTyp) :- !,
        String = [Char|Chars],
        getct(NextCh, NextTyp),
        read_symbol(NextTyp, NextCh, Chars, LastCh, LastTyp).
read_symbol(LastTyp, LastCh, [], LastCh, LastTyp).


% read_possible_comment(Typ, Ch, Dict, Tokens)
% checks to see whether / + Ch is a / + * comment or a symbol.  If the
% former, it skips the comment.  If the latter it just calls read_symbol.

read_possible_comment(4, 0'*, Dict, Tokens) :- !,
        skip_comment_text(Dict, Tokens).
read_possible_comment(Typ, Ch, Dict, [Atom|Tokens]) :-
        read_symbol(Typ, Ch, Chars, NextCh, NextTyp), % might read 0 chars
        atom_token([0'/|Chars], Atom),
        read_tokens(NextTyp, NextCh, Dict, Tokens).

skip_comment_text(Dict, Tokens) :-
        ( skip_code_prot(0'*) ->
            getct(Ch, Typ),
            read_end_comment(Typ, Ch, Dict, Tokens)
        ; % end of file
          Tokens = ['/* ...']
        ).
        
read_end_comment(4, 0'/, Dict, Tokens) :- !,
        getct1(NextCh, NextTyp),
        read_tokens_after_layout(NextTyp, NextCh, Dict, Tokens).
read_end_comment(4, 0'*, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_end_comment(Typ, Ch, Dict, Tokens).
read_end_comment(_, _, Dict, Tokens) :-
        skip_comment_text(Dict, Tokens).

% read_fullstop(Typ, Char, Dict, Tokens)
% looks at the next character after a full stop.  If the next character is
% an end of file, a layout character or %, this is a clause terminator, else
% this is just an ordinary symbol and we call read_symbol to process it.

read_fullstop(-1, _, _, [.]) :- !.              % end of file
read_fullstop(0, _, _, [.]) :- !.               % END OF CLAUSE
read_fullstop(5, 0'%, _, [.]) :- !,             % END OF CLAUSE,
        ( skip_code_prot(10) -> true ; true ).  % skip newline
read_fullstop(Typ, Ch, Dict, [Atom|Tokens]) :-
        read_symbol(Typ, Ch, S, NextCh, NextTyp),   % symbol
        atom_token([0'.|S], Atom),
        read_tokens(NextTyp, NextCh, Dict, Tokens).

% read_string(Typ, Ch, Chars, Quote, NextCh, NextTyp)
% reads the body of a string delimited by Quote characters.
% The result is a list Chars of ASCII codes.

read_string(-1, _, [], _, -1, -1) :- !.         % end of file
read_string(5, Quote, Chars, Quote, NextTyp, NextCh) :- !,
        getct(Ch, Typ),                     % closing or doubled quote
        read_end_string(Typ, Ch, Quote, Chars, NextTyp, NextCh).
read_string(4, 92, Chars, Quote, NextTyp, NextCh) :-
        current_prolog_flag(character_escapes, CEF),     % escaped character
        CEF \== off,
        !,
        getct(Ch, Typ),                
        escape_sequence(Typ, Ch, CEF, Chars, RestChars, OtTyp, OtCh),
        read_string(OtTyp, OtCh, RestChars, Quote, NextTyp, NextCh).
read_string(_, Char, [Char|Chars], Quote, NextTyp, NextCh) :-
        getct(Ch, Typ),                     % ordinary character
        read_string(Typ, Ch, Chars, Quote, NextTyp, NextCh).

read_end_string(5, Quote, Quote, [Quote|Chars], NextTyp, NextCh) :- !,
        getct(Ch, Typ),                     % doubled quote
        read_string(Typ, Ch, Chars, Quote, NextTyp, NextCh).
read_end_string(NextTyp, NextCh, _, [], NextTyp, NextCh).

escape_sequence(0, _, _, Chars, Chars, Typ, Ch) :- !,
        getct(Ch, Typ).                     % continuation escape sequence
escape_sequence(4, 0'^, _, [Char|Chars], Chars, NextTyp, NextCh) :-
        getct(Ch, Typ),
        ( control_character(Typ, Ch, CC) ->
              Char = CC,
              getct(NextCh, NextTyp)
        ; Char = 0'^,
          NextTyp = Typ,
          NextCh = Ch
        ).
escape_sequence(3, D, CEF, [Char|Chars], Chars, NextTyp, NextCh) :-
        D =< 0'7, !,                         % octal escape sequence
        getct(Ch, Typ),
        ( CEF = sicstus ->
            read_two_octal(Typ, Ch, Ds, NextTyp, NextCh)
        ; read_octal_iso(Typ, Ch, Ds),
          getct(NextCh, NextTyp)
        ),
        number_codes(Char, [D|Ds], 8).
escape_sequence(1, 0'x, CEF, [Char|Chars], Chars, NextTyp, NextCh) :- !,
        getct(Ch, Typ),                     % hexadecimal escape sequence
        ( CEF = sicstus ->
            read_two_hexa(Typ, Ch, Ds, NextTyp, NextCh)
        ; read_hexa_iso(Typ, Ch, Ds),
          getct(NextCh, NextTyp)
        ),
        number_codes(Char, [0'0|Ds], 16).
escape_sequence(1, 0'c, _, Chars, Chars, NextTyp, NextCh) :- !,
        getct1(NextCh, NextTyp).              % skip layout
escape_sequence(1, L, _, [Char|Chars], Chars, NextTyp, NextCh) :-
        symbolic_control_char(L, Char), !,   % control escape sequence
        getct(NextCh, NextTyp).
escape_sequence(_, Ch, _, [Ch|Chars], Chars, NextTyp, NextCh) :-
        getct(NextCh, NextTyp).

control_character(4, 0'?, 127).
control_character(4, 0'@, 0).
control_character(2, C, CC) :-    % This includes also "_"
        CC is C mod 32.
control_character(1, C, CC) :-
        CC is C mod 32.
control_character(4, C, CC) :-
        C >= 0'[, C =< 0'^,
        CC is C mod 32.

symbolic_control_char(0'a, 7).
symbolic_control_char(0'b, 8).
symbolic_control_char(0't, 9).
symbolic_control_char(0'n,10).
symbolic_control_char(0'v,11).
symbolic_control_char(0'f,12).
symbolic_control_char(0'r,13).
symbolic_control_char(0'e,27).
symbolic_control_char(0's,32).
symbolic_control_char(0'd,127).

read_two_octal(3, D, [D|Ds], EndTyp, EndCh) :-
        D =< 0'7, !,
        getct(Ch, Typ),
        read_one_octal(Typ, Ch, Ds, EndTyp, EndCh).
read_two_octal(EndTyp, EndCh, [], EndTyp, EndCh).

read_one_octal(3, D, [D], EndTyp, EndCh) :-
        D =< 0'7, !,
        getct(EndCh, EndTyp).
read_one_octal(EndTyp, EndCh, [], EndTyp, EndCh).

read_octal_iso(4, 92, []).  % ends in \
read_octal_iso(3, D, [D|Ds]) :-
        D =< 0'7, !,
        getct(Ch, Typ),
        read_octal_iso(Typ, Ch, Ds).
read_octal_iso(_, _, Ds) :- % ignore other characters
        getct(Ch, Typ),
        read_octal_iso(Typ, Ch, Ds).

read_two_hexa(TD, D, [D|Ds], EndTyp, EndCh) :-
        hexa_digit(TD, D), !,
        getct(Ch, Typ),
        read_one_hexa(Typ, Ch, Ds, EndTyp, EndCh).
read_two_hexa(EndTyp, EndCh, [], EndTyp, EndCh).

read_one_hexa(TD, D, [D], EndTyp, EndCh) :-
        hexa_digit(TD, D), !,
        getct(EndCh, EndTyp).
read_one_hexa(EndTyp, EndCh, [], EndTyp, EndCh).

read_hexa_iso(4, 92, []).  % ends in \
read_hexa_iso(TD, D, [D|Ds]) :-
        hexa_digit(TD, D), !,
        getct(Ch, Typ),
        read_hexa_iso(Typ, Ch, Ds).
read_hexa_iso(_, _, Ds) :- % ignore other characters
        getct(Ch, Typ),
        read_hexa_iso(Typ, Ch, Ds).

hexa_digit(3, _).
hexa_digit(2, D) :- D =< 0'F.
hexa_digit(1, D) :- D =< 0'f.

% read_number reads an unsigned integer or float. This is the most difficult
% part of the tokenizer. There are seven forms of number:
%   <digits>                                    integer in decimal
%   <base> ' <base-digits>                      integer in other base (2..36)
%   <digits> . <digits>                         float
%   <digits> . <digits> (e|E) (-|+| ) <digits>  float with exponent
%   0.Nan                                       Not-a-number value
%   0 ' <character>                             ascii code of the character
%   0 b <bin-digits>                            binary integer
%   0 o <oct-digits>                            octal integer
%   0 x <hex-digits>                            hexadecimal integer
%

read_number(0'0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_0(Typ, Ch, N, Dict, Tokens).
read_number(D, N, Dict, Tokens) :-
        getct(Ch, Typ),
        read_digits(Typ, Ch, S, [D|S], N, Dict, Tokens).

read_after_0(3, D, N, Dict, Tokens) :-
        getct(Ch, Typ),
        read_digits(Typ, Ch, S, [D|S], N, Dict, Tokens).
read_after_0(4, 0'., N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_period(Typ, Ch, S, [0'0|S], N, Dict, Tokens).
read_after_0(1, 0'b, N, Dict, Tokens) :- !,
        read_based_int(2, S, EndTyp, EndCh),
        based_int_or_atom(S, 2, 0'b, N, EndTyp, EndCh, Dict, Tokens).
read_after_0(1, 0'o, N, Dict, Tokens) :- !,
        read_based_int(8, S, EndTyp, EndCh),
        based_int_or_atom(S, 8, 0'o, N, EndTyp, EndCh, Dict, Tokens).
read_after_0(1, 0'x, N, Dict, Tokens) :- !,
        read_based_int(16, S, EndTyp, EndCh),
        based_int_or_atom(S, 16, 0'x, N, EndTyp, EndCh, Dict, Tokens).
read_after_0(5, 0'', N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_quoted_character(Typ, Ch, N, Dict, Tokens).
read_after_0(Typ, Ch, 0, Dict, Tokens) :-
        read_tokens(Typ, Ch, Dict, Tokens).

read_digits(3, D, [D|S], S0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_digits(Typ, Ch, S, S0, N, Dict, Tokens).
read_digits(4, 0'., S, S0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_period(Typ, Ch, S, S0, N, Dict, Tokens).
read_digits(5, 0'', [], S0, N, Dict, Tokens) :-
        number_codes(Base, S0),
        Base >= 2,
	Base =< 36, !,
        read_based_int(Base, S1, EndTyp, EndCh),
        based_int_or_quoted(S1, Base, N, EndTyp, EndCh, Dict, Tokens).
read_digits(Typ, Ch, [], S0, N, Dict, Tokens) :-
        number_codes(N, S0),
        read_tokens(Typ, Ch, Dict, Tokens).

read_after_period(3, D, [0'.,D|S], S0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_float(Typ, Ch, S, S0, N, Dict, Tokens).
read_after_period(2, 0'N, [], "0", Nan, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_dot_N(Ch, Typ, Nan, Dict, Tokens).
read_after_period(Typ, Ch, [], S0, N, Dict, Tokens) :-
        number_codes(N, S0),
        read_fullstop(Typ, Ch, Dict, Tokens).

read_after_float(3, D, [D|S], S0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_float(Typ, Ch, S, S0, N, Dict, Tokens).
read_after_float(1, 0'e, S, S0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_float_e(Typ, Ch, 0'e, S, S0, N, Dict, Tokens).
read_after_float(2, 0'E, S, S0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_float_e(Typ, Ch, 0'E, S, S0, N, Dict, Tokens).
read_after_float(Typ, Ch, [], S0, N, Dict, Tokens) :-
        number_codes(N, S0),
        read_tokens(Typ, Ch, Dict, Tokens).

read_after_float_e(3, D, E, [E,D|S], S0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_exp(Typ, Ch, S, S0, N, Dict, Tokens).
read_after_float_e(4, 0'+, E, S, S0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_float_e_sign(Typ, Ch, E, 0'+, S, S0, N, Dict, Tokens).
read_after_float_e(4, 0'-, E, S, S0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_float_e_sign(Typ, Ch, E, 0'-, S, S0, N, Dict, Tokens).
read_after_float_e(Typ, Ch, E, [], S0, N, Dict, Tokens) :-
        number_codes(N, S0),
        token_start_e(E, Typ, Ch, Dict, Tokens).

read_after_float_e_sign(3, D, E, Sign, [E,Sign,D|S], S0, N, Dict, Tokens):-!,
        getct(Ch, Typ),
        read_after_exp(Typ, Ch, S, S0, N, Dict, Tokens). 
read_after_float_e_sign(Typ, Ch, E, Sign, [], S0, N, Dict, Tokens) :-
        number_codes(N, S0),
        token_start_e_sign(E, Sign, Typ, Ch, Dict, Tokens).

read_after_exp(3, D, [D|S], S0, N, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_exp(Typ, Ch, S, S0, N, Dict, Tokens).
read_after_exp(Typ, Ch, [], S0, N, Dict, Tokens) :-
        number_codes(N, S0),
        read_tokens(Typ, Ch, Dict, Tokens).

token_start_e(0'e, Typ, Ch, Dict, [Atom|Tokens]) :-
        read_name(Typ, Ch, S0, NextCh, NextTyp),
        atom_token([0'e|S0], Atom),
        read_tokens(NextTyp, NextCh, Dict, Tokens).
token_start_e(0'E, Typ, Ch, Dict, [var(Var,S)|Tokens]) :-
        S = [0'E|S0],
        read_name(Typ, Ch, S0, NextCh, NextTyp),
        dic_lookup(Dict, S, Node),
        check_singleton(Node, Var),
        read_tokens(NextTyp, NextCh, Dict, Tokens).

token_start_e_sign(0'e, Sign, Typ, Ch, Dict, [atom(e)|Tokens]) :-
        token_start_sign(Sign, Typ, Ch, Dict, Tokens).
token_start_e_sign(0'E, Sign, Typ, Ch, Dict, [var(Var,[0'E])|Tokens]) :-
        dic_lookup(Dict, [0'E], Node),
        check_singleton(Node, Var),
        token_start_sign(Sign, Typ, Ch, Dict, Tokens).

token_start_sign(Sign, Typ, Ch, Dict, [Atom|Tokens]) :- 
        read_symbol(Typ, Ch, Chars, NextCh, NextTyp),
        atom_token([Sign|Chars], Atom),
        read_tokens(NextTyp, NextCh, Dict, Tokens).

read_after_dot_N(0'a, 1, Nan, Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_after_dot_Na(Ch, Typ, Nan, Dict, Tokens).
read_after_dot_N(Ch, Typ, 0, Dict, [atom(.),var(Var,S)|Tokens]) :-
        S = [0'N|S0],
        read_name(Typ, Ch, S0, NextCh, NextTyp),
        dic_lookup(Dict, S, Node),
        check_singleton(Node, Var),
        read_tokens(NextTyp, NextCh, Dict, Tokens).

read_after_dot_Na(0'n, 1, Nan, Dict, Tokens) :- !,
        Nan is 0/0, /* Provisional */
        getct(Ch, Typ),
        read_tokens(Typ, Ch, Dict, Tokens).
read_after_dot_Na(Ch, Typ, 0, Dict, [atom(.),var(Var,S)|Tokens]) :-
        S = [0'N,0'a|S0],
        read_name(Typ, Ch, S0, NextCh, NextTyp),
        dic_lookup(Dict, S, Node),
        check_singleton(Node, Var),
        read_tokens(NextTyp, NextCh, Dict, Tokens).

read_based_int(Base, S, EndTyp, EndCh) :-
        MaxDigit is 0'0+Base-1,
        MaxLetter is 0'A+Base-11,
        getct(Ch, Typ),
        read_based_int_digits(Typ, Ch, MaxDigit, MaxLetter, S, EndTyp, EndCh).

read_based_int_digits(3, D, MaxDigit, MaxLetter, [D|Ds], EndTyp, EndCh) :-
        D =< MaxDigit, !,
        getct(Ch, Typ),
        read_based_int_digits(Typ, Ch, MaxDigit, MaxLetter, Ds, EndTyp, EndCh).
read_based_int_digits(2, D, MaxDigit, MaxLetter, [D|Ds], EndTyp, EndCh) :-
        D =< MaxLetter, !,
        getct(Ch, Typ),
        read_based_int_digits(Typ, Ch, MaxDigit, MaxLetter, Ds, EndTyp, EndCh).
read_based_int_digits(1, D, MaxDigit, MaxLetter, [D|Ds], EndTyp, EndCh) :-
        D =< MaxLetter+0'a-0'A, !,
        getct(Ch, Typ),
        read_based_int_digits(Typ, Ch, MaxDigit, MaxLetter, Ds, EndTyp, EndCh).
read_based_int_digits(Typ, Ch, _, _, [], Typ, Ch).

based_int_or_atom([], _, L, 0, Typ, Ch, Dict, [Atom|Tokens]) :- !,
        read_name(Typ, Ch, S0, NextCh, NextTyp),    % not based int, start of
        atom_token([L|S0], Atom),                   % atom with letter L      
        read_tokens(NextTyp, NextCh, Dict, Tokens).
based_int_or_atom(S, Base, _, N, Typ, Ch, Dict, Tokens) :-
        number_codes(N, S, Base),
        read_tokens(Typ, Ch, Dict, Tokens).

based_int_or_quoted([], Base, Base, Typ, Ch, Dict, [Atom|Tokens]) :- !,
        read_string(Typ, Ch, S, 0'', NextTyp, NextCh),  % not based int, start
        atom_token(S, Atom),                            % of quoted atom
        read_tokens(NextTyp, NextCh, Dict, Tokens).
based_int_or_quoted(S, Base, N, Typ, Ch, Dict, Tokens) :-
        number_codes(N, S, Base),
        read_tokens(Typ, Ch, Dict, Tokens).

read_quoted_character(4, 92, N, Dict, Tokens) :- % backslash
        current_prolog_flag(character_escapes, CEF),
        CEF \== off,
        !,
        getct(Ch, Typ),
        escape_sequence(Typ, Ch, CEF, Chars, [], OtTyp, OtCh),
        continue_quoted_character(Chars, N, OtTyp, OtCh, Dict, Tokens).
read_quoted_character(5, 0'', 0'', Dict, Tokens) :-
        current_prolog_flag(character_escapes, iso),
        !,
        getct(Ch, Typ),
        read_another_quote(Typ, Ch, Dict, Tokens).
read_quoted_character(_, N, N, Dict, Tokens) :-
        getct(NextCh, NextTyp),
        read_tokens(NextTyp, NextCh, Dict, Tokens).

continue_quoted_character([], N, Typ, Ch, Dict, Tokens) :- !, % was null
        read_quoted_character(Typ, Ch, N, Dict, Tokens).
continue_quoted_character([N], N, Typ, Ch, Dict, Tokens) :-
        read_tokens(Typ, Ch, Dict, Tokens).

read_another_quote(5, 0'', Dict, Tokens) :- !,
        getct(Ch, Typ),
        read_tokens(Typ, Ch, Dict, Tokens).
read_another_quote(Typ, Ch, Dict, Tokens) :- % Accept also only a "'"
        read_tokens(Typ, Ch, Dict, Tokens).

check_singleton(Node, Var) :-
        var(Node), !, Node = [Var|_].
check_singleton([Var|[]], Var). % The [] marks it is not singleton

atom_token(String, atom(Atom)) :-
        atom_codes(Atom, String), !.
atom_token(String, badatom(String)).

skip_code_prot(C) :- catch(skip_code(C), _, fail).

