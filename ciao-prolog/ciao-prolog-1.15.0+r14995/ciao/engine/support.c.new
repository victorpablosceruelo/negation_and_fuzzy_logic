/* Copyright (C) 1996,1997,1998, UPM-CLIP */

#include <unistd.h>
#include "datadefs.h"
#include "support.h"
#include "predtyp.h"

/* declarations for global functions accessed here */

#include "bignum_defs.h"
#include "support_defs.h"
#include "alloc_defs.h"
#include "stacks_defs.h"
#include "bignum_defs.h"
#include "locks_defs.h"
#include "start_defs.h"
#include "initial_defs.h"


/* local declarations */

static BOOL cunify_args_aux(Argdecl, register int arity, register TAGGED *pt1, register TAGGED *pt2, TAGGED *x1, TAGGED *x2);
static BOOL cunify_aux PROTO((struct worker *w, TAGGED x1, TAGGED x2));
static BOOL cunify_aux(Argdecl, TAGGED x1, TAGGED x2);
static int file_is_tty(FILE *file);
static void numstack_overflow(Argdecl);
static struct definition **find_subdef_chain(struct definition *f, int clause_no);
static struct definition *parse_1_definition(TAGGED tagname, TAGGED tagarity);
#if defined(USE_ATOM_LEN)
static struct sw_on_key_node *atom_gethash(register struct sw_on_key *sw, 
                                           TAGGED key, 
                                           char *str,
                                           unsigned int str_len);
#else
static struct sw_on_key_node *atom_gethash(register struct sw_on_key *sw, 
                                           TAGGED key, 
                                           char *str);
#endif

/*-----------------------------------------------------------*/

void failc(mesg)
     char *mesg;
{
  ENG_PRINTF1(stream_user_error,"{ERROR: %s}\n",mesg);
  /*if (predicates_location != &user_predicates)*/ /* wam not initialized */
  if (!wam_initialized){
    printf("Wam not initialized, exiting!!!\n");
    at_exit(-1);
  }
}


/*------------------------------------------------------------*/

/* insert atom in global table */
/*  MCL: there is an implicit assumption that the table is not full */

#if defined(USE_ATOM_LEN)
static struct sw_on_key_node *atom_gethash(sw, key, str, str_len)
     CIAO_REGISTER struct sw_on_key *sw;
     TAGGED key;
     char *str;
     unsigned int str_len;
#else
static struct sw_on_key_node *atom_gethash(sw, key, str)
     CIAO_REGISTER struct sw_on_key *sw;
     TAGGED key;
     char *str;
#endif
{
  CIAO_REGISTER struct sw_on_key_node *hnode;
#if defined(ATOMGC)
  CIAO_REGISTER struct sw_on_key_node *first_erased = NULL;
#endif
  CIAO_REGISTER int i;
  CIAO_REGISTER TAGGED t0;

  for (i=0, t0=key & sw->mask;
       ;
       i+=sizeof(struct sw_on_key_node), t0=(t0+i) & sw->mask) {
    hnode = (struct sw_on_key_node *)&sw->tab.aschar[t0];
#if !defined(ATOMGC)
    if ((hnode->key==key 
#if defined(USE_ATOM_LEN)
         && hnode->value.atomp->atom_len == str_len
#endif
         && strcmp(hnode->value.atomp->name, str)==SAME) ||
        !hnode->key)
      return hnode;
#else
    if ((hnode->key == key) 
#if defined(USE_ATOM_LEN)
        && hnode->value.atomp->atom_len == str_len
#endif
        && (strcmp(hnode->value.atomp->name, str) == SAME))
      return hnode;
    else if (!hnode->key)
      return first_erased ? first_erased : hnode;
    else if (hnode->key == 1 && !first_erased)
      first_erased = hnode;
#endif
  }
}



TAGGED init_atom_check(str)
     char *str;
{
  CIAO_REGISTER struct sw_on_key_node *hnode;
  unsigned int hashcode = 0;
  int count, size;
  ENG_INT current_mem = total_mem_count;
  CIAO_REGISTER unsigned char *c = (unsigned char *)str;

#if defined(USE_ATOM_LEN)
  unsigned int atom_len = 0;
#endif
  
  while (*c) {
    hashcode = (hashcode<<1) + *c++;
#if defined(USE_ATOM_LEN)
    atom_len++;
#endif
  }

  hashcode = (hashcode<<3)+4;	/* low bits are masked away; ensure it is
				   not 0 --- it cannot be 1, either, which is
				   very important for atom GC */
/*
  while ((hnode=incore_gethash(prolog_atoms, (TAGGED)hashcode)) &&
	 hnode->key==(TAGGED)hashcode &&
	 strcmp(hnode->value.atomp->name, str)!=SAME)
    hashcode += 233509<<3;         233509 is prime, and so is
				   233509&0x1ffff, 233509&0x0ffff, ...,
				   233509&0x00007
*/

#if defined(USE_ATOM_LEN)
  hnode = atom_gethash(prolog_atoms, (TAGGED)hashcode, str, atom_len);
#else
  hnode = atom_gethash(prolog_atoms, (TAGGED)hashcode, str);
#endif

#if defined(ATOMGC)
  if (hnode->key && hnode->key != 1) /* if ATOMGC, '1' marks freed position */
#else
  if (hnode->key)
#endif
    return MakeAtom(hnode->value.atomp->index);

  if ((count=prolog_atoms->count) > (INDEXMASK>>2)) {
    SERIOUS_FAULT("the atom table is full");
  }

  /* Check for a full table, and expand if needed */

  if ((count+1)<<1 > (size=SwitchSize(prolog_atoms))) {
    struct sw_on_key *new_table = new_switch_on_key(size<<1, NULL);
    CIAO_REGISTER int i;
    CIAO_REGISTER struct sw_on_key_node *h1, *h2;

#if defined(ATOMGC) && defined(DEBUG)
    /*printf("Reallocing atom table (count = %d)\n", count);*/
#endif

    for (i=0; i<count; i++){
#if defined(ATOMGC)   /* Actually, if the table is full, no entry should be
                         null... */
       /* size *= 2; */
      if ((h1 = atmtab[i]) != NULL) { /* There may be holes when doing GC */
#if defined(USE_ATOM_LEN)
        atmtab[i] = h2 = atom_gethash(new_table, 
                                      h1->key, 
                                      str,
                                      h1->value.atomp->atom_len);
#else
        atmtab[i] = h2 = atom_gethash(new_table, h1->key, str);
#endif
        h2->key = h1->key;
        h2->value.atomp = h1->value.atomp;
      }
#else
      h1 = atmtab[i];
#if defined(USE_ATOM_LEN)
      atmtab[i] = h2 = atom_gethash(new_table, 
                                    h1->key, 
                                    str,
                                    h1->value.atomp->atom_len);
#else
      atmtab[i] = h2 = atom_gethash(new_table, h1->key, str);
#endif
      h2->key = h1->key;
      h2->value.atomp = h1->value.atomp;
#endif
    }

    atmtab = (struct sw_on_key_node **)checkrealloc((TAGGED *)atmtab,
                                                    count*sizeof(h1),
                                                    2*count*sizeof(h1));

#if defined(ATOMGC)      /* Clean up the upper part of the new atom table */
    for (i = count; i < 2*count; i++)
      atmtab[i] = NULL;
    new_table->next_index = count;
#endif

    checkdealloc((TAGGED *)prolog_atoms,
                 sizeof(struct sw_on_key)+
                 (size-ANY)*sizeof(struct sw_on_key_node));
    new_table->count = count;
#if defined(USE_ATOM_LEN)
    hnode = atom_gethash(new_table, (TAGGED)hashcode, str, atom_len);
#else
    hnode = atom_gethash(new_table, (TAGGED)hashcode, str);
#endif
    prolog_atoms = new_table;
    size = size << 1;
  }
  hnode->key = (TAGGED)hashcode;

#if defined(ATOMGC)
    size = size >> 1;     /* atmtab size is one half of prolog_atoms size */
    count = prolog_atoms->next_index;
    while(atmtab[count])                  /* There must be one free entry */
      count =  (count + 1) % size;
    /*prolog_atoms->next_index+1 == size ? 0 : prolog_atoms->next_index+1;*/
    /* next_index should point to a free entry in the table */
    prolog_atoms->next_index = count;
#endif

#if defined(USE_ATOM_LEN)
  hnode->value.atomp = new_atom_check((unsigned char *)str, atom_len, count);
#else
  hnode->value.atomp = new_atom_check((unsigned char *)str, count);
#endif
  atmtab[count] = hnode;

  prolog_atoms->count++;

  INC_MEM_PROG((total_mem_count - current_mem));

  return MakeAtom(count);
}


/* make large object on the heap */
TAGGED make_large(Arg,ptr)
     Argdecl;
     CIAO_REGISTER TAGGED *ptr;
{
  CIAO_REGISTER TAGGED *h = w->global_top;
  TAGGED f = *ptr;
  int ar = LargeArity(f);
  CIAO_REGISTER int i;

  for (i=0; i<ar; i++)
    *h++ = *ptr++;
  *h++ = f;

  w->global_top = h;
  return Tag(STR, h-ar-1);
}


/*
struct numstack {
  TAGGED *end;
  struct numstack *next;
};
*/


/* Should be non-shared */

/*static TAGGED *numstack_top;*/	                 /* stack pointer */
/*static struct numstack *numstack_first;*/       /* first block in chain */
/*static struct numstack *numstack_last;*/         /* last block in chain */
/*TAGGED *numstack_end;*/	 /* limit of last block, or NULL if undef */

#define NumstackBlockSize(b) ((char *)b->end - (char *)b)

void numstack_init(Arg)
     Argdecl;
{
  int lsize = 1020;

  Numstack_First = (struct numstack *)checkalloc(lsize);
  Numstack_First->next = NULL;
  Numstack_First->end = (TAGGED *)((char *)Numstack_First + lsize);

  Numstack_End = NULL;
}


static void numstack_overflow(Arg)
     Argdecl;
{
  struct numstack *next;

  if (!Numstack_End) {
    while ((next=Numstack_First->next))
      checkdealloc((TAGGED *)Numstack_First,
                   NumstackBlockSize(Numstack_First)),
	Numstack_First = next;

    Numstack_Last = Numstack_First;
  } else {
    int lsize = 2*NumstackBlockSize(Numstack_Last);

    Numstack_Last->next = next = (struct numstack *)checkalloc(lsize);
    next->next = NULL;
    next->end = (TAGGED *)((char *)next + lsize);
    Numstack_Last = next;
  }
  Numstack_Top = (TAGGED *)(Numstack_Last+1);
  Numstack_End = Numstack_Last->end;
}


TAGGED bn_call(Arg, f, x, y, op)
     Argdecl;
     int (*f)();
     TAGGED x, y;
     INSN *op;
{
  int req, ar;
  CIAO_REGISTER TAGGED **spp, *h;
  TAGGED xx[2], yy[2];
  /*extern bn_from_float();*/

  if (f!=bn_from_float) {
    if (IsFloat(x))
      x = bn_call(Arg,bn_from_float, x, 0, NULL);
    if (IsFloat(y))
      y = bn_call(Arg,bn_from_float, y, 0, NULL);
  }

  if (TagIsSTR(x))
    x = (TAGGED)TagToSTR(x);
  else if (TagIsSmall(x))
    xx[0] = MakeFunctorFix,
    xx[1] = GetSmall(x),
    x = (TAGGED)xx;

  if (TagIsSTR(y))
    y = (TAGGED)TagToSTR(y);
  else if (TagIsSmall(y))
    yy[0] = MakeFunctorFix,
    yy[1] = GetSmall(y),
    y = (TAGGED)yy;

  if (op) {
    spp = &Arg->global_top;
    if ((req=(*f)(x, y, *spp, Heap_End-(*(long *)op)))){
      while (Numstack_Top+req > Numstack_End)
        numstack_overflow(Arg);
      if ((*f)(x, y, Numstack_Top, Numstack_End))
        SERIOUS_FAULT("miscalculated size of bignum");
      explicit_heap_overflow(Arg,req+(*(long *)op), (*(short *)(op+2)));
      if (bn_plus(Numstack_Top, 0, *spp, Heap_End-(*(long *)op)))
        SERIOUS_FAULT("miscalculated size of bignum");
    }
  }
  else {
    spp = &Numstack_Top;
    while (!Numstack_End || (*f)(x, y, Numstack_Top, Numstack_End))
      numstack_overflow(Arg);
  }

  h = *spp;
  ar = LargeArity(h[0]);
  if (ar==2 && IntIsSmall((int)h[1]))
    return MakeSmall(h[1]);
  else
    {
      (*spp) += ar+1;
      h[ar] = h[0];
      return Tag(STR, h);
    }
}

TAGGED make_integer_check(Arg,i, op)
     Argdecl;
     ENG_INT i;
     INSN *op;
{
  CIAO_REGISTER TAGGED *h;

  if (IntIsSmall(i))
    return MakeSmall(i);

  if (op)
    {				/* compute final value */
      h = w->global_top;
      if (HeapDifference(h, Heap_End) < (*(long *)op)+3)
	explicit_heap_overflow(Arg,(*(long *)op)+3, (*(short *)(op+2))),
	h = w->global_top;

      w->global_top = h+3;
    }
  else
    {				/* compute intermediate value */
      h = Numstack_Top;
      if (h+3 > Numstack_End)
	numstack_overflow(Arg),
	h = Numstack_Top;

      Numstack_Top = h+3;
    }

  HeapPush(h, MakeFunctorFix);
  HeapPush(h, (TAGGED)i);
  HeapPush(h, MakeFunctorFix);
  return Tag(STR, h-3);
}

TAGGED make_float_check(Arg, i, op)
     Argdecl;
     ENG_FLT i;
     INSN *op;
{
  CIAO_REGISTER TAGGED *h;
  CIAO_REGISTER TAGGED *p = (TAGGED *)(&i);

  if (op)
    {				/* compute final value */
      h = w->global_top;
      if (HeapDifference(h, Heap_End) < (*(long *)op)+4)
	explicit_heap_overflow(Arg,(*(long *)op)+4, (*(short *)(op+2))),
	h = w->global_top;

      w->global_top = h+4;
    }
  else
    {				/* compute intermediate value */
      h = Numstack_Top;
      if (h+4 > Numstack_End)
	numstack_overflow(Arg),
	h = Numstack_Top;

      Numstack_Top = h+4;
    }

  HeapPush(h, MakeFunctorFloat);
  HeapPush(h, p[0]);
  HeapPush(h, p[1]);
  HeapPush(h, MakeFunctorFloat);
  return Tag(STR, h-4);
}


TAGGED make_integer(Arg,i)
     Argdecl;
     ENG_INT i;
{
  CIAO_REGISTER TAGGED *h = w->global_top;

  HeapPush(h, MakeFunctorFix);
  HeapPush(h, (TAGGED)i);
  HeapPush(h, MakeFunctorFix);
  w->global_top = h;
  return Tag(STR, h-3);
}


TAGGED make_float(Arg,i)
     Argdecl;
     ENG_FLT i;
{
  CIAO_REGISTER TAGGED *p = (TAGGED *)(&i);
  CIAO_REGISTER TAGGED *h = w->global_top;

  HeapPush(h, MakeFunctorFloat);
  HeapPush(h, p[0]);
  HeapPush(h, p[1]);
  HeapPush(h, MakeFunctorFloat);
  w->global_top = h;
  return Tag(STR, h-4);
}


/* --------------------------------------------------------*/


/* Protect the creation of streams: several threads might want to create
   streams at once. */

extern LOCK stream_list_l;

struct stream_node *insert_new_stream(struct stream_node *new_stream){

  Wait_Acquire_lock(stream_list_l);
  new_stream->forward = root_stream_ptr;
  new_stream->backward = root_stream_ptr->backward;
  root_stream_ptr->backward->forward = new_stream;
  root_stream_ptr->backward = new_stream;
  Release_lock(stream_list_l);

  return new_stream;
}

struct stream_node *new_stream(streamname, streammode, streamfile)
     TAGGED streamname;
     char *streammode;
     FILE *streamfile;
{
  CIAO_REGISTER struct stream_node *s;

  s = (struct stream_node *)checkalloc(sizeof(struct stream_node));
  s->streamname = streamname;
  s->streammode = streammode[0];
  s->pending_char = -100;
  update_stream(s,streamfile);

  return insert_new_stream(s);
}


static int file_is_tty(file)
     FILE *file;
{
  extern int prolog_force_interactive;

  return (isatty(fileno(file)) ||
          (prolog_force_interactive && fileno(file)<3));
}


void update_stream(s,file)
     CIAO_REGISTER struct stream_node *s;
     FILE *file;
{
  s->label = MakeSmall(fileno(file));
  s->streamfile = file;
  if ((s->isatty = file_is_tty(file)))
    s = root_stream_ptr;
  s->last_nl_pos = 0;
  s->nl_count = 0;
  s->char_count = 0;		/* less than perfect */
}


#if defined(CREATE_NEW_STREAMS)
void update_std_streams()		/* called by restore/1 */
{
  struct
    stream_node *streamptr = root_stream_ptr, *next_ptr;

  do {
    next_ptr = streamptr->forward;
    if (streamptr->streamname!=ERRORTAG)
      fclose(streamptr->streamfile);
    checkdealloc(streamptr);
    streamptr = next_ptr;
  } while (streamptr!=root_stream_ptr);
  init_streams();
  init_streams_each_time(Arg);
}
#else
void update_std_streams()		/* called by restore/1 */
{
  struct stream_node *streamptr = root_stream_ptr->forward;

  while (streamptr!=root_stream_ptr) {         /* close any ghost streams */
    if (streamptr->streamname!=ERRORTAG)
      fclose(streamptr->streamfile);
    else			      /* check if std stream is a tty now */
      update_stream(streamptr,streamptr->streamfile);
    streamptr = streamptr->forward;
  }
}
#endif

/*-------------------------------------------------------*/

/* Inserts the definition of a predicate, either asserted, compiled,
   consulted, or qloaded. */

struct definition *new_functor(tagpname,arity)
     TAGGED tagpname;
     int arity;
{
  CIAO_REGISTER struct definition *func;
  CIAO_REGISTER int i;

  /* How to get the printable name (i.e., accessing to the atom part):

  if ((tagpname & 3) == 0)
    printf("New predicate head %s, arity %d\n", GetString(tagpname), arity);
    */

  func = (struct definition *)checkalloc(sizeof(struct definition));
  for (i=0; i<sizeof(struct definition); i++)
    ((char *)func)[i] = 0;
  func->printname = tagpname;
  func->arity = arity;
  SetEnterInstr(func, ENTER_UNDEFINED);
  func->code.undinfo = NULL;
#if defined(PROFILE)
  func->no_of_calls = 0;
  func->time_spent = 0;
#endif
  return func;
}


/*------------------------------------------------------------*/

void expand_sw_on_key(psw,otherwise,deletep)
     struct sw_on_key **psw;
     struct try_node *otherwise;
     BOOL deletep;
{
  CIAO_REGISTER struct sw_on_key_node *h1, *h2;
  int size = SwitchSize(*psw);
  struct sw_on_key *newsw = new_switch_on_key(size<<1,otherwise);
  CIAO_REGISTER int j;

  for (j=size-1; j>=0; --j) {
    h1 = &(*psw)->tab.asnode[j];
    if (h1->key) {
      newsw->count++;
      h2 = incore_gethash(newsw,h1->key);
      h2->key = h1->key;
      h2->value.try = h1->value.try;
    }
  }

  if (deletep) {
    checkdealloc((TAGGED *)(*psw),sizeof(struct sw_on_key)+
		 (size-ANY)*sizeof(struct sw_on_key_node));
  } else leave_to_gc(TABLE, (char *)(*psw));

  (*psw) = newsw;
}


void add_definition(swp,node,key,def)
     struct sw_on_key **swp;
     struct sw_on_key_node *node;
     TAGGED key;
     struct definition *def;
{
  node->key=key;
  node->value.def=def;
  if (((*swp)->count+=1)<<1 > SwitchSize(*swp))
    expand_sw_on_key(swp,NULL,FALSE);
}


struct definition *insert_definition(swp,tagpname,arity,insertp)
     struct sw_on_key **swp;
     TAGGED tagpname;
     int arity;
     BOOL insertp;
{
  CIAO_REGISTER struct sw_on_key_node *keyval;
  struct definition *value = NULL;
  TAGGED key=SetArity(tagpname,arity);

  /* Lock here -- we do not want two different workers to add predicates
     concurrently. */

  Wait_Acquire_slock(prolog_predicates_l);
  keyval = (struct sw_on_key_node *)incore_gethash((*swp),key);

  if (keyval->key)                                    /* Already existent */
    value = keyval->value.def;
  else if (insertp){                                      /* New predicate */
    value=new_functor(tagpname, arity);
    add_definition(swp, keyval, key, value);
  }

  Release_slock(prolog_predicates_l);

  return value;
}





/*------------------------------------------------------------*/

/* Create a most general term for a given functor or small int. */
TAGGED make_structure(Arg,functor)
     Argdecl;
     CIAO_REGISTER TAGGED functor;
{
  CIAO_REGISTER int ar = Arity(functor);
  CIAO_REGISTER TAGGED *h = w->global_top;

  if (ar==0 || !TagIsATM(functor))
    return functor;
  else if (functor==functor_list) {
    ConstrHVA(h);
    ConstrHVA(h);
    w->global_top = h;
    return Tag(LST,HeapOffset(h,-2));
  } else {
    HeapPush(h,functor);
    do {
      ConstrHVA(h);
    } while (--ar);
    w->global_top = h;

    return Tag(STR,h-Arity(functor)-1);
  }
}

struct definition *find_definition(swp,term,argl,insertp)
     struct sw_on_key **swp;
     TAGGED term,**argl;
     BOOL insertp;
{
  int arity;

  if (TagIsStructure(term)) {
    TAGGED f = TagToHeadfunctor(term);

    *argl = TagToArg(term,1);
    term = SetArity(f,0);
    arity = Arity(f);
  } else
    if (TagIsLST(term)) {
      *argl = TagToLST(term);
      term = atom_list;
      arity = 2;
    }
    else
      arity = 0;

  return insert_definition(swp,term,arity,insertp);
}


static struct definition *parse_1_definition();

/* Enter here with a *definition name* as generated by the compiler. */
struct definition *parse_definition(complex)
     TAGGED complex;
{
  TAGGED a,b;

  if (TagIsSTR(complex) && (TagToHeadfunctor(complex)==functor_slash)) {
    DerefArg(a,complex,1);
    DerefArg(b,complex,2);
    return parse_1_definition(a,b);
  }
  else return NULL;
}

static struct definition **find_subdef_chain(f, clause_no)
     struct definition *f;
     int clause_no;
{
  struct incore_info *d = f->code.incoreinfo;
  CIAO_REGISTER struct emul_info *ep;

  if (clause_no && clause_no <= *(int *)d->clauses_tail)
    for (ep = d->clauses; --clause_no; ep = ep->next)
      ;
  else {
    ep = (struct emul_info *)d->clauses_tail;
    if (ep->objsize || ep->next == NULL) {
      ep = (struct emul_info *)checkalloc(sizeof(struct emul_info));
      ep->subdefs = NULL;
      ep->objsize = 0;
      ep->next = (struct emul_info *)(*(int *)d->clauses_tail + 1);
      *d->clauses_tail = ep;
      d->clauses_tail = &ep->next;
    }
  }
  return &ep->subdefs;
}


static struct definition *parse_1_definition(tagname, tagarity)
     TAGGED tagname,tagarity;
{
  int arity;

  if (!TagIsSmall(tagarity))
    return NULL;
  arity = GetSmall(tagarity);
  if (TagIsSTR(tagname) && (TagToHeadfunctor(tagname)==functor_minus))
    /* "internal" predicate */
    {
      struct definition *f, *f1, **pf;
      TAGGED tmp;
      int i, subdef_no, clause_no;

      DerefArg(tmp,tagname,2);
      subdef_no = GetSmall(tmp);
      DerefArg(tagname,tagname,1);

      DerefArg(tmp,tagname,2);
      clause_no = GetSmall(tmp);
      DerefArg(tagname,tagname,1);

      f = parse_definition(tagname);
      if (f==NULL)
	return NULL;
      i = f->predtyp;
      if (i > ENTER_FASTCODE_INDEXED)
	return NULL;
      pf = find_subdef_chain(f, clause_no);

      if (!(*pf))
	f = *pf = new_functor((TAGGED)f|3, arity);
      else
	{
	  for (i=1, f1 = *pf;
	       !(f1->printname&2);
	       i++, f1 = (struct definition *)TagToPointer(f1->printname))
	    if (i==subdef_no) break;
	
	  if (i==subdef_no) return f1;
	  f1->printname = (TAGGED)(f=new_functor(f1->printname, arity))|1;
	}
      return f;
    }

  if (TagIsATM(tagname)) 
    return insert_definition(predicates_location,tagname,arity,TRUE);
  else return NULL;
}

static BOOL cunify_args_aux PROTO((struct worker *w, int arity, TAGGED *pt1, TAGGED *pt2, TAGGED *x1, TAGGED *x2));
static BOOL cunify_aux PROTO((struct worker *w, TAGGED x1, TAGGED x2));

/* Unify the argument lists of two compund terms.
 * pt1 - first argument list.
 * pt2 - second argument list.
 * arity - number of arguments.
 */
BOOL cunify_args(Arg,arity,pt1,pt2)
     Argdecl;
     CIAO_REGISTER int arity;
     CIAO_REGISTER TAGGED *pt1, *pt2;
{
  TAGGED x1, x2;
  BOOL result =
    (cunify_args_aux(Arg,arity,pt1,pt2,&x1,&x2) && cunify_aux(Arg,x1,x2));
  CIAO_REGISTER int i = w->value_trail;

  if (i<InitialValueTrail) {
    pt2 = (TAGGED *)w->node;
    do {
      pt1 = (TAGGED *)pt2[i++];
      *pt1 = pt2[i++];
    } while (i<InitialValueTrail);
    w->value_trail = InitialValueTrail;
  }

  return result;
}


static BOOL cunify_args_aux(Arg,arity,pt1,pt2,x1,x2)
     Argdecl;
     CIAO_REGISTER int arity;
     CIAO_REGISTER TAGGED *pt1, *pt2;
     TAGGED *x1, *x2;
{
  CIAO_REGISTER TAGGED 
    t1 = ~0,
    t2 = ~0,
    t3;

  /* Terminating unification of complex structures: Forward args of pt2 to
     args of pt1 using choice stack as value cell.  When done, reinstall
     values. */

  if (ChoiceYounger(ChoiceOffset(w->node,2*CHOICEPAD-w->value_trail),w->trail_top))
				/* really: < 2*arity */
    choice_overflow(Arg,2*CHOICEPAD);
  for (; arity>0; --arity) {
    t1 = *pt1, t2 = *pt2;
    if (t1 != t2) {
      DerefHeapSwitch(t1,t3,goto noforward;);
      DerefHeapSwitch(t2,t3,goto noforward;);
      if (t1!=t2 && IsComplex(t1&t2)) {
        /* replace smaller value by larger value,
           using choice stack as value trail */
        CIAO_REGISTER TAGGED *b = (TAGGED *)w->node;
        CIAO_REGISTER int i = w->value_trail;

        if (t1>t2)
          b[--i] = *pt1,
            b[--i] = (TAGGED)pt1,
            *pt1 = t2;
        else
          b[--i] = *pt2,
            b[--i] = (TAGGED)pt2,
            *pt2 = t1;
        w->value_trail = i;
      noforward:
        if (arity>1 && !cunify_aux(Arg,t1,t2))
          return FALSE;
      } else if (t1 != t2)
        return FALSE;
    }
    (void)HeapNext(pt1);
    (void)HeapNext(pt2);
  }

  *x1 = t1, *x2 = t2;

  if (ChoiceYounger(ChoiceOffset(w->node,CHOICEPAD-w->value_trail),w->trail_top))
    choice_overflow(Arg,CHOICEPAD);
  return TRUE;
}


/* Unify two terms.
 * x1 - first term
 * x2 - second term
 */
BOOL cunify(Arg,x1,x2)
     Argdecl;
     TAGGED x1, x2;
{
  BOOL result = cunify_aux(Arg,x1,x2);
  CIAO_REGISTER int i = w->value_trail;

  if (i<InitialValueTrail) {
    CIAO_REGISTER TAGGED *pt1, *pt2;

    pt2 = (TAGGED *)w->node;
    do {
      pt1 = (TAGGED *)pt2[i++];
      *pt1 = pt2[i++];
    } while (i<InitialValueTrail);
    w->value_trail = InitialValueTrail;
  }

  return result;
}


#if defined(DEBUG)
TAGGED cctagtosva(TAGGED u)
{
  return CTagToSVA(u);
}
#endif


static BOOL cunify_aux(Arg,x1,x2)
     Argdecl;
     TAGGED x1, x2;
{
  CIAO_REGISTER TAGGED u, v, t1;

 in:
  u=x1, v=x2;

  SwitchOnVar(u,t1,
	      {goto u_is_hva;},
	      {goto u_is_cva;},
	      {goto u_is_sva;},
	      ;);

				/* one non variable */
#if defined(UNDEFINED)
  /* #define SwitchOnVar(Reg,Aux,HVACode,CVACode,SVACode,NVACode) */
    for (;;) { 
      if (!IsVar(v)) 
        ;
      else if (v & TagBitSVA) {
        RefSVA(t1,v); 
        if (v!=t1) {
          v=t1; 
          continue;
        } else { 
          /* BindSVA(v,u); */
          if (CondSVA(v)) 
            TrailPush(w->trail_top,v); 
          CTagToSVA(v) = u; 
          goto win;
        } 
      } else if (!(v & TagBitCVA)) {
        RefHVA(t1,v); 
        if (v!=t1) {
          v=t1;
          continue;
        } else {
          BindHVA(v,u);
          goto win;
        } 
      } else { 
        RefCVA(t1,v); 
        if (v!=t1) {
          v=t1; 
          continue;
        } else {
          BindCVA(v,u); 
          Wake; 
          goto win;
        }
      } 
      break; 
    } 
#endif

  SwitchOnVar(v,t1,
	      { BindHVA(v,u); goto win; },
	      { BindCVA(v,u); Wake; goto win; },
	      { BindSVA(v,u); goto win; },
	      ;);


				/* two non variables */
  if (!(v ^= u))		/* are they equal? */
    goto win;
  else if (v>=QMask)		/* not the same type? */
    goto lose;
  else if (!(u & TagBitComplex)) /* atomic? (& not LNUM)*/
    goto lose;
  else if (!(u & TagBitFunctor)) /* list? */
    {
      v ^= u;			/* restore v */
      if (cunify_args_aux(Arg,2,TagToCar(u),TagToCar(v),&x1,&x2))
	goto in;
      else
	goto lose;
    }
  else				/* structure. */
    {
      v ^= u;			/* restore v */
      if (TagToHeadfunctor(u) != (t1=TagToHeadfunctor(v)))
	goto lose;
      else if (t1&QMask)	/* large number */
	{
	  int i;
	
	  for (i = LargeArity(t1)-1; i>0; i--)
	    if (CTagToArg(u,i) != CTagToArg(v,i)) goto lose;
	  goto win;
	}
      if (cunify_args_aux(Arg,Arity(t1),TagToArg(u,1),TagToArg(v,1),&x1,&x2))
	goto in;
      else
	goto lose;
    }

 u_is_hva:
  SwitchOnVar(v,t1,
	      { if (u==v)
		  ;
		else if (YoungerHeapVar(TagToHVA(v),TagToHVA(u)))
		  BindHVA(v,u)
		else
		  BindHVA(u,v); },
	      { BindHVA(u,v); },
	      { BindSVA(v,u); },
	      { BindHVA(u,v); });
  goto win;

 u_is_cva:
  SwitchOnVar(v,t1,
	      { BindHVA(v,u); },
	      { if (u==v)
		  ;
		else if (YoungerHeapVar(TagToCVA(v),TagToCVA(u)))
		  { BindCVA(v,u); Wake; }
		else
		  { BindCVA(u,v); Wake; } },
	      { BindSVA(v,u); },
	      { BindCVA(u,v); Wake; });
  goto win;

 u_is_sva:
  for (; TagIsSVA(v); v = t1)
    {
      RefSVA(t1,v);
      if (v == t1)
	{
	  if (u==v)
	    ;
	  else if (YoungerStackVar(TagToSVA(v),TagToSVA(u)))
	    BindSVA(v,u)
	  else
	    BindSVA(u,v);
	  goto win;
	}
    }
  BindSVA(u,v);

 win:
  return TRUE;

 lose:
  return FALSE;
}


ENG_INT get_integer(t)
     CIAO_REGISTER TAGGED t;
{
  /* small int's taken care of by GetInteger() */

  if (LargeIsFloat(t))
    return get_float(t);
  else
    return (ENG_INT)CTagToArg(t,1);
}

ENG_FLT get_float(t)
     CIAO_REGISTER TAGGED t;
{
  /* small int's taken care of by GetFloat() */

  if (!LargeIsFloat(t)) {
    CIAO_REGISTER int /* i, */ /* unused */
      ar = LargeArity(TagToHeadfunctor(t))-1;
    ENG_FLT f = (ENG_INT)CTagToArg(t,ar);

    while (ar>1) {
      unsigned long u = CTagToArg(t,--ar);

      if (u & 0x80000000)	/* trouble on some machines */
        f = f*4294967296.0 + 2147483648.0 + (u - 0x80000000);
      else
        f = f*4294967296.0 + u;
    }

    return f;
  }

  {
    ENG_FLT f;
    CIAO_REGISTER TAGGED *p = (TAGGED *)(&f);

    p[0] = CTagToArg(t,1);
    p[1] = CTagToArg(t,2);
    return f;
  }
}


/* '$stream'(<address>,<id>) <-- (struct stream_node *) */

TAGGED ptr_to_stream_noalias(Arg, n)
     Argdecl;
     CIAO_REGISTER struct stream_node *n;
{
  CIAO_REGISTER TAGGED *pt1 = w->global_top;

  /*
  printf("(int)n is %ud\n", (int)n);
  printf("n->label is %ud\n", n->label);
  */

  HeapPush(pt1,functor_Dstream);
  HeapPush(pt1,PointerToTerm(n));
  HeapPush(pt1,n->label);
  return (w->global_top=pt1, Tag(STR,HeapOffset(pt1,-3)));
}


/* '$stream'(<address>,<id>) <-- (struct stream_node *) */
/* or */
/* <stream_alias> <-- (struct stream_node *) */
TAGGED ptr_to_stream(Arg,n)
     Argdecl;
     CIAO_REGISTER struct stream_node *n;
{
  if (n==stream_user_input)
    return atom_user_input;
  if (n==stream_user_output)
    return atom_user_output;
  if (n==stream_user_error)
    return atom_user_error;

  return ptr_to_stream_noalias(Arg, n);
}



/* '$stream'(<address>,<id>) --> (struct stream_node *)
                          --> NULL, if invalid
   'r' - read mode,  streammode=[rs]
   'w' - write mode, streammode=[was]
   'x' - any mode,   streammode=[rwas]
   'y' - any mode but no standard streams  */
struct stream_node *stream_to_ptr(t, mode)
     CIAO_REGISTER TAGGED t;
     int mode;
{
  CIAO_REGISTER struct stream_node *n = NULL;
  CIAO_REGISTER TAGGED x1, x2;

  DerefSwitch(t,x1,;);

  if (TagIsATM(t))
    {
      if (mode=='y')
	n = NULL;
      else if (t==atom_user)
	n = (mode=='r' ? stream_user_input : stream_user_output);
      else if (t==atom_user_input)
	n = stream_user_input;
      else if (t==atom_user_output)
	n = stream_user_output;
      else if (t==atom_user_error)
	n = stream_user_error;
    }
  else if (TagIsSTR(t) && (TagToHeadfunctor(t) == functor_Dstream))
    {
      DerefArg(x1,t,1);
      DerefArg(x2,t,2);
      if (!TagIsSmall(x1) || !TagIsSmall(x2) ||
	  (n=TagToStream(x1), n->label != x2))
	n = NULL;
    }

  if (((mode=='r') && (n!=NULL) && (n->streammode=='w'||n->streammode=='a')) ||
      ((mode=='w') && (n!=NULL) && (n->streammode=='r')))
    return NULL;
  else
    return n;
}

/* Similar to stream_to_ptr(), but giving an error code */

struct stream_node *stream_to_ptr_check(t, mode, errcode)
     CIAO_REGISTER TAGGED t;
     int mode; /* not 'y' */
     int *errcode;
{
  CIAO_REGISTER struct stream_node *n = NULL;
  CIAO_REGISTER TAGGED x1, x2;

  DerefSwitch(t,x1,{*errcode = INSTANTIATION_ERROR; return NULL;});

  if (TagIsATM(t))
    {
      if (t==atom_user)
	n = (mode=='r' ? stream_user_input : stream_user_output);
      else if (t==atom_user_input)
	n = stream_user_input;
      else if (t==atom_user_output)
	n = stream_user_output;
      else if (t==atom_user_error)
	n = stream_user_error;
    }
  else if (TagIsSTR(t) && (TagToHeadfunctor(t) == functor_Dstream))
    {
      DerefArg(x1,t,1);
      DerefArg(x2,t,2);
      if (!TagIsSmall(x1) || !TagIsSmall(x2) ||
	  (n=TagToStream(x1), n->label != x2))
	n = NULL;
    }

  if (n==NULL) {
    *errcode = TYPE_ERROR(STREAM_OR_ALIAS);
    return NULL;
  }

  if (mode=='r') {
    if (n->streammode=='w'||n->streammode=='a') {
      *errcode = NO_READ_PERMISSION;
      return NULL;
    }
  } else if (mode=='w') {
    if (n->streammode=='r') {
      *errcode = NO_WRITE_PERMISSION;
      return NULL;
    }
  }

  return n;
}
