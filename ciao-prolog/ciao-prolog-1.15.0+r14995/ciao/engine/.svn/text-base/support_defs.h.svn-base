bool_t cunify(Argdecl, tagged_t x1, tagged_t x2);
bool_t cunify_args(Argdecl, int arity, tagged_t *pt1, tagged_t *pt2);
ENG_FLT get_float(register tagged_t t);
ENG_INT get_integer(register tagged_t t);
bool_t float_is_finite(register tagged_t t);
tagged_t bn_call(Argdecl, int (*f) (/* ??? */), tagged_t x, tagged_t y, bcp_t op);
tagged_t init_atom_check(char *str);
tagged_t make_float(Argdecl, ENG_FLT i);
tagged_t make_float_check(Argdecl, ENG_FLT i, bcp_t op);
tagged_t make_integer(Argdecl, ENG_INT i);
tagged_t make_integer_check(Argdecl, ENG_INT i, bcp_t op);
tagged_t make_large(Argdecl, register tagged_t *ptr);
tagged_t make_structure(Argdecl, register tagged_t functor);
definition_t *find_definition(sw_on_key_t **swp, tagged_t term, tagged_t **argl, bool_t insertp);
definition_t *insert_definition(sw_on_key_t **swp, tagged_t tagpname, int arity, bool_t insertp);
definition_t *new_functor(tagged_t tagpname, int arity);
definition_t *parse_definition(tagged_t complex);
stream_node_t *new_stream(tagged_t streamname, char *streammode, FILE *streamfile);
stream_node_t *stream_to_ptr(register tagged_t t, int mode);
stream_node_t *stream_to_ptr_check(register tagged_t t, int mode, int *errcode);
void add_definition(sw_on_key_t **swp, sw_on_key_node_t *node, tagged_t key, definition_t *def);
void expand_sw_on_key(sw_on_key_t **psw, try_node_t *otherwise, bool_t deletep);
void failc(char *mesg);
void numstack_init(Argdecl);
/* void update_std_streams(void); */
bool_t prolog_show_nodes(Argdecl);
bool_t prolog_show_all_nodes(Argdecl);
bool_t start_node(Argdecl);
void show_nodes(Argdecl, node_t *cp, node_t *end);
