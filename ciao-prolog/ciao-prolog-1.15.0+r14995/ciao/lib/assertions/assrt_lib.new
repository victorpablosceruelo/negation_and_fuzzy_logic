:- module(assrt_lib,
	[
	    set_libs/2,
	    get_code_and_norm_assertions/2,
	    get_code_and_related_assertions/5,
	    get_code_and_related_assertions_opts/6,
	    cleanup_code_and_related_assertions/0, 
	    check_code_and_assrt_syntax/1,
	    clause_read/7,

	    generate_asr_file/2,
	    read_asr_file/2,
	    rel_data/1
	],
	[
	    assertions, basicmodes, regtypes
	]).

:- reexport(library('assertions/assrt_norm'),
	[ assertion_read/9,
	  assertion_body/7,
	  normalize_assertions/2,
	  normalize_assertions/3,
	  normalize_assertion/9,
	  norm_goal_prop/3, 
	  denorm_goal_prop/3
	]).

:- use_module(library('assertions/c_itf_props')).

:- comment(title,"Assertion processing library").

:- comment(author,"Manuel Hermenegildo").

:- comment(module,"

This module defines some predicates which are useful for writing
programs which process assertions (as defined in the @lib{assertions}
library). The exported predicates allow reading assertions in all
acceptable syntactic forms and converting them to a normalized format.

If you want to have access to some of the declarations read by the
predicates exported by this file it is also necessary to include the
library @lib{compiler/c_itf}.

").

:- comment(bug, "Should go into higher order properties and check the
   arguments for import/export also (and should probably look at the
   meta-predicate declarations for these)?").

% ISO-Prolog compatibility libraries
:- use_module(library(aggregates),[findall/3]).
:- use_module(library(dynamic)).  
:- use_module(library(read)).
:- use_module(library(write)).

% Other libraries
:- use_module(library(fastrw)).
:- use_module(library('compiler/c_itf')).
:- use_module(library(ctrlcclean), 
      [ctrlc_clean/1,delete_on_ctrlc/2,ctrlcclean/0]).
:- use_module(library(errhandle)).  
:- use_module(library(miscprops)).
:- use_module(library(system),
	[fmode/2,chmod/2,file_exists/1,file_exists/2,delete_file/1]).
:- use_module(library('compiler/translation'),
	[expand_clause/6,expand_goal/4,del_goal_trans/1,del_clause_trans/1]).

%% ---------------------------------------------------------------------------
:- pred asr_version(int) # "Contains a version number which identifies
   the @tt{.asr} files associated with this version of the assertion
   library. Should be changed every time changes are made which render
   the @tt{.asr} files incompatible, since this forces recomputation
   of all such files.".

asr_version('1.3.2').

%% ---------------------------------------------------------------------------
:- pred set_libs(go(OldLibs),go(NewLibs)) :: list(atom) * list(atom) 

# "The arguments contain library directories that will be used to
   locate files used as modules, syntax files, or which appear in
   include declarations. @var{OldLibs} is the current set of libraries
   and @var{NewLibs} the new one.".
%% ---------------------------------------------------------------------------

:- multifile library_directory/1.
:- dynamic library_directory/1.

set_libs(OldLibs,Libs) :-
	findall(D,retract(library_directory(D)),OldLibs),
	set_lib_dirs(Libs).

set_lib_dirs([]).
set_lib_dirs([H|T]) :- 
	assertz(library_directory(H)),
	set_lib_dirs(T).

%% ---------------------------------------------------------------------------
:- pred check_code_and_assrt_syntax(in(I)) :: filename
 
# "This predicate is useful for checking the syntax of the code and
   assertions in a file, as well as imports and exports.  Full
   (semantic) assertion checking must be done with the preprocessor.".
%% ---------------------------------------------------------------------------

check_code_and_assrt_syntax(I):-
	get_code_and_related_assertions(I,_M,_Base,_Suffix,_Dir),
	%% So that it can be used over and over again interactively
        cleanup_code_and_related_assertions.

%% ---------------------------------------------------------------------------
:- pred cleanup_code_and_related_assertions/0
 
# "Cleans up data asserted by assertion/code reader/normalizer.".
%% ---------------------------------------------------------------------------

cleanup_code_and_related_assertions :-
        cleanup_c_itf_data,
	retractall_fact(clause_read(_,_,_,_,_,_,_)),
	retractall_fact(assertion_read(_,_,_,_,_,_,_,_,_)).

%% ---------------------------------------------------------------------------
:- pred get_code_and_related_assertions(
	in(I),     go(M),    go(Base), go(Suffix), go(Dir) )
   ::   filename * moddesc * atom    * atom      * atom 
 

# "This is the main entry point to the @concept{assertion
   reader/normalizer}. Reads all declarations and code in @var{I} and
   leaves it asserted in the database, in the format defined in
   @lib{'compiler/c_itf'}. Clauses are stored in @pred{clause_read/7}.

   Also, it reads and normalizes @em{all} assertions in this file and
   all related files, leaving them asserted in @pred{assertion_read/9}
   facts. If up to date @tt{.asr} files exist for this or any of the
   related files, the assertion information is read directly from such
   @tt{.asr} files. @cindex{.asr files} Otherwise, the @tt{.pl} file
   is read and an up to date @tt{.asr} file is generated containing
   all assertions in the @tt{.pl} file, normalized and stored as
   @pred{assertion_read/9} facts.

   @var{M} is the name of the module defined by the file. @var{Base} is
   the absolute name of the file @var{I} but with no
   suffix. @var{Suffix} is the file suffix (e.g.,
   '@tt{.pl}'). @var{Dir} is the directory part of the filename (with
   no @tt{/} at the end).

   Since this predicate is intended for gathering file information for
   purposes which can be other than compilation to executable code
   (e.g., generating documentation or in the preprocessor) this
   predicate catches errors and proceeds in cases where file
   processing (e.g., during actual compilation) might normally abort.".

:- pred get_code_and_related_assertions_opts(
	in(I),     in(Opts),    go(M),    go(Base), go(Suffix), go(Dir) )
   ::   filename * list(atom) * moddesc * atom    * atom      * atom 

# "Version which accepts some options in @var{Opts}. In particular,
   @tt{'-v'} produces verbose output for debugging. Also passes
   on the options in @var{Opts} to pass two of the assertion
   normalizer. ".

%% ---------------------------------------------------------------------------


get_code_and_related_assertions(I,M,Base,Suffix,Dir):-
	get_code_and_related_assertions_opts(I,[],M,Base,Suffix,Dir).

get_code_and_related_assertions_opts(I,Opts,M,Base,Suffix,Dir):-
	(  ( prolog_flag(verbose_compilation,on,on) ; member('-v',Opts) )
	-> Verb = verbose
	;  Verb = quiet ),
        error_protect(ctrlc_clean(
		process_files_from(I, asr, any, 
		                   process_file_assertions(I,Verb,Opts), 
                                   false, false, needs_processing(I,Verb))
				 )),
	get_file_data(I,Base,M,Suffix,Dir).

get_code_and_norm_assertions(Base,M):-
	process_file_assertions_(Base,[]),
	defines_module(Base,M).

get_file_data(I,Base,M,Suffix,Dir):-
	substract_pl(I,_Main,Suffix),
        base_name(I,Base),
	defines_module(Base,M),
        file_data(Base, _PlName, Dir).

substract_pl(FPL,F,'.pl') :-
	atom_concat(F,'.pl',FPL),
	!. %% it ends in .pl
%% else, it does not end in .pl
substract_pl(F,F,'').


%% ---------------------------------------------------------------------------

:- pred clause_read(Base, Head, Body, VarNames, Source, Line0, Line1)

   # "After calling @pred{get_assertions_and_code/5} this predicate
      contains the clauses in the file. The format is the same as that
      of @pred{clause_of/7} in @lib{c_itf}".

:- data clause_read/7.

%% ---------------------------------------------------------------------------

:- pred needs_processing/3 # "Controls if a given file needs to be
   fully processed by the assertion reader or it suffices to read its
   @tt{.asr} file. This is controlled by the modification dates of the
   @tt{.pl} and @tt{.asr} files. It also depends on whether it is the
   main file (for which the code is always read) or a file used by
   it.".

%% Main file will be processed (read) even if it hasn't changed.
needs_processing(Base,I,_Verb) :- 
	base_name(I,Base),
	% format("*** needs_proc: Will process fully (later) ~w.asr~n",[Base]),
	!.
%% Aux file, valid .asr file, valid version: read .asr data
needs_processing(Base,_I,Verb) :- 
	\+ old_file_extension(Base, '.asr'),
	read_asr_file_(Base,Verb), % Fails if wrong version!
	!,
	fail.
%% Aux file, invalid .asr file or invalid version: generate .asr data (later).
needs_processing(_Base,_I,_Verb) :- 
	% format("*** needs_proc: Should generate (later) ~w.asr~n",[Base]),
	true.

%% ---------------------------------------------------------------------------

:- pred read_asr_file/2 # "Reads the data in the .asr file. Fails if
   version is different from current version (so that .asr will be
   regenerated).".

read_asr_file(Base,V) :-
	( ( prolog_flag(verbose_compilation,on,on) ; V=='-v' )
	-> Verb = verbose
	;  Verb = quiet ),
	retractall_fact(rel_data(_)),
	read_asr_file_(Base,Verb).

read_asr_file_(Base,Verb) :-
	atom_concat(Base,'.asr',AsrName),
        open(AsrName, read, Stream),
        current_input(CI),
        set_input(Stream),
        ( asr_version(V),
          read(v(V)), 
	  !
        ; verb_message(Verb,['{Old version in ',AsrName,'}']),
	  set_input(CI),
          close(Stream),
          fail
        ),
%%        working_directory(OldDir, Dir),
        verb_message(Verb,['{Reading ',AsrName]),
        read_asr_data_loop(Verb),
        set_input(CI),
        close(Stream),
        verb_message(Verb,'}').
%%        working_directory(_, OldDir).


%% read/1 version
%% read_asr_data_loop :-
%% 	repeat,
%% 	fast_read(X),
%% 	( X == end_of_file
%% 	; assertz_fact(X), % asserts clauses of assertion_read/9
%% 	  % format("*** Asserted: ~w~n",[X]),
%% 	  fail ).

%% fast_read/1 version (just fails at end of file)
read_asr_data_loop(Verb) :-
	(  fast_read(X)
	-> assertz_fact(X), % asserts clauses of assertion_read/9
	                    % ...and now also rel_data/1 (PBC)
	   % verb_message(Verb,[ 'Asserted: ',X]),
	   read_asr_data_loop(Verb)
	;  true ).

%% ---------------------------------------------------------------------------

:- pred process_file_assertions/4 # "Processes the assertions in a
   file, generating the corresponding @tt{.asr} file. In the case of the
   main file, also reads in the code.".

%% Main file
process_file_assertions(Base,I,_Verb,Opts) :- 
	base_name(I,Base),
	!,
	process_file_assertions_(Base,Opts).
process_file_assertions(Base,_I,Verb,_Opts) :-
%% Other files
	defines_module(Base,M),
	normalize_assertions(M,Base),
	generate_asr_file(Base,Verb,related).

process_file_assertions_(Base,Opts):-
	c_itf:comp_defines(Base), %% force generation of defines/5 data
	defines_module(Base,M),
	normalize_assertions(M,Base,Opts),
	%% We do not generate the asr file for main (it could be only 
        %% partly normalized due to -modes option
	%  generate_asr_file(Base,Verb,main), %% MH2
        %% c_itf erases the clauses, so we must save them here 
        %% (or do the processing inside c_itf...)
	%% Second translation -PBC
        activate_translation(Base,M,add_clause_trans),
        activate_translation(Base,M,add_goal_trans),
        expand_clause(0,0,M,_,_,_), % Translator initialization
	save_clause_of(Base,M),
	%% deactivate translations
	del_goal_trans(M),
	del_clause_trans(M).

save_clause_of(Base,M):-
	clause_of(Base,Head,Body,VarNames,Source,Line0,Line1),
        ( number(Head)
	-> H=Head,
	   B=Body
	 ; % do the "second expansion"
%	   io_aux:message(['{Original: ',(Head:-Body)]),
	   expand_clause(Head,Body,M,VarNames,H,BX),
%	   io_aux:message(['{Intermediate: ',(H:-BX)]),
	   expand_goal(BX,M,VarNames,B)
%	   io_aux:message(['{Expanded: ',(H:-B)])
	),
	% one more patch!!
	( var(VarNames) -> VarNames=[] ; true ),
	assertz_fact(clause_read(Base,H,B,VarNames,Source,Line0,Line1)),
	fail.
save_clause_of(_Base,_M).

:- push_prolog_flag(multi_arity_warnings,off).

generate_asr_file(Base,V) :-
	( ( prolog_flag(verbose_compilation,on,on) ; V=='-v' )
	-> Verb = verbose
	;  Verb = quiet ),
	generate_asr_file(Base,Verb,related).

:- pred generate_asr_file/3 # "Does the actual generation of the
   @tt{.asr} file. Only assertions related to exported predicates are
   saved. Assertions for non-exported predicates remain in the database
   only for the main file (@tt{main} in fourth argument).".

generate_asr_file(Base,Verb,Component) :-
	atom_concat(Base,'.asr',AsrName),
	verb_message(Verb,['{Generating ',AsrName]),
	file_data(Base, PlName, Dir),
        fmode(PlName, Mode),
        prolog_flag(fileerrors, OldFE, off),
        ( stream_of_file(AsrName, Dir, Stream, Ref) ->
            current_output(CO),
            set_output(Stream),
            asr_version(V),
            display_term(v(V)),
            write_asr_data_of(Base,Component),
            write_rel_data,
            set_output(CO),
            close(Stream),
            chmod(AsrName, Mode),
            erase(Ref)
        ;   message(['{In ',PlName]),
	    message(warning, ['cannot create ',AsrName]),
	    message('}'),
	    read_asr_file_(Base,Verb)
	),
	verb_message(Verb,'}'),
        set_prolog_flag(fileerrors, OldFE).

:- pop_prolog_flag(multi_arity_warnings).

%% Among other things, makes sure unfinished files are deleted on ctrlc
stream_of_file(Path, Dir, Stream, Ref) :-
        file_exists(Dir, 2), % Write permission
        ( file_exists(Path) -> delete_file(Path) ; true ),
        delete_on_ctrlc(Path, Ref),
        open(Path, write, Stream).

%% Normalization has occurred by now
write_asr_data_of(Base,Component) :-
	defines_module(Base,M),
	collect_prop_defs(Base,M,Component), %% MH1
	prolog_flag(write_strings, Old, on),
	print_exported_assertions_as_facts(Base,M,Component),
	set_prolog_flag(write_strings, Old).

%% Extra data for interfacing modules:
:- data rel_data/1.

write_rel_data:-
	rel_data(X),
	fast_write(rel_data(X)),
	fail.
write_rel_data.

%% user files: all assertions exported
print_exported_assertions_as_facts(Base,user(F),_Component) :-
	!,
	( assertion_read(PD,user(F),Status,Type,Body,Dict,S,LB,LE),
%%	  writeq(assertion_read(PD,user(F),Status,Type,Body,Dict,S,LB,LE)),
%%	  write(' .'), nl,
	  fast_write(assertion_read(PD,user(F),Status,Type,Body,Dict,S,LB,LE)),
	  fail
	; true ),
	( clause_of(Base,0,comment(P,CBody),VNs,S,L0,L1),
	  ( P = Fu/A ; functor(P,Fu,A) ),
	  defines_pred(Base,Fu,A),
	  fast_write(
		     clause_read(Base,0,comment(P,CBody),VNs,S,L0,L1)),
	  assertz_fact(
		     clause_read(Base,0,comment(P,CBody),VNs,S,L0,L1)),
	  fail
	; true ).
%% else, module: check for exports
print_exported_assertions_as_facts(Base,M,Component) :-
	( assertion_read(PD,M,Status,Type,Body,Dict,S,LB,LE),
	  functor(PD,F,A),
	  ( exports(Base, F, A, _DefType, _Meta)
	  ->
%%	  writeq(assertion_read(PD,M,Status,Type,Body,Dict,S,LB,LE)),
%%	  write(' .'), nl,
	     fast_write(assertion_read(PD,M,Status,Type,Body,Dict,S,LB,LE))
	   ; delete_assertion_if_not_main_file(Component,
	                 assertion_read(PD,M,Status,Type,Body,Dict,S,LB,LE))
	  ),
	  fail
	; true ),
	( clause_of(Base,0,comment(P,CBody),VNs,S,L0,L1),
	  ( P = Fu/A ; functor(P,Fu,A) ),
	  exports(Base,Fu,A,_DefType,_Meta),
	  fast_write(
		     clause_read(Base,0,comment(P,CBody),VNs,S,L0,L1)),
	  assertz_fact(
		     clause_read(Base,0,comment(P,CBody),VNs,S,L0,L1)),
	  fail
	; true ),
	print_reexported_assertions_as_facts(Base,M).

delete_assertion_if_not_main_file(main,_Assertion).
delete_assertion_if_not_main_file(related,Assertion):-
	retract_fact(Assertion).


%% :- data pending_reexport/4.

%% special case: take care also of assertions reexported by a module!
print_reexported_assertions_as_facts(Base,M) :-
	( exports(Base, F, A, _DefType, _Meta),
	  reexported_from(Base,M,F,A,MI),
	  functor(PD,F,A),
	  (  assertion_read(PD,MI,Status,Type,Body,Dict,S,LB,LE)
	  -> 
	     %% writeq(assertion_read(PD,M,Status,Type,Body,Dict,S,LB,LE)),
	     %% write(' .'), nl, 
	     fast_write(assertion_read(PD,M,Status,Type,Body,Dict,S,LB,LE))
	  ;  true
	     %% MH2 Actually, this seems to be working now
	     %% message(['{In ',Base,'.pl']),
	     %% message(warning,['pending reexport for ',F,'/',A,' from ',MI]),
	     %% %% asserta_fact(pending_reexport(PD,Base,M,MI))
   	     %% message('}')
	  ),
	  fail
	; true ).

%% Only one solution needed
reexported_from(Base,M,F,A,MI) :- 
	\+ defines_pred(Base, F, A),
	imports(M, MI, F, A),
	!.

imports(M, MI, F, A):- imports(M, MI, F, A, _).

:- set_prolog_flag(multi_arity_warnings, off).

verb_message(verbose,Message) :-
	io_aux:message(Message).
verb_message(quiet,_Message).

verb_message(verbose,Type,Message) :-
	io_aux:message(Type,Message).
verb_message(quiet,_Type,_Message).

:- set_prolog_flag(multi_arity_warnings, on).

%% ---------------------------------------------------------------------------
%% Made behaviour depend on whether it is main file or component 
%% Avoids repetition for main file MH1
:- pred collect_prop_defs(Base,M,Component) : moddesc(M)
   # "This predicate collects clauses defining properties that are exported
      by module @var{M} and leaves them as @pred{clause_read/7} facts, and
      writing those facts to the @tt{.asr} file.".

collect_prop_defs(Base,M,Component):- 
	assertion_read(PD,M,_AStatus,prop,_ABody,_ADict,_S,_LB,_LE),
	% Check that the prop is exported
        functor(PD,F,A),
	exports(Base, F, A, _DefType, _Meta),
	clause_of(Base,PD,Body,Dict,S,LB,LE), 
	%% If main, all *clauses* have already been asserted!
	(  Component = main
	-> true 
	;  assertz_fact(clause_read(Base,PD,Body,Dict,S,LB,LE)) ),
	fast_write(clause_read(Base,PD,Body,Dict,S,LB,LE)),
	fail.
collect_prop_defs(_Base,_M,_Component). 

%% ---------------------------------------------------------------------------

:- comment(version_maintenance,dir('../../version')).

:- comment(version(1*3+88,1999/10/22,14:21*30+'MEST'), "Added
   treatment of rel_data/1.  (Francisco Bueno Carrillo)").

:- comment(version(1*3+85,1999/10/19,13:20*53+'MEST'), "Fixed bug in creating
   @tt{.asr} from @tt{.pl} when in the same ciaopp session the @tt{_opt}
   had been created (there was a confusion between the original @tt{.pl}
   and the new @tt{_opt} files). As a result @tt{normalize_assertions/1,2}
   are now @tt{normalize_assertions/2,3} (Francisco Bueno Carrillo)").

:- comment(version(1*3+43,1999/08/02,19:45*06+'MEST'), "Fixed bug in
   the normalization of parametric modes. Made them work also when
   nested applications are used. Also, better error handling. (Manuel
   Hermenegildo)").

:- comment(version(1*3+26,1999/07/09,13:41*50+'MEST'), "Exported
   assrt_lib cleanup.  (Francisco Bueno Carrillo)").

:- comment(version(1*3+8,1999/06/29,17:12*44+'MEST'), "imports/4
   redefined to imports/5.  (Francisco Bueno Carrillo)").

:- comment(version(0*9+93,1999/05/18,13:49*38+'MEST'), "Added comments
   for exported predicates to the @tt{.asr} files.  (Francisco Bueno
   Carrillo)").

:- comment(version(0*9+58,1999/04/26,13:08*40+'MEST'), "Fixed bug that
   made prop definitions appear repeated for the main file.  (Manuel
   Hermenegildo)").

:- comment(version(0*9+57,1999/04/26,13:07*12+'MEST'), "Modified
   normalization logic when generating @tt{.asr} files: now, options
   (like not expanding mode definitions) are taken into account for
   the main file only. Also, the @tt{.asr} files are now always fully
   normalized. Note that the meaning of modes is context-dependent.
   Also, the @tt{.asr} file is not generated now for the main file
   (since the assertions could be non-normalized.  (Manuel
   Hermenegildo)").

:- comment(version(0*9+50,1999/04/14,16:49*09+'MEST'), "Leave in the
   database only the related assertions for predicates that are
   exported.  (Francisco Bueno Carrillo)").

:- comment(version(0*9+49,1999/04/14,12:02*12+'MEST'), "Output to .asr
   file the clauses defining exported properties.  (Francisco Bueno
   Carrillo)").

:- comment(version(0*8+34,1999/02/23,14:42*07+'MET'), "Incorporated
   offline changes (Jan99): i/o in .asr files to @pred{fast_read/1},
   @pred{fast_write/1}.  (Manuel Hermenegildo)").

:- comment(version(0*8+28,1998/12/07,17:46*53+'MET'), "Verbose or
   quiet processing of the assertions may now also be controlled via
   the standard @flag{verbose_compilation} prolog flag. The @tt{'-v'})
   option can still be used to make assertion processing verbose while
   keeping the lower-level module interface processing (done by
   @lib{compiler/c_itf}) quiet. (Manuel Hermenegildo)").

:- comment(version(0*8+27,1998/12/07,17:41*10+'MET'), "Added entry
   point for using library as assertion (and program) syntax check.
   (Manuel Hermenegildo)").

:- comment(version(0*8+26,1998/12/07,17:15*00+'MET'), "Added cleanup
   predicate.  (Manuel Hermenegildo)").

:- comment(version(0*8+25,1998/12/04,20:42*08+'MET'), "Verbose
   (@tt{'-v'}) option now supported, which allows quiet operation
   otherwise. (Manuel Hermenegildo)").

:- comment(version(0*8+23,1998/12/03,20:22*34+'MET'), "All errors are
   now reported with line numbers and source file name.  (Manuel
   Hermenegildo)").

:- comment(version(0*8+18,1998/12/03,12:09*03+'MET'), "Added accurate
   source file and line numbers to @pred{assertion_read}.  (Manuel
   Hermenegildo)").

:- comment(version(0*8+12,1998/12/01,18:03*07+'MET'), "Completed
   global changes for adaptation to 0.8.  (Manuel Hermenegildo)").

:- comment(version(0*8+3,1998/11/05,22:35*06+'MET'), "@tt{;} not
   supported any more as separator in assertions.  (Manuel
   Hermenegildo)").

:- comment(version(0*8+2,1998/11/05,14:44*48+'MET'), "Modified to cope
   with the new behaviour of the c_itf predicates in 0.8.  (Manuel
   Hermenegildo)").

:- comment(version(0*6+14,1998/08/04,13:17*00+'MET DST'), "Eliminated
   compat as basic assertion (it is now a property).  (Manuel
   Hermenegildo)").

:- comment(version(0*6+13,1998/08/04,12:06*35+'MET DST'), "Improved
   error detection of assertions with illegal syntax (previously some
   of them simply failed silently).  (Manuel Hermenegildo)").

:- comment(version(0*6+12,1998/08/04,11:32*29+'MET DST'), "Simplified
   assertion format: comments not allowed any more in basic assertions
   (did not make much sense).  (Manuel Hermenegildo)").

:- comment(version(0*6+6,1998/07/24,19:46*11+'MET DST'), "Added format
   definitions for the new assertion format. For now, both are
   supported simultaneously.  (Manuel Hermenegildo)").

:- comment(version(0*5+46,1998/07/08,16:46*45+'MET DST'), "Made trust
   be a status again.  (Francisco Bueno Carrillo)").

:- comment(version(0*4+12,1998/2/19), "Added module qualification
   c_itf: to the (meta-)calls within error_protect, and took them out
   because they don't work in ciao. (Francisco Bueno Carrillo)").

:- comment(version(0*4+11,1998/2/12), "Redone normalization of global
   properties: fixed bugs and now treatment is much simpler.  (Manuel
   Hermenegildo)").

:- comment(version(0*4+10,1998/2/12), "Assertion order is now kept
   (except that all modedefs appear first).  (Manuel Hermenegildo)").

:- comment(version(0*4+9,1998/2/11), "Added options to selectively
   skip normalization of modes and properties (useful sometimes in
   automatic documentation). (Manuel Hermenegildo)").

:- comment(version(0*4+8,1998/2/9), "Now doing fix_if_type in
   line. (Manuel Hermenegildo / Francisco Bueno Carrillo)").

:- comment(version(0*4+7,1998/2/6), "Added fix_if_type/5. (Francisco
   Bueno Carrillo)").

:- comment(version(0*4+6,1998/2/6), "Improved error
   detection/reporting in check_property. (Manuel Hermenegildo)").

:- comment(version(0*4+5,1998/2/2), "Fixed bug in normalization of
   computation properties in modedefs. (Manuel Hermenegildo)").

:- comment(version(0*4+4,1998/2/2), "Assertion printing now uses
   library('assertions/assrt_write'). (Manuel Hermenegildo)").

:- comment(version(0*4+3,1997/12/26), "Eliminated need for
   denorm_body/2 in preprocessor. (Francisco Bueno Carrillo)").

:- comment(version(0*4+2,1998/1/24), "Fixed several bugs related to
   support of parametric modes. (Manuel Hermenegildo)").

:- comment(version(0*4+1,1998/1/23), "Fixed interface to suit the
   preprocessor. Finally most assertion reading code is unified
   here. (Francisco Bueno)").

:- comment(version(0*4+0,1998/1/23), "Major rewrite of the library
   interface: adaptation to use both in the preprocessor and in the
   automatic documenter. (Manuel Hermenegildo)").

:- comment(version(0*3+13,1998/1/23), "New normalization including
   modes, etc. (Manuel Hermenegildo)").

:- comment(version(0*3+12,1998/1/20), "Added modedef operator. (Manuel
   Hermenegildo)").

:- comment(version(0*3+11,1998/1/9), "New version using the CIAO
   native module dependency navigation builtins. (Manuel
   Hermenegildo)").

:- comment(version(0*3+10,1998/1/8), "Changed variable dictionary
   representation to ISO standard. (Manuel Hermenegildo)").

:- comment(version(0*3+9,1997/12/23), "Added support for both CIAO
   and SICStus dictionaries -- this still needs to be unified in a
   better way. (Manuel Hermenegildo)").

:- comment(version(0*3+8,1997/12/23), "Took out support for scripts
   until peek_char implemented in CIAO. (Manuel Hermenegildo)").

:- comment(version(0*3+7,1997/12/23), "Fixed bug in normalization of
   global properties. (Manuel Hermenegildo)").

:- comment(version(0*3+6,1997/12/23), "Modified treatment of
   declarations (including syntax/1, etc.) (Manuel Hermenegildo)").

:- comment(version(0*3+5,1997/12/23), "Fixed problem with included
   files when such file does not exist. (Manuel Hermenegildo)").

:- comment(version(0*3+4,1997/11/5), "Added typedef operator. (Manuel
   Hermenegildo)").

:- comment(version(0*3+3,1997/9/15), "Added check/1. (Manuel
   Hermenegildo)").

:- comment(version(0*3+2,1997/9/12), "Original library split into two
   parts: formal assertions and text. (Manuel Hermenegildo)").

:- comment(version(0*3+1,1997/12/2), "Added denorm_body/2 and exported
   (for preprocessor) (Francisco Bueno Carrillo)").

:- comment(version(0*3+0,1997/11/28), "Added support for new @tt{decl}
   definitions. (Manuel Hermenegildo)").

:- comment(version(0*2+6,1997/11/18), "Added support for the include
   declaration (Francisco Bueno Carrillo)").

:- comment(version(0*2+5,1997/9/19), "Separated Libs being accessed
   from Libs used by accessing program! (Manuel Hermenegildo)").

:- comment(version(0*2+4,1997/8/15), "Changed to ground
   representation. Vars are '$var(Name)', avoided dictionary.").

:- comment(version(0*2+3,1997/08/11), "Improved documentation. (Manuel
   Hermenegildo)").

:- comment(version(0*2+2,1997/08/11), "Added support for
   multi-argument properties in compact format.").

:- comment(version(0*2+1,1997/07/31), "Added syntax support for
   expressing properties directly in the head.").

:- comment(version(0*2+0,1997/07/21), "Added (ad-hoc) handling of ISO
   standard-like modes and in-line properties.").

:- comment(version(0*1+0,1997/07/18), "Started documentation.").

%% ---------------------------------------------------------------------------
