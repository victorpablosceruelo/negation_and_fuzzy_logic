/*
  Ajaxified help browser for Ciao

  Description:

    This program was designed to fix and reorganize old HTML
    documentation generated by Lpdoc+texi2html, as a quick and
    temporal solution before native HTML support for Lpdoc is
    finished.

  Depends on:
    jQuery - jquery-1.3.2.min.js
    jQuery.json - jquery-json-1.3.min.js
    jQuery.rsh - jquery.rsh.js
    Really Simple History - rsh.js
  
  Author: Jose F. Morales <jfmcjf@gmail.com>
  Date: Wed Mar 25 13:12:26 CET 2009
 */


//var docs_url = "http://clip.dia.fi.upm.es/Local/lpdoc_docs/CiaoDE/ciao-1.13.0.html/";
//var toc_title = 'Ciao Manual';
//var docs_url = "ciao-1.13.0.html/";
//var page_toc = "ciao_toc.html";
//var toc_title = 'CiaoPP Manual';
//var docs_url = "ciaopp-1.2.0.html/";
//var page_toc = "ciaopp_ref_man_toc.html";
//var toc_title = 'LpDoc Manual';
//var docs_url = "lpdoc-2.0.38.html/";
//var page_toc = "lpdoc_ref_man_toc.html/";

/* --------------------------------------------------------------------------- */

function install_hash_polling() {
  setTimeout("hash_timeout()", hash_polling_interval);
}

var hash_polling_interval = 500;
function hash_timeout() {
  if (window.location.hash != docpageloc_to_dochash(current_docpageloc)) {
    load_docpage(window.location.hash);
  }
  install_hash_polling();
}

/* --------------------------------------------------------------------------- */

function status_set(text) {
  $("#status")
    .html(text)
    .css("background", "red")
    .css("color", "white");
}

function status_done(text) {
  $("#status")
    .html("&nbsp")
    .css("background", "")
    .css("color", "black");
}

/* --------------------------------------------------------------------------- */
// Documentation page locators 

// Types:
//   dochash: anchor for a docpage locator (e.g. #ciao_1-1)
//   docpageloc: {page: Page, ref: Section}

// From a local href to a docpage locator
function href_to_dochash(href) {
  return "#"+href.replace(/\.html/, '').replace(/#/, '&');
}

// Get a documentation page locator from a URL hash
function dochash_to_docpageloc(dochash) {
  if (dochash == '') {
    return {page: 'toc', ref: ""};
  } else {
    var label = dochash.replace(/^#/, '');
    var page = label.replace(/&.*$/, '');
    var ref;
    if (label.indexOf('&') == -1) ref = ''; else ref = label.replace(/^.*&/, '');
    return {page: page+".html", ref: ref};
  } 
}

// From docpageloc to dochash
function docpageloc_to_dochash(docpageloc) {
  var dochash = "#"+docpageloc.page.replace(/\.html/, '');
  if (docpageloc.ref != "") {
    dochash += "&" + docpageloc.ref;
  }
  return dochash;
}

// From name or id (for local anchors) to dochash
function name_to_dochash(docpageloc, anchor_name) {
  return href_to_dochash(docpageloc.page + "#" + anchor_name).substring(1);
}

/* --------------------------------------------------------------------------- */

function rewire_links(docpageloc, elems) {
  elems.each(function() {
      var name = $(this).attr('name');
      if (name != undefined) {
	$(this).attr('name', name_to_dochash(docpageloc, name));
      }
      var href = $(this).attr('href');
      if (href == undefined) return true; // continue
      $(this).attr('href', href_to_dochash(href));
      $(this).click(dochash_click);
    });
}

/* --------------------------------------------------------------------------- */

// What happens when a dochash is clicked (load the docpage)
function dochash_click() {
  load_docpage($(this).attr('href'));
  return false;
}

/* --------------------------------------------------------------------------- */

// Append a div for the parts of a page
// todo: page_parts should not contain a div, but a list of pages
function append_parts(where, docpageloc) {
  var caption = $("<div></div>");
  caption.attr('id', 'contents-caption');
  caption.text("Parts");
  var div = $("<div></div>");
  div.attr('id', 'contents');
  div.append($(page_parts[docpageloc.page]).clone());
  //    $("#main").append("<hr/>");
  //$("#main").find('h1:first').after(div);
  rewire_links(docpageloc, $(div).find('a'));
  stripe_ul(div);
  //
  where.append(caption);
  where.append(div);
}

function stripe_ul(elem) {
  //
  var stripe = false;
  elem.find("a").each(function(i) {
      var docpageloc = dochash_to_docpageloc($(this).attr("href"));
      if (page_parts[docpageloc.page] != undefined) {
	$(this).html("&#9656; " + $(this).html()); // unicode for BLACK RIGHT-POINTING SMALL TRIANGLE
      }
      if (stripe) {
	$(this).attr("class", "stripe1");
      } else {
	$(this).attr("class", "stripe2");
      }
      stripe = !stripe;
    });
}

function remove_label(url) {
  if (typeof url == "string") {
    var i;
    i = url.indexOf("#");
    if (i == -1) {
      return url;
    } else {
      return url.slice(0, i);
    }
  } else {
    return url;
  }
}
  
// Patching the HTML
// todo: fix html generation so that most of this is not necesary
function patch_docpage(docpageloc) {
  // Remove title (we will reinsert it)
  $("#main").find('h1:first').remove();
  // Remove links in H1 H2 H3
  $("#main").find('h1, h2, h3').each(function() {
      var a = $(this).find('a:first');
      if (a.length != 0) {
	anchor_name = a.attr('name'); // for anchors
	$(this).html(a.text());
	$(this).attr('id', name_to_dochash(docpageloc, anchor_name));
      }
    });
  // Change style of authors
  $("#main").find('strong').each(function() {
      if ($(this).text() == 'Author(s):') {
	$(this).parent().attr("class", "authors");
	return false; // break loop
      }
    });
  // Change style of ISO keyword
  $("#main").find('kbd').each(function() {
      if ($(this).text() == ' * ISO * ') {
	$(this).text("ISO");
	$(this).attr("class", "iso-keyword");
      }
    });
  // ---------------------------------------------------------------------------
  // Rewire links
  rewire_links(docpageloc, $("#main").find('a'));
  // Include parts (if this page contains any parts)
  if (page_parts[docpageloc.page] != undefined) {
    append_parts($("#main"), docpageloc);
  }
  // Include top navigation links
  var navigation = $("<div></div>");
  navigation.attr("id", "navigation");
  var nav_page = docpageloc.page;
  if (nav_page != 'toc') {
    back_sep = '';
    while (nav_page != 'toc') {
      if (page_parent.hasOwnProperty(nav_page)) {
	nav_page = page_parent[nav_page];
      } else {
	break;
      }
      var a = $("<a></a>");
      a.text(page_title[nav_page]);
      if (nav_page == 'toc') {
	a.attr('href', '');
      } else {
	a.attr('href', href_to_dochash(nav_page));
      }
      a.click(dochash_click);
      navigation.prepend(back_sep);
      navigation.prepend(a);
      back_sep = ' / ';
    }
    navigation.prepend('Part of ');
  }
  $("#main").prepend(navigation);
  // Add title
  var title = $("<h1></h1>");
  //  title.css("margin-top", "0px").css("margin-bottom", "0px");
  title.css("margin-bottom", "0px");
  title.text(page_title[docpageloc.page]);
  $("#main").prepend(title);
}

function update_hash(docpageloc) {
  if (docpageloc.page == 'toc') {
    set_hash('#');
  } else {
    set_hash(docpageloc_to_dochash(docpageloc));
  }
  current_docpageloc = docpageloc;
}

function set_hash(hash) {
  if (window.location.hash == '' && hash == '#') {
    // Do nothing
  } else {
    window.location.hash = hash;
  }
}

// Called when the html of docpage is loaded
function load_docpage__completed(docpageloc, html) {
  var first = html.indexOf("<H1>");
  var last = html.lastIndexOf("<HR>");
  html = html.slice(first, last);
  $("#main").html(html);
  patch_docpage(docpageloc);
}

var current_docpageloc = {page:undefined, ref:undefined};

function load_docpage(dochash) {
  var docpageloc = dochash_to_docpageloc(dochash);
  if (docpageloc.page == current_docpageloc.page) {
    // Simplest case, no page change
    update_hash(docpageloc);
  } else {
    if (docpageloc.page == 'toc') {
      load_docpage__completed(docpageloc, "<H1></H1><HR>");
      update_hash(docpageloc);
    } else {
      status_set("Loading page...");
      $.ajax({ 
	url: docs_url + docpageloc.page, 
        cache: false, 
	success: function(html) {
	  window.scroll(0,0);
	  status_done();
	  load_docpage__completed(docpageloc, html);
	  update_hash(docpageloc);
  	}
      });
    }
  }
}

// Database for page title, parent, and parts
var page_parts = new Array();
var page_parent = new Array();
var page_title = new Array();

function load_full_toc(html) {
  status_done();
  // Load the table of contents text in the hidden full_toc div
  var sidebar = $("<ul></ul>");
  sidebar.attr("class", "level-one");
  var full_toc = $("<div></div>");
  full_toc.html(html);
  var first_ul = full_toc.find("ul:first");
  //  sidebar.html(first_ul);
  page_parts['toc'] = sidebar;
  page_parent['toc'] = 'toc';
  page_title['toc'] = toc_title;
  var root = sidebar;
  var default_parent = 'toc';
  first_ul.children().each(function() {
      var a = $(this).find("a:first");
      var entry_page = remove_label($(a).attr('href'));
      if (entry_page == undefined) return true; // continue
      var a_text = $(a).text();
      //      var li = $(this).clone();
      var li = $("<li></li>");
      //
      if (a_text.match(/PART/g)) {
	// Remove the PART prefix
	a_text = a_text.substr(a_text.indexOf('-') + 2);
	// Build a new subtree for the Part section
	var ul = $("<ul></ul>");
	ul.attr("class", "level-two");
	//	li.append(ul);
	sidebar.append(li);
	root = ul;
	page_parts[entry_page] = ul;
	page_parent[entry_page] = 'toc';
	page_title[entry_page] = a_text;
	default_parent = entry_page;
	//	a.append("WHAT!");
      } else {
	root.append(li);
	page_parent[entry_page] = default_parent;
	page_title[entry_page] = a_text;
	page_parts[entry_page] = undefined;
      }
      // Append link with updated text
      var a_clone = $(a).clone();
      a_clone.text(a_text);
      li.append(a_clone);
    });
  // Load required docpage
  load_docpage(window.location.hash);
  // Timeout for hash change (support for back button)
  install_hash_polling();
}

$(document).ready(function()
	{
	  status_set("Loading table of contents...");
	  $.ajax({ 
	    url: docs_url + page_toc, 
	    cache: false, 
	    success: load_full_toc
	  }); 
	});
