:- module( buttonbar , [main/1] , [ pillow , actmods ] ).


:- use_module( library( lists      ) ).
:- use_module( library( system     ) ).
:- use_module( library( file_utils ) ).
:- use_module( library( system     ) ).
:- use_module( library( strings    ) ).

:- use_module( library( format     ) ).

:- use_module( library( 'actmods/tmpbased_locate' ) ).
:- use_active_module( ciaopp_daemon , [ call_ciaopp/4 ] ).

:- use_module( .( lines_to_string ) ).


is_button_pressed( Input, A ) :-
	get_form_value( Input , A , 'true'  ).

	

restart_deamon :-
	system( '<bindir>ciaopp_daemon_wrapper' ).



get_option( anaylisis  , analyze      ).
get_option( checkassrt , check_assert ).
get_option( eval       , optimize     ).
get_option( _          , analyze      ).


exec_ciaopp( Option , Program , Output , Error ) :-
	catch( 
		     call_ciaopp( Option , Program , Output , Error ),
		     _,
		     fail ),
	!.

% DTM: Well... maybe the deamon is dead???
exec_ciaopp( Option , Program , Output , Error ) :-
	restart_deamon,
	catch( 
		     call_ciaopp( Option , Program , Output , Error ),
		     _,
		     fail ),
	!.

exec_ciaopp( A , Text , String , 
	    "There was an error when executing or communicating with " ||
	    "CiaoPP. Please retry in few seconds (" || REST ) :-
        system_error_report( SER ),
	atom_codes( SER , SERC ),
	append( SERC ,  ") Call options: " || R , REST ),
	sformat( R , "~w" , [ A ] ), 
	lines_to_string( Text , String ).




load_page( File , Terms , Dict ) :-
	html_protect( (file_to_string( File, Str ),
	               html_template( Str , Terms , Dict )) ).




:- use_module( library( write ) ).


main( _ ) :-
	get_form_input( Input ),
	( 
	    is_button_pressed( Input , viewfiles )
	->
	    get_form_value( Input , emacs_text , EmacsTextLines  ),

	    lines_to_string( EmacsTextLines , EmacsText ),

	    load_page( 'templates/ciaopp_files_template.html', Terms , Dict )
        ;
	    (
		is_button_pressed( Input , Button )
	    ->
	        process_button( Button , Input , Terms , Dict , EmacsText )
	    ;
	        load_page( 'templates/ciaopp_init_template.html',  Terms , Dict ),

		( 
                    % This fails!
                    % get_form_value( Input , file , file( _ , EmacsText ) )
		    member( file=file( _ , EmacsText ) , Input )
		-> 
		    true
		; 
		    EmacsText = "Error receiving file"
		)
            )
         ),
	 member( (emacs_text=EmacsText) , Dict ),
	 output_html( [ cgi_reply | Terms ] ).
% TO DEBUG:
%	 display( Input ),nl.



process_button( cancel , Input , Terms , Dict , EmacsText ) :-
	!,
	load_page( 'templates/ciaopp_init_template.html', Terms , Dict ),
	get_form_value( Input , emacs_text , EmacsTextLines  ),
	lines_to_string( EmacsTextLines , EmacsText ).

process_button( customize , Input , Terms , Dict , EmacsText ) :-
	!,
	load_page( 'templates/ciaopp_customize_template.html', Terms , Dict ),
	get_form_value( Input , emacs_text , EmacsTextLines  ),
	lines_to_string( EmacsTextLines , EmacsText ).

% go, check_assertions, optimize, analyze
process_button( Button , Input , Terms , Dict , EmacsText ) :-
	(
	    Button == go
	->
	    get_flag_values( Input , FlagValuesList ),
	    Option = flags( FlagValuesList )
	;
	    get_option( Button , Option )
	),
	get_form_value( Input , emacs_text , Program  ),
	exec_ciaopp( Option , Program , EmacsText , Errors ),
	load_page( 'templates/ciaopp_output_template.html', Terms , Dict ),
	member( (emacs_output = Errors) , Dict ).


get_flag_values( Input , FlagValuesList ) :-
	flag_list( FlagList ),
	get_flag_values__( FlagList , Input , FlagValuesList ).


get_flag_values__( [] , _ , [] ).
get_flag_values__( [ F | Fs ] , Input , [ (F,FV) | FVs ] ) :-
	get_form_value( Input , F , FV  ),
	get_flag_values__( Fs , Input , FVs ).


flag_list( [
	menu_level        ,
	inter_all         ,
	check_config_ana  ,
	assert_rtcheck    ,
	assert_ctcheck    ,
	ass_not_stat_eval ,
	pred_ctchecks     ,
	pp_ctchecks       ,
	verbose_ctchecks  ,
	error_log         ,
	inter_optimize    ,
	spec_poly         ,
	pres_inf_fail     ,
	exec_unif         ,
	peval_ana         ,
	local_control     ,
	unf_depth         ,
	comp_rule         ,
	part_conc         ,
	inter_opt_arg_filt,
	global_control    ,
	abs_spec_defs     ,
	rem_use_cls       ,
	filter_nums       ,
	modes             ,
	types             ,
	ana_cost          ,
	ana_nf            ,
	ana_det           ,
	type_eval         ,
	variants          ,
	widencall         ,
	type_precision    ,
	fixpoint          , 
	multi_success     ,
	pp_info           ,
	vers              ,
	collapse_ai_vers  ,
	type_output       
	   ] ).
