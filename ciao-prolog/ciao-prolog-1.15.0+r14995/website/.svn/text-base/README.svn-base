===========================================================================
                        Ciao Website Generation 
===========================================================================
Author: Jose F. Morales (based on previous code)

SUMMARY
=======

This directory contains the sources for the Ciao website. It is based
on (yet undocumented) features of LPdoc to generate custom websites,
by combining the HTML backend, new 'docstring' markup commands, and
CSS files provided by the user.

Note that, except for a few hard-wired texts and links, the code is
really generic and it could be used in the generation of custom
websites (for personal pages, other software, etc.).

FILE AND DIRECTORY STRUCTURE
============================

  create.sh           Scripts that fetches the required pbundles and
                      creates the website.

  lpdist.pl           Command-line interface for LPdist.
  SETTINGS_skel.pl    Skeleton for LPdoc SETTINGS file.
  src/                Website contents in LPdoc format.
  tmpl/               Templates for special HTML contents
                      (instantiated from LPdoc commands).
  skel/               Additional website files
                      (images, CSS files, etc.).

  thumbnail_generation/ Directory for generation of thumbnails.

  mailman/            Embedding of mailman in the website.

HOW TO (RE)GENERATE THE WEBSITE AT THE CLIP MACHINE
===================================================

The normal steps to regenerate the website are:

 1) login as 'clip' user in the 'clip' machine
 2) $ cd ~clip/Systems/CiaoDE/trunk/website
    $ ./create.sh New

That command fetches the different pbundles (packaged bundles) from
the repository of pbundles (see the Ciao Bot) automatically (except
for the branches, which at this moment are fetched manually). Fetched
packages are stored in directories inside the website so that they can
be downloaded.

Although it is not necessary to recompile Ciao to publish new
versions, in some cases, a repository update may be necessary:

 - If the contents of the website have changed, do 'svn up' under
   trunk/website (recompilation is not necessary)

 - If Ciao or LPdoc have changed, do 'svn up' under trunk
   (recompilation is often necessary)

The last step is done automatically every day (around 9:00AM) by cron
scripts.

DOWNLOAD_CGI
============

In order to keep statistics and encourage users to subscribe to our
mailing-lists, some file downloads are tunneled through
'download_cgi.pl'. See its documentation for more details.

[download_cgi is still not in the repository]

MAILMAN ARCHIVES
================

See mailman/README for instructions about embedding of mailing-lists
(mailman archives) in the rest of the Ciao website.

SPECIFYING DISTRIBUTED FILES
============================

[This is a draft, complete]

Look inside SETTINGS_skel.pl ("Distributed files (pbundles)") for
details about how to setup the source and local copy of the
pbundles, as well as the distributed versions.

USING LPdoc TO GENERATE WEBSITES
================================

[This is a draft, complete]

The webpage is an LPdoc manual rendered as a website. This is enabled
by including in the SETTINGS file the (undocumented) declaration:

  html_layout := 'website_layout'. 

Inspect files under src/ (the source of the website) for additional
LPdoc declarations and markup commands, such as:

  :- doc(pragma, section_image(<<File>>)).

  @html_template{<<template>>}
  
  @pbundle_uref{<<text>>}{<<branch>>}{<<link>>}{<<file>>}

  @pbundle_download{<<branch>>}{<<kind>>}

TODO
====

 - Rewrite this documentation in LPdoc.
 - Complete draft sections.
 - Document LPdoc additions.
 - Include download_cgi as contrib/
   (include documentation, distribuite it, etc.)
 - Include relevant parts in LPdoc (system and documentation):
   * add website generation as a plug-in
   * move (generic) website generation to LPdoc
   * add simpler examples
   * minimize this documentation (simply, add references to LPdoc)
