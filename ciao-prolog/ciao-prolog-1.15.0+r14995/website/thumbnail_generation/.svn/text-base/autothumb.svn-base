#!/bin/sh
#
# AutoThumb II
# High quality web picture management tool
#
# Based on standard GIMP 1.2
#
# (C) 2001 Roland Berger
# roland@fuchur.leute.server.de
# http://fuchur.leute.server.de

VERSION=702

# V7.00  Major improvements regarding handling
# V6.18  Referer feature extended, version format changed 1/2004
# V6.10  Tons of new functional stuff! 9/2003
# V5.05  captions added
# V4.10  HTML navigation links added, 4/2003
# V4.02  some cosmetics for final release, 3/2003
# V4.00  slideshow mode implemented (manual and auto), 3/2003
# V3.12  now validates to HTML4.01, 3/2003
# V3.11  new usage: file names optional, 1/2003
# V2.23  cosmetics, but stable, 11/2002
#
# Usage:
#   ath [command] [JPGs]
#
# Gallery values to be changed in ".autothumb" config file.
# For further documentation please see my web site.
#
# TODO:
# - should also work with png, gif & tiff

IMAGEWIDTH=900
IMAGEHEIGHT=700
ENLARGE=FALSE   # not yet implemented
THUMBWIDTH=120
THUMBHEIGHT=120
THUMBQUALITY=0.73
HTMLCOLS=4
DELAY=9999
BG_R=102
BG_G=102
BG_B=119
BG_HEX=#666677
KEEP_AR=TRUE
SHADOW=TRUE
CELLSPACING=10
CELLPADDING=0
INDEXPAGE="index.html"
TITLE="The Little Gallery"
SUBTITLE="Impressions"
CONFIGFILE=.autothumb
REFERER=TRUE
CAPTIONSININDEX=FALSE
CAPTIONSINSHOW=FALSE
LOOP=FALSE
SHOWFILENAME=FALSE
SHOWFILESIZE=FALSE
CAPTIONVIEWER="xv -geometry +100+100 -expand 2"
CAPTIONVIEWERKILL="killall xv"
BRIGHTNESS=0
CONTRAST=0
HUE=0
LIGHTNESS=0
SATURATION=0
SHARPNESS=0
WRITECONFIG=TRUE
HTMLCHARSET=iso-8859-15
FAVICON="/favicon.ico"
THUMBDIR=.
LOCK=FALSE
WATERMARK=FALSE  #not yet implemented


#---------------- Police line - do not cross! ------------------
AUTOCAPTION=0
INIT=FALSE

#--- respect and read other config files on system
declare -r VERSION
if [ -r /etc/autothumb ]; then
    echo "Reading /etc/autothumb"
    source /etc/autothumb
fi

if [ -r $HOME/.autothumb ]; then
    echo "Reading $HOME/.autothumb"
    source $HOME/.autothumb
fi

if [ -r "$CONFIGFILE" ]; then
    echo "Reading \"$CONFIGFILE\""
    source $CONFIGFILE
fi

#--- bash function to write .autothumb config file to local directory
writeconfig () {
if [ ! "$LOCK" == "FALSE" ]; then
    echo "Gallery is locked. $CONFIGFILE will not be modified."
    return
fi

cat << .end > $CONFIGFILE
#
# autothumb config file
#
# To add captions: "autothumb cap [auto]" or manually append lines:
# "# filename.jpg caption text"

CONFIGVERSION=$VERSION

TITLE="$TITLE"
SUBTITLE="$SUBTITLE"
# EXTLINK1='Parent <a href="../">directory</a>.<br>'
# EXTLINK2='Parent <a href="../">directory</a>.<br>'
# EXTLINK3='Parent <a href="../">directory</a>.<br>'

THUMBWIDTH=$THUMBWIDTH
THUMBHEIGHT=$THUMBHEIGHT
HTMLCOLS=$HTMLCOLS
KEEP_AR=$KEEP_AR
CELLSPACING=$CELLSPACING
CAPTIONSININDEX=$CAPTIONSININDEX
CAPTIONSINSHOW=$CAPTIONSINSHOW  
SHOWFILENAME=$SHOWFILENAME
SHOWFILESIZE=$SHOWFILESIZE
HTMLCHARSET=$HTMLCHARSET
LOOP=$LOOP
DELAY=$DELAY
THUMBQUALITY=$THUMBQUALITY
INDEXPAGE="$INDEXPAGE"
REFERER=$REFERER
#THUMBDIR=$THUMBDIR
#FAVICON="$FAVICON"

IMAGEWIDTH=$IMAGEWIDTH
IMAGEHEIGHT=$IMAGEHEIGHT
BRIGHTNESS=$BRIGHTNESS
CONTRAST=$CONTRAST
HUE=$HUE
LIGHTNESS=$LIGHTNESS
SATURATION=$SATURATION
SHARPNESS=$SHARPNESS

LOCK=$LOCK

.end
}


#--- parse command line parameters
for CMDLINE in "$*"; do
    if [ "$1" == "cap" ]; then
	GENERATECAPTIONS=TRUE
	shift
    fi

    if [ "$1" == "auto" ]; then
	AUTOCAPTION=1
	shift
    fi

    if [ "$1" == "clean" ]; then
    
	if [ ! "$LOCK" == "FALSE" ]; then
	    echo "Gallery is locked and cannot be modified."
	    exit
	fi

	rm -f _*.[jJ][pP]*[gG]
	rm -f $INDEXPAGE
	rm -f p*.html
	rm -f dsc*.html
	rm -rf $THUMBDIR
	ls -al
	echo
	shift
	exit
    fi
    
    if [ "$1" == "init" -o "$1" == "new" ]; then

	if [ ! "$LOCK" == "FALSE" ]; then
	    echo "Gallery is locked. $CONFIGFILE cannot be modified."
	    exit
	fi

	shift
	INIT=TRUE
	WRITECONFIG=TRUE
	rm -f $CONFIGFILE
    fi

    if [ "$1" == "update" ]; then

	if [ ! "$LOCK" == "FALSE" ]; then
	    echo "Gallery is locked. $CONFIGFILE cannot be modified."
	    exit
	fi
	
	echo "Writing new config file with new parameters and old values" 
	[ ! "x$WIDTH"   == "x" ] && THUMBWIDTH=$WIDTH
	[ ! "x$HEIGHT"  == "x" ] && THUMBHEIGHT=$HEIGHT
	[ ! "x$QUALITY" == "x" ] && THUMBQUALITY=$QUALITY
	writeconfig

	# calling autothumb to update the gallery
	$0
	exit
    fi

    if [ "$1" == "writenoconf" ]; then
	WRITECONFIG=FALSE
	shift
    fi

    # check if we got a directory as target
    if [ -d "$1" ]; then
	cd $1 || exit 1 > /dev/null
	shift
	echo "Working on target directory $(pwd)"
fi

done


#--- create new config file if non-existent
if [ ! -f "$CONFIGFILE" -a "$WRITECONFIG" == "TRUE" ]; then
    echo
    echo "Creating new \"$CONFIGFILE\" config file with available defaults"
    writeconfig
fi


#--- trap CTRL-C and terminate the script _now_
trap "kill $$" SIGINT


#--- check for a locked directory
if [ ! "$LOCK" == "FALSE" ]; then
    echo "Gallery is locked. HTML files will not be modified."
    exit
fi


#---check for config init
[ "$INIT" == "TRUE" ] && exit


#--- bash function to write HTML header
#    needs filename as argument
writehtmlhead () {
if [ $DELAY -lt 9990 ]; then
    HTMLDELAY='<meta http-equiv="refresh" content="'$DELAY';url='$IMAGEPAGE'">'
else
    unset HTMLDELAY
fi

[ "$1" == "$INDEXPAGE" ] && unset HTMLDELAY      # no delay on index.html

if [ ! "xy$FAVICON" == "xy" ]; then
    HTMLFAVICON='<link rel="shortcut icon" href="'$FAVICON'">'
fi

cat << .end > ${1-dummy}
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=$HTMLCHARSET">
    <meta name="keywords" content="pictures, bilder, photos, fotos, images, slideshow, gallery">
    <meta name="description" content="Autothumb Picture Gallery">
    <meta name="Autor" content="http://fuchur.leute.server.de">
    $HTMLDELAY
    $HTMLFAVICON
    <title>$TITLE</title>
</head>

.end
}


#--- caption generator
if [ "$GENERATECAPTIONS" == "TRUE" ]; then

    CAPSALREADYDEFINED=$(grep "# Captions" $CONFIGFILE > /dev/null ; echo $?)

    if [ "$CAPSALREADYDEFINED" == 0 ]; then
	echo
	echo "Captions are already defined in $CONFIGFILE config file."
	echo "Please delete or edit them manually."
	echo
	exit 1
    fi

    cat << .end >> $CONFIGFILE

# Captions are defined by: # <filename> <caption text>:
#
.end

    IMAGES=$(echo [a-zA-Z0-9]*.[jJ][pP]*[gG])
    for IMAGE in $IMAGES; do
	if [ "x$AUTOCAPTION" == "x0" ]; then
	    $CAPTIONVIEWER _$IMAGE &
	    echo -n "Caption for $IMAGE: "
    	    read CAPTION
	    $CAPTIONVIEWERKILL
	else
	    CAPTION=$AUTOCAPTION
	    AUTOCAPTION=$(($AUTOCAPTION + 1))
	fi
	
	echo "# $IMAGE $CAPTION" >> $CONFIGFILE
    done

    echo
    echo "Calling AUTOTHUMB to regenerate the webpage with captions:"
    autothumb
    echo
    exit
fi

#--- define images to be processed
IMAGES=$@
IMAGEPAGE=$INDEXPAGE            # initialization
PREV_IMAGEPAGE=$INDEXPAGE       # initialization
PREV_PREV_IMAGEPAGE=$INDEXPAGE  # initialization
FIRST_IMAGEPAGE="undef"     # initialization

#--- test if we have to work on a directory
if [ -d "$1" ]; then
    cd $1 || exit 1
    shift
    echo "Working on target directory $(pwd)"
    IMAGES=$(echo [a-zA-Z0-9]*.[jJ][pP]*[gG])
fi

if [ "$#" = "0" ]; then
    IMAGES=$(echo [a-zA-Z0-9]*.[jJ][pP]*[gG])
fi

#--- start generating index.html

writehtmlhead $INDEXPAGE
cat << .end >> $INDEXPAGE
<body text="#FFFFFF" bgcolor="$BG_HEX" link="#FFFFFF" vlink="#CCCCCC" alink="#66FFFF">

<center>
<p>
<h1><font face="Arial,Helvetica"><font color="#66FFFF">
$TITLE
</font></font></h1>
<p>
<hr width="70%">
<h4>
<i>$SUBTITLE</i>
</h4>
</center>
$EXTLINK1
$EXTLINK2
$EXTLINK3
<center>
<p><br>
<table cellspacing=$CELLSPACING cellpadding=$CELLPADDING>
.end

#--- FOR loop to process the images
COL=0
[ ! -d $THUMBDIR ] && mkdir $THUMBDIR
for IMAGE in $IMAGES; do
    THUMB=$THUMBDIR/_$(basename "$IMAGE")

    echo "Processing: $IMAGE ($THUMB)"
    if [ "$THUMB" == "_$INDEXPAGE" ]; then
	echo "Skipping."
	continue
    fi
    
    if [ ! -f "$THUMB" ]; then
	#gimp --no-xshm --no-data -c -i -d -b '(script-fu-autothumb2 "'"$IMAGE"'" '$THUMBWIDTH' '$THUMBHEIGHT' '${KEEP_AR}' '$THUMBQUALITY' "'"$THUMB"'" FALSE '$BG_R' '$BG_G' '$BG_B' '$SHADOW')'\
	#nice -20 gimp --display :0.0 -c -i -d -b '(script-fu-autothumb3 "'"$IMAGE"'" '$THUMBWIDTH' '$THUMBHEIGHT' '${KEEP_AR}' '$THUMBQUALITY' "'"$THUMB"'" FALSE '$BG_R' '$BG_G' '$BG_B' '$SHADOW' '$BRIGHTNESS' '$CONTRAST' '$HUE' '$LIGHTNESS' '$SATURATION' '$SHARPNESS' '$WATERMARK')'\
	nice -20 gimp -c -i -d -b '(script-fu-autothumb3 "'"$IMAGE"'" '$THUMBWIDTH' '$THUMBHEIGHT' '${KEEP_AR}' '$THUMBQUALITY' "'"$THUMB"'" FALSE '$BG_R' '$BG_G' '$BG_B' '$SHADOW' '$BRIGHTNESS' '$CONTRAST' '$HUE' '$LIGHTNESS' '$SATURATION' '$SHARPNESS' '$WATERMARK')'\
	    '(gimp-quit 0)'
    else
	echo "Thumb exists. Next."
    fi

#--- generate single HTML page of previous image

PREV_PREV_IMAGEPAGE=$PREV_IMAGEPAGE
PREV_IMAGEPAGE=$IMAGEPAGE

IMAGEPAGE="$(basename "$IMAGE" .JPG)"
IMAGEPAGE="$(basename "$IMAGEPAGE" .jpg).html"

# remember first page for looping
if [ "$FIRST_IMAGEPAGE" = "undef" ]; then
    FIRST_IMAGEPAGE="$IMAGEPAGE"
    PREV_IMAGEPAGE="$INDEXPAGE"
else   # write single html page

writehtmlhead $PREV_IMAGEPAGE
cat << .end >> "$PREV_IMAGEPAGE"
<body text="#FFFFFF" bgcolor="#000000" link="#777777" vlink="#777777" alink="#CCCCCC">

<center>
$CAPTIONINSHOW

<a href="$PREV_PREV_IMAGEPAGE"><< Prev</a>&nbsp;
<a href="$INDEXPAGE">Index</a>&nbsp;
<a href="$IMAGEPAGE">Next >></a>

<br><a href="$IMAGEPAGE"><img src="$PREV_IMAGE" border="0" alt="$PREV_IMAGE"></a>

</center>
</body>
</html>
.end

fi  #of first single html page

PREV_IMAGE="$IMAGE"


#--- Starting row in index.html
if [ "$COL" = "0" ]; then
    #Starting new table row in HTML
    echo '<tr>' >> $INDEXPAGE
fi

#--- Getting caption from .autothumb file
CAPTIONLINE="$(grep $IMAGE .autothumb)"
CAPTIONININDEX="<br> ${CAPTIONLINE#"# $IMAGE"} &nbsp;"
CAPTIONINSHOW="${CAPTIONLINE#"# $IMAGE"} <br>"

if [ ! "$CAPTIONSININDEX" == "TRUE" ]; then unset CAPTIONININDEX; fi
if [ ! "$CAPTIONSINSHOW"  == "TRUE" ]; then unset CAPTIONINSHOW;  fi

#--- Getting file size
if [ "$SHOWFILESIZE" == "TRUE" ]; then
    HTMLFILESIZE="<br> $(ls -sh $IMAGE | cut -b1-4)"
else
    unset HTMLFILESIZE
fi

#--- Getting file name
if [ "$SHOWFILENAME" == "TRUE" ]; then
    HTMLFILENAME="<br>$IMAGE"
else
    unset HTMLFILENAME
fi

#--- Writing thumbnail to index.html
cat << .end >> $INDEXPAGE
<td>
<center>
<a href="$IMAGEPAGE"><img src="$THUMB" border="0" alt="$IMAGE"></a>
$CAPTIONININDEX
$HTMLFILENAME
$HTMLFILESIZE
</center>
</td>
.end


#--- Finalizing row

COL=$((++COL))
if [ "$COL" = "$HTMLCOLS" ]; then
    #Finalizing table row in HTML
    echo '</tr>' >> $INDEXPAGE
    COL=0
fi

#--- end of FOR loop
done

#--- Finalizing HTML page
cat << .end >> $INDEXPAGE
</table>
</center>
.end


case "$REFERER" in
    TRUE)
	cat << .end >> $INDEXPAGE
<div align="right">
Made with <a href="http://fuchur.leute.server.de"> AutoThumb II</a>
</div>
.end
	;;
    FALSE|false)
	# we don't add a referer
	;;
    *)
	cat << .end >> $INDEXPAGE
<div align="right">
$REFERER
</div>
.end
esac

echo "Finalizing index file \"$INDEXPAGE\"."
cat << .end >> $INDEXPAGE
<br>&nbsp;
</body>
</html>
.end


#--- generating HTML page for last image and (maybe) loop view

PREV_PREV_IMAGEPAGE=$PREV_IMAGEPAGE
PREV_IMAGEPAGE=$IMAGEPAGE

IMAGEPAGE=$(basename "$IMAGE" .JPG)
IMAGEPAGE="$(basename "$IMAGEPAGE" .jpg).html"

if [ "$LOOP" == "TRUE" ]; then
    IMAGEPAGE="$FIRST_IMAGEPAGE"
else
    IMAGEPAGE=$INDEXPAGE
fi

writehtmlhead "$PREV_IMAGEPAGE"
cat << .end >> "$PREV_IMAGEPAGE"
<body text="#FFFFFF" bgcolor="#000000" link="#777777" vlink="#777777" alink="#CCCCCC">

<center>
$CAPTIONINSHOW

<a href="$PREV_PREV_IMAGEPAGE"><< Prev</a>&nbsp;
<a href="$INDEXPAGE">Index</a>&nbsp;
.end

if [ "$LOOP" == "TRUE" ]; then
    echo '<a href="'$FIRST_IMAGEPAGE'">Next >></a>'                     >> "$PREV_IMAGEPAGE"
    echo '<br><a href="'$FIRST_IMAGEPAGE'"><img src="'$PREV_IMAGE'" border="0" alt="'$PREV_IMAGE'"></a>' >> "$PREV_IMAGEPAGE"

else
    echo '<a href="'$INDEXPAGE'">Next >></a>'                     >> "$PREV_IMAGEPAGE"
    echo '<br><a href="'$INDEXPAGE'"><img src="'$PREV_IMAGE'" border="0" alt="'$PREV_IMAGE'"></a>' >> "$PREV_IMAGEPAGE"
fi

cat << .end >> "$PREV_IMAGEPAGE"
</center>
</body>
</html>
.end


#-------------------
echo
echo "V$VERSION. All done!"
echo

