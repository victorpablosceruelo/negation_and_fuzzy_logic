@apl{lpdoc} is an @em{automatic program documentation generator} for
(C)LP systems.

@apl{lpdoc} generates a reference manual automatically from one or
more source files for a logic program (including ISO-@apl{Prolog}
@cite{iso-prolog}, @apl{Ciao} @cite{ciao-manual-tr}, many @apl{CLP}
@cite{survey94} systems, ...).  It is particularly useful for
documenting library modules, for which it automatically generates a
description of the module interface. However, @apl{lpdoc} can also
be used quite successfully to document full applications and to
generate nicely formatted plain ASCII ``readme'' files.  A fundamental
advantage of using @apl{lpdoc} to document programs is that it is
much easier to maintain a true correspondence between the program and
its documentation, and to identify precisely to what version of the
program a given printed manual corresponds.

@section{Overview of this document}

This first part of the document provides basic explanations on how to
generate a manual from a set of files that already contain
@concept{assertions} and @concept{comments}. Examples are given using
the files in the @tt{examples} directory provided with the
@apl{lpdoc} distribution. 

These instructions assume that @apl{lpdoc} (at least the executable
and the library) is installed somewhere in your system.  Installation
instructions @cindex{installation} can be found in @ref{Installing
lpdoc}.

Other parts of this document provide:

@begin{itemize}

@item Documentation on the syntax and meaning of the @em{assertions}
that @apl{lpdoc} uses (those defined in the @apl{Ciao}
@lib{assertions} library
@cite{assert-lang-tr,assrt-framework-jicslp98ws,assrt-debug-manual}). These
include @em{comment} assertions (containing basically documentation
text), formal assertions (containing properties), and combined
assertions.

@item Documentation on a basic set of @concept{properties},
@concept{types}, etc. which are predefined in the @apl{Ciao}
@lib{basic_props}, @lib{regtypes}, @lib{native_props}, and
@lib{meta_props} libraries. These properties, and any others defined
by the user or in other @apl{Ciao} libraries, can be used in program
assertions.

@item Documentation on the @concept{formatting commands} that can be
embedded in @em{comments}.

@end{itemize}

This document is also an @concept{internals manual}, providing
information on how the different internal parts of @apl{lpdoc} are
connected, which can be useful if new capabilities need to be added to
the system or its libraries are used for other purposes. To this end,
the document also provides:

@begin{itemize}

@item The documentation for the @lib{autodoc} @concept{automatic
documentation library}, which provides the main functionality of
@apl{lpdoc}.

@item Documentation on the predicates that define the
@concept{conversion formats} used (@apl{texinfo}, and others), and
which are in the @lib{autodocformats} library.

@end{itemize}

All of the above have been generated automatically from the assertions
in the corresponding sources and can also be seen as examples of the
use of @apl{lpdoc}.

Some additional information on @apl{lpdoc} can be found in
@cite{lpdoc-cl2000}.


@section{lpdoc operation - source and target files}

The main input used by @apl{lpdoc} in order to generate a manual are
@concept{Prolog source files}. Basically, @apl{lpdoc} generates a
file in the GNU @apl{texinfo} format (with a @tt{.texi} ending) for
each @apl{Prolog} file (see ``The GNU Texinfo Documentation System'' manual
for more info on this format). The @apl{Prolog} files must have a @tt{.pl}
ending.

If the @tt{.pl} file does not define the predicates @pred{main/0} or
@pred{main/1}, it is assumed to be a @index{library} and it is
documented as such: the @tt{.texi} file generated will contain
information on the interface (e.g., the predicates exported by the
file, the name of the module and usage if it is a module, etc.), in
addition to any other machine readable comments included in the file
(see @ref{Enhancing the documentation being generated}).  If, on the
contrary, the file defines the predicates @pred{main/0} or
@pred{main/1}, it is assumed to be an @index{application} and no
description of the interface is generated (see @ref{Some usage tips}).

If needed, @cindex{texinfo files} files written directly in
@apl{texinfo} can also be used as input files for @apl{lpdoc}. These
files @em{must have a} @tt{.src} @em{(instead of} @tt{.texi} @em{)
ending}. This is needed to distinguish them from any automatically
generated @tt{.texi} files. Writing files directly in @apl{texinfo}
has the disadvantage that it may be difficult to adhere to all the
conventions used by @apl{lpdoc}.  For example, these files will be
typically used as chapters and must be written as such. Also, the set
of indices used must be the same that @apl{lpdoc} is generating
automatically. Finally, no bibliographic citations can be used.
Because of this, and because in the future @apl{lpdoc} may be able
to generate documentation in formats other than @apl{texinfo} directly
(in which case these files would not be useful), writing files in
@apl{texinfo} directly is discouraged. This facility was added mainly
to be able to reuse parts of manuals which were already written in
@apl{texinfo}.  Note that if a stand-alone file needs to be written
(i.e., a piece of documentation that is not associated to any @tt{.pl}
file) it can always be written as a ``dummy'' @tt{.pl} file (i.e., one
that is not used as code), but which contains machine readable
comments).

A manual can be generated either from a single source file (@tt{.pl}
or @tt{.src}) or from a set of source files.  In the latter case, then
one of these files should be chosen to be the @index{main file}, and
the others will be the @index{component files}.  The main file is
the one that will provide the title, author, date, summary, etc. to
the entire document.  In principle, any set of source files can be
documented, even if they contain no assertions or comments. However,
the presence of these will greatly improve the documentation (see
@ref{Enhancing the documentation being generated}).

If the manual is generated from a single main file (i.e.,
@tt{component/1}, defined below, is empty), then the document generated
will be a flat document containing no chapters.  If the manual is
generated from a main file and one or more components, then the
document will contain chapters. The comments in the main file will be
used to generate the introduction, while each of the component files
will be used to generate a separate chapter. The contents of each
chapter will be controlled by the contents of the corresponding
component file.

As mentioned before, @apl{lpdoc} typically generates @apl{texinfo}
files.  From the @apl{texinfo} files, @apl{lpdoc} can generate
printed and on-line manuals in several formats (@tt{dvi}, @tt{ps},
@tt{ascii}, @tt{html}, @tt{info}, etc.)  automatically, using
different (publicly available) packages.  Documentation in some other
formats (e.g., @tt{manl} pages) can be generated directly by
@apl{lpdoc}, selecting the appropriate options (see below).
@apl{lpdoc} can also generate directly includes generating (parts
of) a @concept{master index} of documents which can be placed in an
installation directory and which will provide pointers to the
individual manuals generated. Using this feature, @tt{lpdoc} can
maintain global @apl{html} and/or @apl{info} documentation sites
automatically (see @ref{Installing a generated manual in a public
area}).

Additionally, @apl{lpdoc} can provide some data from the main (prolog)
documentation file. For this purpose the option @tt{getinfo} can be
used instead of specifying the format. This option reads the asked
fields from @tt{getinfo} variable (defined in @tt{SETTINGS.pl} or
via arguments with -d option). @apl{lpdoc} will generate files with
main documentation file-name as base-name, followed by one underscore,
the asked field (got from @tt{getinfo}), and the extension. The
content of each of these files (so also the extension) is specified by
@tt{getinfo_format}, that can take the values @tt{html, ascii,
texic}. For example, to ask for the @tt{summary} and the @tt{author}
fields from a prolog file called @tt{file.pl}, with @apl{lpdoc}
documentation, we can execute the command @tt{lpdoc -d
getinfo=[author,summary] getinfo}. The files @tt{myfile_author.txt}
and @tt{myfile_summary.txt} will be created. If also the option @tt{-d
getinfo_format=html} is used, the files will have html extension (and
content).
