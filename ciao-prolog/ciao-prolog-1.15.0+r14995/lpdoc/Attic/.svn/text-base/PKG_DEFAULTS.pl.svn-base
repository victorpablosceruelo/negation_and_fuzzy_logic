:- module(_, _, [assertions , regtypes , fsyntax]).

:- use_module(library(distutils(package_generator))).
:- use_module(library(lists), [append/3]).

% ----------------------------------------------------------------------------

:- comment(title, "Configuration File for Package Generation").

:- comment(module, "This is a sample configuration file for
   @apl{lpdoc}.  The defaults listed are typically suggestions and/or
   the ones used for local installation in the CLIP group machines.
   These settings should be changed to suit your application.").

:- comment(author, "David Trallero Mena").

% ----------------------------------------------------------------------------

:- comment(filetype, user).

% ----------------------------------------------------------------------------
% DIRECTORIES
% ----------------------------------------------------------------------------

:- pred package_root_dir(PackageRootDir) => atm(PackageRootDir)

# "@var{PackageRootDir} defines the root directory from where the
  package actions (generations of tars, documentation, version ...)
  will take place (do not forget the / at the end of the path).

  Example: package_root_dir := '/home/clip/Systems/CiaoDE/'.".

% package_root_dir := '/home/clip/Systems/CiaoDE/ciao/'.
package_root_dir := '<v>package_root_dir</v>'.


% ----------------------------------------------------------------------------
% NAMES
% ----------------------------------------------------------------------------


% PACKAGE NAME
% ============

:- pred package_name(Name) => atm(Name)

# "@var{Name} is the name of the package. 

  Example: package_name := 'CiaoDE'.".

% package_name := 'ciao'.
package_name := '<v>package_name</v>'.



% PACKAGE VERSION
% ===============

:- pred package_version(Version) => atm(Version)

# "@var{Version} defines the package version.

  Example: package_version := '1.15.3-r(5523)'.".

package_version(Version) :-
	package_root_dir(PRD),
	get_version_string(PRD , V),
	get_patch_string(PRD , P),
	get_revision_string(PRD , R),
	atom_codes(PA , P),
	atom_codes(RA , R),
	atom_concat([V, '.', P , '#', R] , Version).



% PACKAGE VERSION NICE
% ====================

:- pred package_version_nice(NiceVersion) => atm(NiceVersion)

# "@var{Version} defines the package version that would be presented
  to the user in a distribution website. It is the aesthetic version
  of @pref{package_version/1}.

  Example: package_version := '1.15.3'".

package_version_nice(NiceVersion) :-
	package_root_dir(PRD),
	get_version_string(PRD , V),
	get_patch_string(PRD , P),
% dot => 46
	append(V , [46|P] , VDotP),
	atom_codes(NiceVersion , VDotP).



% PACKAGE NAME VERSION
% ====================

:- pred package_name_version(NameVersion) => atm(NameVersion)

# "@var{NameVersion} is the concatenation of the package name and its
  version. It is used as a title in a distribution website.

  Example: package_name_version( 'CiaoDE-1.15.2' ).".

package_name_version(NameVersion) :-
	package_name(Name),
	package_version_nice(Version),
	atom_concat(Name  , '-'     , NameS      ),
	atom_concat(NameS , Version , NameVersion).

% ----------------------------------------------------------------------------
% FILES THAT COMPOSE THE PACKAGE
% ----------------------------------------------------------------------------

% EXCLUDED FILES
% ==============

:- pred exclude_files(ExcFiles) => list(ExcFiles , atm)

# "@var{ExcFiles} is a list with the filenames that will not be
  included in the generation of tar distribution files

  Example: exclude_files := ['ciao/SETTINGS', 'ciao/SETTINGS_AUTO'].".

% exclude_files := ['ciao/SETTINGS', 'ciao/SETTINGS_AUTO'].


% EXCLUDED DIRECTORIES
% ====================

:- pred exclude_dir(ExcFiles) => list(ExcFiles , atm)

# "@var{ExcFiles} is a list with the directories that will not be
   included in the generation of tar distribution dir

   Example: exclude_dir := ['ciao/SETTINGS', 'ciao/SETTINGS_AUTO'].".

% exclude_dir := ['ciaopp'].


% ----------------------------------------------------------------------------
% DISTRIBUTION FILES FORMAT
% ----------------------------------------------------------------------------

:- pred package_doc_file(Format) => suported_tar_format

# "Defines the extensions (without dots) of the distribution tar files
   to be generated by @apl{lpdoc}. The current supported extensions
   are: 

   @includedef{supported_tar_format/1}

   Example: package_tar_file := tgz | tbz.".

:- regtype supported_tar_format/1.

supported_tar_format := zip.
supported_tar_format := gz.
supported_tar_format := bz2.


package_tar_file := tgz|tbz.



% ----------------------------------------------------------------------------
% DOCUMENTATION FILES FORMATS
% ----------------------------------------------------------------------------

:- pred package_doc_file(Format) => suported_doc_format

# "Defines the extensions (without dots) of the documentation files to
   be generated by @apl{lpdoc}. The current supported extensions are:

   @includedef{supported_doc_format/1}

   Example: package_doc_file := ps | pdf.

   Notice that an extension like pdfzip means that the generated pdf
   is compressed using @apl{zip} compressor.

   When describing a composed package (a package that is a set of
   other packages), a term which functor is a known as compressed
   format (tgz, or bz2) with a list of packages as its first argument
   and atom specifying the output file name can be specified.

   Example: package_doc_file := cps | pdf | tgz( [ciao, lpdoc] , ciaode ).

   The example line means that ps and pdf formats will be generated
   for the components ciao and lpdoc, and compressed to ciaode.ps.tgz
   and ciaode.pdf.tgz respectively.".

:- regtype supported_doc_format/1.

supported_doc_format := ps.
supported_doc_format := pdf.
supported_doc_format := html.
supported_doc_format := psgz.
supported_doc_format := psbz2.
supported_doc_format := pszip.
supported_doc_format := pdfgz.
supported_doc_format := pdfbz2.
supported_doc_format := pdfzip.
supported_doc_format := tgz(list(_ , supported_doc_format) , atm).


package_doc_file := ps|pdf. % | tgz( [ciao, lpdoc] , ciaode ).


