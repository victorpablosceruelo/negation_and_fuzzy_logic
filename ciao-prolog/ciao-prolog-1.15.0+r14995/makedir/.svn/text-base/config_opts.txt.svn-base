List of configuration options:

--help          Show this help.

--menu          Configure options via a menu (recommended).

--silent=SILENT

Removes several messages shown during installation.

Valid values are [false,true]


--stop_if_error=STOP_IF_ERROR

Stop installation if an error is found.

Valid values are [yes,no]


--instype=INSTYPE

Select the type of installation:

    global -- Install the system in a separate location from the
              sources and set up things to use the installed version.
              The system will not require the sources to run, and 
              they can be erased after installation.
    local  -- The system will be compiled in, and run from the 
              sources (this is specially useful for developers).

Valid values are [global,local]


--registration_type=REGISTRATION_TYPE

Registration type:

    all  --  Make the system available to all users. Typically you
             you will need to complete the installation as root.
    user --  Make the system available only for the current user
             (configure it in the user's home directory).

Valid values are [all,user]


--prefix=PREFIX

Specify the directory to perform the installation.


--execmode=EXECMODE

Permissions for installed execs/dirs


--datamode=DATAMODE

Permissions for installed data files


--installgroup=INSTALLGROUP

Group for the installed files (empty means use default)


--update_bashrc=UPDATE_BASHRC

Set to "no" if you do not wish to configure bash to work with Ciao or 
if you wish to configure it by hand.

Valid values are [yes,no]


--dotbashrc=DOTBASHRC

The bash initialization file where the Ciao variables are set.


--update_cshrc=UPDATE_CSHRC

Set to "no" if you do not wish to configure csh/tcsh to work with Ciao or
if you wish to configure it by hand.

Valid values are [yes,no]


--dotcshrc=DOTCSHRC

The csh/tcsh initialization file where the Ciao variables are set.
Note that on some systems tcsh reads "~/.tcshrc".


--install_prolog_name=INSTALL_PROLOG_NAME

Set to "yes" if you wish to create a link that brings up Ciao 
when you type "prolog". You may want to say no if there are other
systems that support the Prolog language in your machine and you
do not want to make Ciao the default.

Valid values are [yes,no]


--install_emacs_support=INSTALL_EMACS_SUPPORT

Set to "yes" if you wish to install the Ciao emacs libraries which
implement the Emacs-based IDE (integrated development environment)
(highly recommended).  It should be set to no if emacs is not
installed in the system.  It is safe to leave as "yes" otherwise.

Valid values are [yes,no]


--install_xemacs_support=INSTALL_XEMACS_SUPPORT

Set to "yes" if you wish to install the Ciao emacs libraries which
implement the XEmacs based IDE (integrated development environment).
It should be set to no if xemacs is not installed in the system.  It 
is safe to leave as "yes" otherwise.

Valid values are [yes,no]


--emacs_for_ciao=EMACS_FOR_CIAO

The version of emacs that you wish to use with Ciao. The development 
environment will be compiled for use with this version.


--update_dotemacs=UPDATE_DOTEMACS

Set to "yes" if you wish to configure emacs to
work with Ciao (modify emacs initialization file).

Valid values are [yes,no]


--dotemacs=DOTEMACS

Define the emacs initialization file where the Ciao settings will be
added.


--emacsinitdir=EMACSINITDIR

Specify in what directory you want to copy the emacs ciao mode elisp
code in order for it to be accessible to Emacs.


--emacsinitfile=EMACSINITFILE

Specify the name of the emacs lisp file defining the ciao mode.


--xemacs_for_ciao=XEMACS_FOR_CIAO

The version of xemacs that you wish to use with Ciao. The development
environment will be compiled for use with this version.


--update_dotxemacs=UPDATE_DOTXEMACS

Set to "yes" if you wish to configure XEmacs to
work with Ciao (modify xemacs initialization file).

Valid values are [yes,no]


--dotxemacs=DOTXEMACS

Define the xemacs initialization file where the Ciao settings will be
added.


--xemacsinitdir=XEMACSINITDIR

Specify in what directory you want to copy the xemacs ciao mode elisp
file in order for it to be accessible to XEmacs.


--xemacsinitfile=XEMACSINITFILE

Specify the name of the xemacs lisp file defining the ciao mode.


--htmldir=HTMLDIR

Define this to be the directory in which you wish the documentation 
in html format to be installed. It is recommended that this directoriy 
be accessible via WWW.



--htmlurl=HTMLURL

Define the URL to access the previous directory via WWW.


--docdir=DOCDIR

Define this to be the directory in which you wish the documentation
to be installed.



--mandir=MANDIR

Define this to be the directory in which you wish the man (unix manual
entry) file to be installed.



--infodir=INFODIR

Define this to be the directory in which you wish the info file
installed.  Ideally, this directory should be accesible via emacs.



--web_images_path=WEB_IMAGES_PATH

For the PiLLoW Web programming library, define the directory 
(accessible via WWW) where the icons which come with PiLLoW 
(in library/pillow/images) will go.


--web_images_url=WEB_IMAGES_URL

Define the URL to access the previous directory via WWW.


--with_mysql=WITH_MYSQL

Set to "yes" if you wish to interface with the MySQL database.
If you choose to have the MySQL interface, you should have the MySQL
client part installed in the machine where you are compiling and using
it.  The MySQL daemon should also be up and running when using the
interface.

Valid values are [yes,no]


--mysql_client_directory=MYSQL_CLIENT_DIRECTORY

You should also specify where the MySQL client library is installed.


--with_gsl=WITH_GSL

Set to "yes" if you wish to interface with the GSL (GNU Scientific
Library). If you choose to have the GSL interface, you should have the
GSL development library installed in the machine where you are
compiling and using it.

Valid values are [yes,no]


--with_ppl=WITH_PPL

Set to "yes" if you wish to interface with the PPL

Valid values are [yes,no]


--with_java_interface=WITH_JAVA_INTERFACE

Whether you have a reasonably recent version of Java.
If so the utilities for the Java interface under
$(CIAOSRC)/library/javall will be compiled , along with
examples and documentation.

Valid values are [yes,no]


--with_ant=WITH_ANT

Verify if ant (a Java based make tool) is installed
in the system.

Valid values are [yes,no]


--cc=CUSTOM_CC

Custom C compiler


--ld=CUSTOM_LD

Custom C linker


--cflags=EXTRA_CFLAGS

Specify additional C compiler flags


--ldflags=EXTRA_LDFLAGS

Specify additional C linker flags


--optimizing_compiler=OPTIMIZING_COMPILER

Specify if you want to install the optimizing compiler.

Valid values are [yes,no]


--use_threads=USE_THREADS

If you wish to compile an engine with threads capability
(concurrency), set the following variable to "yes".  Otherwise, set
it to "no".  If the architecture does not support threads (or
thread support has not yet been added to Ciao for this
architecture), this will be automatically disabled at compile time.
Concurrency support does not cause any appreciable runtime overhead
for non-concurrent programs, so it is safe to leave it as "yes".

Valid values are [yes,no]


--use_posix_locks=USE_POSIX_LOCKS

When using threads, locks are mandatory, and they do not make any
sense if you are not using threads.  So, threads enable locks.  Ciao
includes native code locks for some architectures, but allows
specifying the use of POSIX-compliant locks if posix libraries are
available.  Posix locks will be automatically selected if no native
lock implementation is included in Ciao for a given architecture.  We
recommend letting this option set to "no" since a primitive lock
implementation is usually much faster than the library-based POSIX
one.

Valid values are [yes,no]


--and_parallel_execution=AND_PARALLEL_EXECUTION

Set the following variable to "yes" if you wish to compile an
engine with support for and-parallel execution of goals in
(Herbrand-)independent fashion or to "visandor" if you wish also
support for VisAndOr's events. Choose one of:

        yes             -- Support for and-parallel execution.
        visandor        -- Support for and-parallel execution and
                           VisAndOr's events.
        no              -- No support.

Valid values are [yes,visandor,no]


--par_back=PAR_BACK

Set the following variable to "yes" if you wish to compile an
engine with support for parallel backtracking execution of goals.
This feature is experimental and may not be available in all releases.

Valid values are [yes,no]


--tabled_execution=TABLED_EXECUTION

Set the following variable to "yes" if you wish to compile an engine
with support for tabled execution of goals.
This feature is experimental and may not be available in all releases.

Valid values are [yes,no]


--optim_level=OPTIM_LEVEL

Optimization level used when compiling the bytecode emulator. Choose
one of:

   optimized       -- Turn on optimization flags
   normal          -- Normal emulator (non-optimized code)

For normal use, we recommend leaving it as "optimized".  But if you
suspect that your C compiler performs buggy optimizations (which
should not be the case), turn optimization off.  This may happen more
easily in concurrent applicacions: if you write any thread-based
program and unexpected results appear, try recompiling Ciao without
optimization options first.

Valid values are [optimized,normal]


--cross_compiler_host=CROSS_COMPILER_HOST

If you will cross-compile the engine later, please enter the user
name and address of the target machine to extract run-time
characteristics from -- e.g., "root@my.other.host.com".  If you
are not going to crosscompile, leave the default value.
Cross-compiling is at the moment done with "make build crossengine"
once the regular compilation is completed.


--debug_level=DEBUG_LEVEL

You only want to change this if you are a developer.  Additionally,
setting the environment variable CIAODEBUG to the value '-debug'
at the time of compiling the engine will override the OPTIM_LEVEL
and DEBUG_LEVEL flags, and produce non optimized emulator code with
debugging information.

Level of debugging built into the bytecode emulator. Choose one of:

   nodebug         -- Do not include debug information or messages
   debug           -- Emulator with C level debugging info available
                      plus extended C compilation warnings
   profile         -- Include profiling options for the emulator
   profile-debug   -- Include profiling and debug options for the
                      emulator
   paranoid-debug  -- Emulator with C level debugging info available
                      plus paranoid C compilation warnings.

Valid values are [nodebug,debug,profile,profile-debug,paranoid-debug]


--with_chr=WITH_CHR

Please specify if you would like to compile Constraint Handling Rules
(CHR). This adds significant time to compilation.

Valid values are [yes,no]


--with_ciaoppcl=WITH_CIAOPPCL

Please specify if you want to compile the CiaoPP Command Line Utility.

Valid values are [yes,no]


--compress_lib=COMPRESS_LIB

If you wish to compile the Ciao libraries with their bytecode
compressed then set the following variable to "yes". Libraries
generated this way will be smaller at the cost of a slightly slower
usage, both in their load as when used to create an executable.

Valid values are [yes,no]


--unused_pred_warnings=UNUSED_PRED_WARNINGS

If you wish to show warnings about unused predicates, set this
variable to "yes".

Valid values are [yes,no]


--runtime_checks=RUNTIME_CHECKS

If you wish to compile the Ciao libraries with runtime checks enabled
then set the following variable to "yes". This of course reduces
performance.

Valid values are [yes,no]


--set_flag_options=SET_FLAG_OPTIONS

Set the prolog flags configured here in the ciao shell script.

Valid values are [yes,no]


--ciaosh_commands=CIAOSH_COMMANDS

Pass extra commands to the ciao shell script.


