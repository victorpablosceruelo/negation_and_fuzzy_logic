# ===========================================================================
# =                                                                         =
# =  This is some old code to build all ciao with runtime checks enabled    =
# =  in the whole system. It is not currently working and it was based on   =
# =  carefully launching batch compilations with options, so that           =
# =  modules where rtchecks were not working properly were compiled         =
# =  without rtchecks.                                                      =
# =                                                                         =
# =  We thought that it would be simpler to fix rtchecks for all            =
# =  modules (e.g., by separating .po/.itf with(out) rtchecks and           =
# =  by making rtcheck translation more robust)                             =
# =                                                                         =
# =  Please, check revision r14207 or older for the full sources.           =
# =                                                                         =
# =  Edison Mera and Jose F. Morales                                        =
# =  Fri Oct 28 12:34:03 CEST 2011                                          =
# =                                                                         =
# ===========================================================================

# ===========================================================================
# ===========================================================================
# HELP MESSAGE FROM ciaosetup
# ===========================================================================
# ===========================================================================

  rt-compile0 		[not documented]
  rt-compile1 		[not documented]

    The rt-compile option includes a lot of steps and is not currently
    incremental.  It needs to be improved once we have move the whole
    system to (optionally) placing the compiled modules
    (.po/.asr/.itf) in a single directory (as done by optim_comp).

    To compile Ciao with run-time checks in the libraries, run:

      ./ciaosetup rt-compile0
      ./ciaosetup rt-compile1

# ===========================================================================
# ===========================================================================
# CODE FROM ciaosetup
# ===========================================================================
# ===========================================================================

# TODO: There is more code specific to runtime checks in ciao/build.sh
register_command "rt_compile0"
do__rt_compile0() {
    do__realclean
    run_config --silent=true \
        --reset --instype=src --sysavail=user \
        --compile_chr=no \
        --with_ciaoppcl=no \
	--gen_ciao_asr=no \
	--gen_ciaopp_asr=no
    do__build_nolibs
}

register_command "rt_compile1"
do__rt_compile1() {
    run_config --silent=true \
	--with_ciaoppcl=yes \
	--runtime_checks=yes "$*"
    do__clean_lib
    do__build_libraries
#   do__calibrateciaopp
}

# ===========================================================================
# ===========================================================================
# CODE FROM ciao/build.sh
# ===========================================================================
# ===========================================================================

# TODO: This should not be here
NORTCHECKSLIBS="lib/dcg_expansion \
	contrib/contextual/calculator \
	library/toplevel/toplevel__scope \
	library/menu/examples/menu_0 \
	lib/inliner/inliner_tr \
	lib/rtchecks/rtchecks_tr"

# 	library/menu/examples/menu_0			# Hang the compilation
#	library/class/examples/use_stack.pl		# Halt the compilation

# 	  lib/distutils/packages_access				\
# 	  lib/wp_gen/process_tmpl				\
#	  contrib/contextual/calculator.pl			\ # Halt the compilation

# 	  library/terms_check					\
# 	  contrib/chartlib/chartlib.pl				\
# 	  contrib/chartlib/genbar1.pl				\

#	  lib/engine/term_basic.pl			\ # =../2
# 	  library/toplevel/toplevel__scope.pl		\ # Fix assertions
# 	  lib/dict.pl					\ # Fix assertions
# 	  contrib/jvm_in_ciao/interpreter/binary_operations.pl \ # Fix assertions
# 	  contrib/jvm_in_ciao/interpreter/exception.pl	\ # $rtc0 undefined
# 	  contrib/jvm_in_ciao/interpreter/extended_lists.pl \ # $rtc0 undefined
# 	  contrib/jvm_in_ciao/interpreter/jvml.pl	\ # $rtc0 undefined
# 	  contrib/provrml/generator_util.pl 		\ # Fix assertions

# TODO: THIS IS WRONG! Why not adding those modules as a internal
#       database in the compiler, or as some declaration in the files
#       themselves?
rebuild_some_libs_without_rtchecks() {
    if test x"${RUNTIME_CHECKS}" = x"yes"; then
	bold_message "Compiling not runtime-checkable libraries"
	# Compiles the libraries with runtime checks disabled
	for file in ${NORTCHECKSLIBS}; do
	    ${RM} ${file}.po ${file}.itf ${file}.asr
	done
	for file in ${NORTCHECKSLIBS}; do
	    normal_message "Compiling '${file}'"
	    eval ${SETLOCALCIAO} ${BOOTSTRAP_CIAOC} \
               -x -c ${CIAOCOPTS_NORTCHECKS} ${file}
	done
    fi
}

# (called from 'ciaosetup')
do_build_ciaoc() {
    rebuild_some_libs_without_rtchecks
    OLDPWD=`pwd`
    cd ciaoc
    ./build.sh build
    cd ${OLDPWD}
}

do_build_bootstrap_lpmake() {
    rebuild_some_libs_without_rtchecks
    bold_message "Building bootstrap 'lpmake'"
    OLDPWD=`pwd`
    cd etc
    eval ${SETLOCALCIAO} ${BOOTSTRAP_CIAOC} -s -x ${CIAOCOPTS} -o ${BOOTLPMAKE} lpmake
    chmod ${EXECMODE} ${BOOTLPMAKE}
    cd ${OLDPWD}
}

# (called from 'ciaosetup')
do_build_libraries() {
    rebuild_some_libs_without_rtchecks
    bootlpmake build_libraries
}
