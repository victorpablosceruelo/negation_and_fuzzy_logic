#!/bin/sh
get_mydir() {
  old_dir=`pwd`
  cd `dirname $0`
  dir=`pwd`
  cd ${old_dir}
  echo ${dir}
}
self=`get_mydir`

# ---------------------------------------------------------------------------
# Definition of available options

sections="threads optimizations profiling miscellaneous"
section_title__threads="Threads"
section_opts__threads="use_threads use_posix_locks"
section_title__optimizations="Optimizations"
section_opts__optimizations="optimlevel"
section_title__debug="Debug"
section_opts__debug="debuglevel debug_trace rtchecks"
section_title__profiling="Profiling"
section_opts__profiling="profile_insfreq profile_ins2freq profile_blockfreq profile_stats"
section_title__miscellaneous="Miscellaneous"
section_opts__miscellaneous="libdir compresslibs build_info compiler_version require64 with_cc"

defaultval_use_threads=yes
message_use_threads=`cat <<EOF
  --use-threads=[yes]             use threads

    yes             -- yes
    no              -- no

    If you want to compile an engine with THREADS capability
    (concurrency), set the following variable to "yes".  Otherwise,
    set it to "no".  If the architecture does not support threads (or
    thread support has not yet been added to Ciao Prolog for this
    architecture), this will be automatically disabled at compile
    time.  Concurrency support does not cause any appreciable runtime
    overhead for non-concurrent programs, so it is safe to leave it as
    "yes".
EOF
`

defaultval_use_posix_locks=no
message_use_posix_locks=`cat <<EOF
  --use-posix-locks=[no]          POSIX locks

    yes             -- yes
    no              -- no

    When using threads, LOCKS are mandatory, and they do not make any
    sense if you are not using threads.  So, threads enable locks.
    Ciao Prolog includes native code locks for some architectures, but
    allows specifying the use of POSIX-compliant locks if posix
    libraries are available.  POSIX locks will be automatically
    selected if no native lock implementation is included in Ciao for
    a given architecture.  We recommend letting this option set to
    "no" since a primitive lock implementation is usually much faster
    than the library-based POSIX one.
EOF
`

defaultval_optimlevel=optimized
message_optimlevel=`cat <<EOF
  --optimlevel=[optimized]        Optimization level 

    optimized       -- Turn on optimization flags
    normal          -- Normal emulator (non-optimized code)

    For normal use, we recommend leaving it as "optimized".  But if
    you suspect that your compiler performs buggy optimizations (which
    should not be the case), turn optimization off.  This can be
    happen more easily in concurrent applicacions: if you write any
    thread-based program and unexpected results appear, try
    recompiling Ciao without optimization options first.
EOF
`

defaultval_debuglevel=nodebug
message_debuglevel=`cat <<EOF
  --debuglevel=[nodebug]          Level of debugging (CC)

    nodebug         -- Do not include debug information or messages
    debug           -- Emulator with C level debugging info available
                       plus extended C compilation warnings
    paranoid-debug  -- Emulator with C level debugging info available
                       plus paranoid C compilation warnings

    Enable debugging options in the C compiler
EOF
`

defaultval_debug_trace=no
message_debug_trace=`cat <<EOF
  --debug-trace=[no]

    yes
    no

    Enable debug trace (controled with runtime options)
EOF
`

defaultval_rtchecks=no
message_rtchecks=`cat <<EOF
  --rtchecks=[no]

    yes
    no

    Enable superfluous runtime checks (preconditions, postconditions,
    etc.) in the C code. A bug-free emulator should not violate any of
    these checks.
EOF
`

defaultval_profile_insfreq=no
message_profile_insfreq=`cat <<EOF
  --profile-insfreq=[no]

    yes
    no

    Profile instruction frequencies (note: execute a wamtime profile to
    ensure that the overhead compensation is correct)
EOF
`

defaultval_profile_ins2freq=no
message_profile_ins2freq=`cat <<EOF
  --profile-ins2freq=[no]

    yes
    no

    Profile instruction pairs frequencies (note: execute a wamtime profile to
    ensure that the overhead compensation is correct) (EXPERIMENTAL)
EOF
`

defaultval_profile_blockfreq=no
message_profile_blockfreq=`cat <<EOF
  --profile-blockfreq=[no]

    yes
    no

    Profile block frequencies (EXPERIMENTAL)
EOF
`

defaultval_profile_stats=no
message_profile_stats=`cat <<EOF
  --profile-stats=[no]

    yes
    no

    Collect statistics about the execution (load time of static bytecode,
    used memory, garbage collections, etc.)
EOF
`

defaultval_libdir=""
message_libdir=`cat <<EOF
  --libdir=DIRECTORY              Default LIBDIR
EOF
`

defaultval_compresslibs=no
message_compresslibs=`cat <<EOF
  --compresslibs=[no]             Compressed bytecode

    yes             -- yes
    no              -- no

    If you want to compile the Ciao libraries with COMPRESSED BYTECODE
    then set the following variable to "yes". Libraries generated this
    way will be smaller at the sake of a slightly slower usage, both
    in their load as when employed to create an executable.
EOF
`

defaultval_build_info=yes
message_build_info=`cat <<EOF
  --build-info=[yes]              Include build info

    yes             -- Include build info (cc version, hostname, date, ...)
    no              -- Do not include build info
EOF
`

defaultval_compiler_version=0
message_compiler_version=`cat <<EOF
  --compiler-version=[0]          Compiler version used to generate the source
EOF
`

defaultval_require64=no
message_require64=`cat <<EOF
  --require64=[no]                Require a 64 bit architecture

    yes             -- Require an architecture with 64 bit pointers
    no              -- Use 32 bit pointers (and 32 bit compatibility mode in
                       64 bit architectures)
EOF
`

defaultval_with_cc=""
message_with_cc=`cat <<EOF
  --with-cc=[]                    Specify a different C compiler
EOF
`

defaultval_remote=""
message_remote=`cat <<EOF
  --remote=[USER@HOST]            Remote configuration

    Run configuration program at USER@HOST, connecting via ssh.
EOF
`

# ---------------------------------------------------------------------------
# Parse command-line options

for option in "$@"; do
  case "$option" in
  --help)
    cat << EOF
Usage: `basename $0` [options]

  --help                          print this message

EOF
    for s in ${sections}; do
	echo -n "  "
	eval echo '${section_title__'${s}'}'
	echo
	s_opts=`eval echo '${section_opts__'${s}'}'`
	for s_o in ${s_opts}; do
	    eval 'echo "${message_'${s_o}'}"'
	    echo
	done
	echo
    done

    exit 1
    ;;

  --*=*)
    name="`echo "$option" | sed -e 's/=.*//;s/--//'`"
    if test -n "`echo $name | sed 's/[a-z0-9-]//g'`"; then
      echo "{configuration error: invalid option name $name}" 1>&2
      exit 1
    fi
    name="`echo "$name" | sed -e 's/-/_/g'`" # replace - by _
    value="`echo \"$option\" | sed 's/[^=]*=//'`"
    eval "value_$name='$value'" ;;

  --*)
    name="`echo "$option" | sed -e 's/--//'`"
    if test -n "`echo $name | sed 's/[a-z0-9-]//g'`"; then
      echo "{configuration error: invalid option name $name}" 1>&2
      exit 1
    fi
    name="`echo "$name" | sed -e 's/-/_/g'`" # replace - by _
    eval "option_$name=yes" ;;

  *)
    nonoption="$nonoption $option" ;;
  esac
done

for s in ${sections}; do
    s_opts=`eval echo '${section_opts__'${s}'}'`
    for s_o in ${s_opts}; do
	# Set default value of s_o if not set by the user
	eval test -n '"${value_'${s_o}'}"' || \
          eval value_${s_o}='"${defaultval_'${s_o}'}"'
    done
done

# ---------------------------------------------------------------------------
# Obtain the configuration for this machine

# Check values
# TODO: include in the doc?
if [ -n "$value_output" ]; then true; else
  echo "{configuration error: missing configuration dir}" 1>&2
  exit 1
fi
if test -n "$value_version"; then true; else
  echo "{configuration error: missing version dir}" 1>&2
  exit 1
fi
if test -n "$value_hpath"; then true; else
  echo "{configuration error: missing hpath for configure}" 1>&2
  exit 1
fi

mkdir -p "$value_output" || exit -1

CONFIGURE_DIR="$self"
VERSION_DIR="$value_version"
HPATH="$value_hpath"
CONFIGURATION_DIR="$value_output"
OPTIM_LEVEL="$value_optimlevel"
DEBUG_LEVEL="$value_debuglevel"
DEFAULT_LIBDIR="$value_libdir"
INCLUDE_BUILD_INFO="$value_build_info"
REMOTE="$value_remote"
COMPILER_VERSION="$value_compiler_version"
REQUIRE64="$value_require64"
WITH_CC="$value_with_cc"

USE_THREADS="$value_use_threads"
USE_POSIX_LOCKS="$value_use_posix_locks"

CONFIGURE="${CONFIGURATION_DIR}/configure"

targetexec() {
  prg=$1
  shift
  if [ x"${REMOTE}" = x ]; then
    ${prg} $*
  else
    scp ${prg} ${REMOTE}:/tmp
    ssh ${REMOTE} /tmp/`basename ${prg}`
  fi
}

case ${OPTIM_LEVEL} in
    optimized) OPTIM_FLAGS="-O2" ;;
    normal)    OPTIM_FLAGS="" ;;
esac

PARANOID_DEBUG_FLAGS="-W -Wtraditional -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wconversion -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -Wnested-externs -Winline"
case ${DEBUG_LEVEL} in
    paranoid-debug)
	DEBUG_FLAGS="-g -Wall ${PARANOID_DEBUG_FLAGS}" ;;
    debug)
	DEBUG_FLAGS="-g -Wall" ;; 
    nodebug)
	DEBUG_FLAGS="" ;;
esac

# Set machine dependant values
# TODO: move require64 code to config-sysdep.sh?
CIAOARCH=`targetexec ${CONFIGURE_DIR}/ciao_get_arch`
if test x"${REQUIRE64}" = x"yes"; then
    # check that we are compiling for a 64 bit architecture
    case ${CIAOARCH} in
	SolarisSparc64) true ;;
	LINUXx86_64)    true ;;
	LINUXppc64)     true ;;
	DARWINx86_64)   true ;;
	*)              echo "{configuration error: This executable requires a 64 bit architecture}" 1>&2 && exit 1 ;;
    esac
else
    # set 32 bit compatibility mode for 64 bit architectures,
    # do nothing for 32 bit architectures
    case ${CIAOARCH} in
	SolarisSparc64) CIAOARCH=SolarisSparc64m32 ;;
	LINUXx86_64)    CIAOARCH=LINUXx86_64m32 ;;
	LINUXppc64)     CIAOARCH=LINUXppc64m32 ;;
	DARWINx86_64)   CIAOARCH=DARWINx86_64m32 ;;
	*)              true ;;
    esac
fi
AVAILABLE_PROCESSORS=`targetexec ${CONFIGURE_DIR}/available_processors ${CIAOARCH}`
. ${CONFIGURE_DIR}/config-sysdep.sh

# Override compiler (CC and LD) if necessary
if test x"${WITH_CC}" != x""; then
    CC=${WITH_CC}
    LD=${WITH_CC}
fi

EXECMODE=775

CFLAGS="-Werror -Wall -Wstrict-aliasing=2 ${OPTIM_FLAGS} ${MEM_MNG_FLAGS} ${CIAOCCOPTS} ${ARCH_FLAGS} ${DEBUG_FLAGS} ${THREAD_FLAG} ${FOREIGN_FILES_FLAG} -DWITH_COMPILER_VERSION=${COMPILER_VERSION} -D${OSNAME} -D${ARCHNAME} ${ARCHFLAGS}"
LDFLAGS="${CIAOLDOPTS} ${LDFLAGS0}"

# Build info
VERSIONTAG="`cat ${VERSION_DIR}/GlobalVersion` [optim_comp]"
if test x"${INCLUDE_BUILD_INFO}" = x"yes"; then
    BUILD_DATE=": `LC_ALL=C LANG=C date`"
# TODO: include revision info (merge with trunk/)
#    REVISION="`cat ${VERSION_DIR}/svnrev`"
#    if test x"${REVISION}" = x""; then
#	REVISION_INFO=""
#    else
#	REVISION_INFO=" (r${REVISION})"
#    fi
#    BUILD_INFO="Ciao ${VERSIONTAG}${REVISION_INFO}${BUILD_DATE}\n"
    BUILD_INFO="Ciao ${VERSIONTAG}${BUILD_DATE}\n"
else
    BUILD_INFO="Ciao ${VERSIONTAG}\n"
fi

compile_configure() {
    ${CC} ${CFLAGS} ${HPATH} ${LDFLAGS} -o ${CONFIGURE} \
        ${CONFIGURE_DIR}/configure.c \
        ${CONFIGURE_DIR}/engine__own_mmap.c
}

clean_configure() {
    rm ${CONFIGURE}
}

create_configuration_dir() {
    mkdir -p ${CONFIGURATION_DIR}
    mkdir -p ${CONFIGURATION_DIR}/engine
}

emit_configuration_c() {
    CONFIGURATION_C="${CONFIGURATION_DIR}/engine/engine__configuration.c"
    cat > ${CONFIGURATION_C} <<EOF
char *emulator_version = "${BUILD_INFO}";
char *emulator_architecture = "${ARCHNAME}";
char *emulator_os = "${OSNAME}";
char *emulator__so_cc = "${CC}";
char *emulator__so_ld = "${LD}";
char *emulator__so_cc_opts = "${CFLAGS} ${CCSHARED}";
char *emulator__so_ld_opts = "${LDSHARED}";
char *emulator__so_libs = "${SOLIBS}";
char *ciao_versiontag = "${VERSIONTAG}";
char *installibdir = "${DEFAULT_LIBDIR}";
EOF
}
emit_define() {
    if test x"$1" = x"yes"; then
	echo "#define $2 1"
    fi
}
emit_configuration_h() {
    CONFIGURATION_H="${CONFIGURATION_DIR}/engine/engine__configuration.h"
    cat > ${CONFIGURATION_H} <<EOF
#if !defined(__CONFIGURATION_H__)
#define __CONFIGURATION_H__
`emit_define "${value_rtchecks}" "USE_RTCHECKS"`
`emit_define "${value_use_threads}" "USE_THREADS"`
`emit_define "${value_debug_trace}" "DEBUG_TRACE"`
`emit_define "${value_profile_insfreq}" "PROFILE_INSFREQ"`
`emit_define "${value_profile_ins2freq}" "PROFILE_INS2FREQ"`
`emit_define "${value_profile_blockfreq}" "PROFILE_BLOCKFREQ"`
`emit_define "${value_profile_stats}" "PROFILE_STATS"`
`targetexec ${CONFIGURE}`
#endif /* __CONFIGURATION_H__ */
EOF
}
emit_configuration_settings() {
    CONFIGURATION_SETTINGS="${CONFIGURATION_DIR}/arch-settings"
    cat > ${CONFIGURATION_SETTINGS} <<EOF
EXECMODE="${EXECMODE}"
CC="${CC}"
LD="${LD}"
CFLAGS="${CFLAGS}"
LDFLAGS="${LDFLAGS} ${CONSOLEFLAG}"
LIBS="${LIBS}"
EOF
}

compile_configure
create_configuration_dir
emit_configuration_c
emit_configuration_h
emit_configuration_settings
echo ${AVAILABLE_PROCESSORS} > "${CONFIGURATION_DIR}/maxjobs"
clean_configure
