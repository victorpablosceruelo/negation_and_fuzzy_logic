:- module(frontend__outfiles, [], [assertions, pure]).

:- use_module(engine(basiccontrol)).
:- use_module(engine(term_basic)).
:- use_module(engine(term_typing)).
:- use_module(engine(term_compare)).
:- use_module(engine(arithmetic)).
:- use_module(engine(atomic_basic)).
:- use_module(engine(data_facts)).

% (Use 'complang mini' to minimize dependencies at the runtime)
:- use_package(compiler(complang_mini)).

:- include(compiler(store__callback)).

% expanded dependences of a module
filetype__ext(expand__ideps, '.ideps').
filetype__kind(expand__ideps, portable_object).
% expanded imported and exported list of predicates
filetype__ext(expand__sym, '.sym').
filetype__kind(expand__sym, portable_object).
%
%% filetype__ext(prolog_assertion, '.asr').
%% filetype__kind(prolog_assertion, portable_object).
% compiled noarch code of a module
filetype__ext(compile, '.bin').
%
filetype__kind(compile, portable_object).
% bytecode of a module
filetype__ext(compile__emu, '.emu').
filetype__kind(compile__emu, portable_object).
%
% compilation dump (analysis, etc.)
filetype__ext(compile__dump, '.dump').
filetype__kind(compile__dump, portable_object). % TODO: portable_object is the right kind?
% autogenerated C code 
filetype__ext(compile__c, '.native.c').
filetype__kind(compile__c, portable_object).
% autogenerated C header 
filetype__ext(compile__h, '.native.h').
filetype__kind(compile__h, portable_header).
% dump of ptoc compilation (DEBUG)
%% filetype__ext(prolog_ptocdump, '.ptocdump').
%% filetype__kind(prolog_ptocdump, portable_object).

% for windows...

% TODO: use?
%% Extensions of target files (cannot change)
%filetype__ext(executable, Ext) :-
%        get_os(Os),
%	( Os = 'Win32' ; current_prolog_flag(self_contained,'Win32i86') ), !,
%	exec_ext(Ext).
%filetype__ext(executable, '').
%filetype__ext(win32batch, Ext) :- bat_ext(Ext).
% 
%% Extension for ciao executables in Win32
%:- include(compiler(win_exec_ext)).

