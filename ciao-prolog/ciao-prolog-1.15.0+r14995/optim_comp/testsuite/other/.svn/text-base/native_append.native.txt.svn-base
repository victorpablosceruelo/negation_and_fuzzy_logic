#include <engine/engine__definitions.h>
cvoid__proto_n(ptoc_append__0, tagged_t, tagged_t);
cfun__proto_n(__deref, tagged_t, tagged_t);
cinsnp__proto(ptoc__append_3aap__n3);
cvoid__proto(ptoc_append__init);
cvoid__proto(ptoc_append__end);
tagged_t ptoc_append__1;
definition_t *ptoc_append__2;
cbool__proto_n(cunify, tagged_t, tagged_t);
cfun__proto_n(fu1_type, tagged_t, tagged_t);
cbool__proto_n(bu1_var, tagged_t);
cbool__proto_n(bu1_number, tagged_t);
cbool__proto_n(bu1_nonvar, tagged_t);
cbool__proto_n(bu1_integer, tagged_t);
cbool__proto_n(bu1_float, tagged_t);
cbool__proto_n(bu1_atomic, tagged_t);
cbool__proto_n(bu1_atom, tagged_t);
cfun__proto_n(fu2_compare, tagged_t, tagged_t, tagged_t);
cbool__proto_n(bu2_lexge, tagged_t, tagged_t);
cbool__proto_n(bu2_lexgt, tagged_t, tagged_t);
cbool__proto_n(bu2_lexle, tagged_t, tagged_t);
cbool__proto_n(bu2_lexlt, tagged_t, tagged_t);
cbool__proto_n(bu2_lexne, tagged_t, tagged_t);
cbool__proto_n(bu2_lexeq, tagged_t, tagged_t);
cbool__proto_n(bu2_univ, tagged_t, tagged_t);
cbool__proto_n(bu3_functor, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_arg, tagged_t, tagged_t, tagged_t);
cbool__proto(prolog_copy_term);
cbool__proto(prolog_get_so_ld_opts);
cbool__proto(prolog_get_so_cc_opts);
cbool__proto(prolog_get_so_ld);
cbool__proto(prolog_get_so_cc);
cbool__proto(prolog_ciaolibdir);
cbool__proto(prolog_getos);
cbool__proto(prolog_getarch);
cbool__proto(prolog_stream_code);
cbool__proto(current_stream);
cbool__proto(prolog_clearerr);
cbool__proto(flush_output);
cbool__proto(flush_output1);
cbool__proto(line_position);
cbool__proto(line_count);
cbool__proto(character_count);
cbool__proto(prolog_current_output);
cbool__proto(prolog_set_output);
cbool__proto(prolog_current_input);
cbool__proto(prolog_set_input);
cbool__proto(prolog_close);
cbool__proto(prolog_open);
cbool__proto(prolog_display_string);
cbool__proto(prolog_format_print_integer);
cbool__proto(prolog_format_print_float);
cbool__proto(prolog_displayq);
cbool__proto(prolog_displayq2);
cbool__proto(prolog_display);
cbool__proto(prolog_display2);
cbool__proto(getct1);
cbool__proto(getct);
cbool__proto(code_class);
cbool__proto(tab);
cbool__proto(tab2);
cbool__proto(nl);
cbool__proto(nl1);
cbool__proto(put);
cbool__proto(put2);
cbool__proto(skip);
cbool__proto(skip2);
cbool__proto(peek);
cbool__proto(peek2);
cbool__proto(get1);
cbool__proto(get12);
cbool__proto(get);
cbool__proto(get2);
cbool__proto(disasm);
cbool__proto(metacut);
cbool__proto(metachoice);
cbool__proto(prolog_repeat);
cbool__proto_n(bu1_detach_attribute, tagged_t);
cbool__proto_n(bu2_update_attribute, tagged_t, tagged_t);
cfun__proto_n(fu1_get_attribute, tagged_t, tagged_t);
cbool__proto_n(bu2_attach_attribute, tagged_t, tagged_t);
cbool__proto(prolog_sub_atom);
cbool__proto(prolog_atom_concat);
cbool__proto(prolog_atom_length);
cbool__proto(prolog_number_codes_3);
cbool__proto(prolog_number_codes_2);
cbool__proto(prolog_atom_codes);
cbool__proto(prolog_name);
cfun__proto_n(fu1_atan, tagged_t, tagged_t);
cfun__proto_n(fu1_cos, tagged_t, tagged_t);
cfun__proto_n(fu1_sin, tagged_t, tagged_t);
cfun__proto_n(fu1_sqrt, tagged_t, tagged_t);
cfun__proto_n(fu1_log, tagged_t, tagged_t);
cfun__proto_n(fu1_exp, tagged_t, tagged_t);
cfun__proto_n(fu2_gcd, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_pow, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_mod, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_rsh, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_lsh, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_or, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_and, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_xor, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_rem, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_idivide, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_fdivide, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_times, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_minus, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu2_plus, tagged_t, tagged_t, tagged_t);
cfun__proto_n(fu1_ceil, tagged_t, tagged_t);
cfun__proto_n(fu1_round, tagged_t, tagged_t);
cfun__proto_n(fu1_floor, tagged_t, tagged_t);
cfun__proto_n(fu1_fractpart, tagged_t, tagged_t);
cfun__proto_n(fu1_intpart, tagged_t, tagged_t);
cfun__proto_n(fu1_sign, tagged_t, tagged_t);
cfun__proto_n(fu1_abs, tagged_t, tagged_t);
cfun__proto_n(fu1_not, tagged_t, tagged_t);
cfun__proto_n(fu1_float, tagged_t, tagged_t);
cfun__proto_n(fu1_integer, tagged_t, tagged_t);
cfun__proto_n(fu1_integer, tagged_t, tagged_t);
cfun__proto_n(fu1_add1, tagged_t, tagged_t);
cfun__proto_n(fu1_sub1, tagged_t, tagged_t);
cfun__proto_n(fu1_plus, tagged_t, tagged_t);
cfun__proto_n(fu1_minus, tagged_t, tagged_t);
cbool__proto_n(bu2_numne, tagged_t, tagged_t);
cbool__proto_n(bu2_numeq, tagged_t, tagged_t);
cbool__proto_n(bu2_numge, tagged_t, tagged_t);
cbool__proto_n(bu2_numgt, tagged_t, tagged_t);
cbool__proto_n(bu2_numle, tagged_t, tagged_t);
cbool__proto_n(bu2_numlt, tagged_t, tagged_t);
cvoid__proto_n(ptoc_append__0, tagged_t a, tagged_t b) {
  if (TagIsSVA(a)) {
    if (CondSVA(a)) {
      TrailPushCheck(a);
    }
    *TagToSVA(a) = b;
  } else {
    if (VarIsCVA(a)) {
      TrailPushCheck(a);
      *TagToCVA(a) = b;
      Wake;
    } else {
      if (CondHVA(a)) {
        TrailPushCheck(a);
      }
      *TagToHVA(a) = b;
    }
  }
  CVOID__PROCEED;
}
cfun__proto_n(__deref, tagged_t, tagged_t x) {
  tagged_t temp;
  tagged_t temp2;
  tagged_t temp3;
  temp3 = x;
  while (IsVar(temp3)) {
    temp2 = *TagToPointer(temp3);
    if (temp2 == temp3) {
      goto ptoc_append__3;
    }
    temp3 = temp2;
  }
ptoc_append__3:
  temp = temp3;
  return temp;
}
cinsnp__proto(ptoc__append_3aap__n3) {
  X(0) = CVOID__CALL_N(__deref, X(0));
  if (!IsVar(X(0))) goto ptoc_append__4;
  goto ptoc_append__5;
ptoc_append__4:
  if (!(X(0) == ptoc_append__1)) return FAIL_INSNP;
  goto ptoc_append__6;
ptoc_append__5:
  X(3) = ptoc_append__1;
  CVOID__CALL_N(ptoc_append__0, X(0), X(3));
ptoc_append__6:
  X(0) = CVOID__CALL_N(__deref, X(2));
  X(1) = CVOID__CALL_N(__deref, X(1));
  if (!CBOOL__SUCCEED_N(cunify, X(0), X(1))) return FAIL_INSNP;
  return SUCCESS_INSNP;
}
cvoid__proto(ptoc_append__init) {
  ptoc_append__1 = GET_ATOM("[]");
  ptoc_append__2 = register_cinsnp("ptoc_append:ap", 3, ptoc__append_3aap__n3);
}
cvoid__proto(ptoc_append__end) {
  unregister_cinsnp("ptoc_append:ap", 3);
}
