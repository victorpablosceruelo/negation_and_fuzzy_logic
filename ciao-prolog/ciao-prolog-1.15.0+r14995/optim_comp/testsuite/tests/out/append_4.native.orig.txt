#include <engine/basiccontrol.native.h>
definition_t *append__4__0;
bcp_t append__4__1;
bcp_t append__4__2;
bcp_t append__4_3ali_233__n1_l;
try_node_t *append__4__3;
tagged_t append__4__4;
try_node_t *append__4__5;
definition_t *append__4__6;
bcp_t append__4__7;
bool_t cunify(worker_t *, uint32_t, uint32_t);
bcp_t append__4_3at__n1(worker_t *);
bcp_t append__4_3at_230__n0(worker_t *);
bcp_t append__4_3ali_233__n1(worker_t *);
bcp_t append__4_3ali_235__n0(worker_t *);
bcp_t append__4_3ap__n1(worker_t *);
bcp_t append__4_3ap_230__n0(worker_t *);
/* append_4:t/1 */
bcp_t append__4_3at__n1(worker_t *w) {
  frame_t *var0;
  if (ValidLocalTop()) goto lab0; else goto lab1;
lab0:
  var0 = G->local_top;
  goto lab3;
lab1:
  var0 = w->choice->local_top;
  if (StackYounger(var0, G->frame)) goto lab3; else goto lab2;
lab2:
  var0 = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab3;
lab3:
  var0->x[1] = X(0);
  var0->x[0] = Tagp(2, &var0->x[0]);
  X(0) = var0->x[0];
  var0->next_insn = G->next_insn;
  var0->frame = G->frame;
  G->frame = var0;
  G->next_insn = append__4__1;
  G->local_top = StackCharOffset(var0, FrameSize(G->next_insn));
  if (OffStacktop(var0, Stack_Warn)) goto lab4; else goto lab5;
lab4:
  SetEvent();
  goto lab5;
lab5:
  G->next_insn = append__4__2;
  return append__4_3ali_233__n1_l;
}
/* append_4:t#0/0 */
bcp_t append__4_3at_230__n0(worker_t *w) {
  frame_t *var0;
  uint32_t *var1;
  uint32_t var2;
  var0 = G->frame;
  var0 = G->frame;
  DEREF(var2, var0->x[0]);
  if (TagH3_Is6(var2)) goto lab1; else goto lab0;
lab0:
  return FAIL_INSNP;
lab1:
  var1 = TagpPtr(6, var2);
  if (!cunify(w, var0->x[0], var0->x[1])) goto lab2; else goto lab3;
lab2:
  return FAIL_INSNP;
lab3:
  G->next_insn = var0->next_insn;
  G->frame = var0->frame;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab4; else goto lab5;
lab4:
  v__handle_event(w, 0);
  goto lab5;
lab5:
  G->local_top = NULL;
  return SUCCESS_INSNP;
}
/* append_4:li#3/1 */
bcp_t append__4_3ali_233__n1(worker_t *w) {
  uint32_t var0;
  uint32_t var1;
  choice_t *var2;
  int32_t var3;
  uint32_t var4;
  uint32_t var5;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 1);
  goto lab1;
lab1:
  w->previous_choice = w->choice;
  if (ValidLocalTop()) goto lab2; else goto lab3;
lab2:
  G->local_top = G->local_top;
  goto lab5;
lab3:
  G->local_top = w->choice->local_top;
  if (StackYounger(G->local_top, G->frame)) goto lab5; else goto lab4;
lab4:
  G->local_top = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab5;
lab5:
  G->next_alt = append__4__3;
  w->choice = ChoiceNext0(w->choice, append__4__3->arity);
  w->choice->flags = 0;
  w->choice->trail_top = G->trail_top;
  w->choice->local_top = G->local_top;
  w->choice->heap_top = G->heap_top;
  SetShallowTry();
  w->global_uncond = Tagp(0, w->choice->heap_top);
  w->local_uncond = Tagp(2, w->choice->local_top);
  w->choice = w->choice;
  TEST_CHOICE_OVERFLOW(w->choice, CHOICEPAD);
  var0 = append__4__4;
  DEREF(var1, X(0));
  var2 = w->choice;
  var2->frame = G->frame;
  var2->next_insn = G->next_insn;
  var2->next_alt = G->next_alt;
  var3 = 1;
  var2->x[0] = G->x[0];
  SetDeep();
  var4 = var1;
  var5 = var0;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var4, goto lab6;, goto lab9;, goto lab10;);
lab6:
  if (CondHVA(var4)) goto lab7; else goto lab8;
lab7:
  trail_push_check(w, var4);
  goto lab8;
lab8:
  *TagpPtr(0, var4) = var5;
  goto lab13;
lab9:
  trail_push_check(w, var4);
  *TagpPtr(1, var4) = var5;
  IncWakeCount();
  goto lab13;
lab10:
  if (CondSVA(var4)) goto lab11; else goto lab12;
lab11:
  trail_push_check(w, var4);
  goto lab12;
lab12:
  *TagpPtr(2, var4) = var5;
  goto lab13;
lab13:
  w->choice->next_alt = append__4__5;
  G->next_alt = append__4__5;
  G->local_top = NULL;
  return SUCCESS_INSNP;
}
/* append_4:li#5/0 */
bcp_t append__4_3ali_235__n0(worker_t *w) {
  uint32_t *var0;
  choice_t *var1;
  uint32_t *var2;
  uint32_t *var3;
  uint32_t var4;
  choice_t *var5;
  int32_t var6;
  choice_t *var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  uint32_t var11;
  var1 = w->choice;
  ResetWakeCount();
  var2 = G->trail_top;
  var3 = var1->trail_top;
  if (TrailYounger(var2, var3)) goto lab0; else goto lab4;
lab0:
  TrailDec(var2);
  var4 = *var2;
  if (IsVar(var4)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var2;
  goto lab5;
lab2:
  *TaggedToPointer(var4) = var4;
  if (TrailYounger(var2, var3)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var2;
  goto lab4;
lab4:
  G->heap_top = var1->heap_top;
  goto lab5;
lab5:
  var5 = w->choice;
  if (IsDeep()) goto lab6; else goto lab7;
lab6:
  DEBUG_DEEP_BACKTRACKING();
  var6 = 1;
  w->previous_choice = ChoiceCont0(var5, var6);
  SetShallowRetry();
  G->frame = var5->frame;
  G->next_insn = var5->next_insn;
  G->next_alt = var5->next_alt;
  G->local_top = var5->local_top;
  G->x[0] = var5->x[0];
  goto lab7;
lab7:
  G->local_top = NULL;
  var7 = w->previous_choice;
  G->next_alt = var7->next_alt;
  w->global_uncond = Tagp(0, var7->heap_top);
  w->local_uncond = Tagp(2, var7->local_top);
  w->choice = var7;
  DEBUG_CUT(var7);
  ConcChptCleanUp(TopConcChptFun(), var7);
  SetDeep();
  var8 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  DEREF(var9, X(0));
  var10 = var9;
  var11 = var8;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var10, goto lab8;, goto lab11;, goto lab12;);
lab8:
  if (CondHVA(var10)) goto lab9; else goto lab10;
lab9:
  trail_push_check(w, var10);
  goto lab10;
lab10:
  *TagpPtr(0, var10) = var11;
  goto lab15;
lab11:
  trail_push_check(w, var10);
  *TagpPtr(1, var10) = var11;
  IncWakeCount();
  goto lab15;
lab12:
  if (CondSVA(var10)) goto lab13; else goto lab14;
lab13:
  trail_push_check(w, var10);
  goto lab14;
lab14:
  *TagpPtr(2, var10) = var11;
  goto lab15;
lab15:
  var0[1 - 1] = Tagp(0, &var0[1 - 1]);
  var0[2 - 1] = Tagp(0, &var0[2 - 1]);
  X(0) = var0[2 - 1];
  return append__4_3ali_233__n1_l;
}
/* append_4:p/1 */
bcp_t append__4_3ap__n1(worker_t *w) {
  frame_t *var0;
  if (ValidLocalTop()) goto lab0; else goto lab1;
lab0:
  var0 = G->local_top;
  goto lab3;
lab1:
  var0 = w->choice->local_top;
  if (StackYounger(var0, G->frame)) goto lab3; else goto lab2;
lab2:
  var0 = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab3;
lab3:
  var0->x[1] = X(0);
  var0->x[0] = Tagp(2, &var0->x[0]);
  X(0) = var0->x[0];
  var0->next_insn = G->next_insn;
  var0->frame = G->frame;
  G->frame = var0;
  G->next_insn = append__4__1;
  G->local_top = StackCharOffset(var0, FrameSize(G->next_insn));
  if (OffStacktop(var0, Stack_Warn)) goto lab4; else goto lab5;
lab4:
  SetEvent();
  goto lab5;
lab5:
  G->next_insn = append__4__7;
  return append__4_3ali_233__n1_l;
}
/* append_4:p#0/0 */
bcp_t append__4_3ap_230__n0(worker_t *w) {
  frame_t *var0;
  uint32_t var1;
  var0 = G->frame;
  var0 = G->frame;
  DEREF(var1, var0->x[0]);
  if (var1 == append__4__4) goto lab1; else goto lab0;
lab0:
  return FAIL_INSNP;
lab1:
  if (!cunify(w, var0->x[0], var0->x[1])) goto lab2; else goto lab3;
lab2:
  return FAIL_INSNP;
lab3:
  G->next_insn = var0->next_insn;
  G->frame = var0->frame;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab4; else goto lab5;
lab4:
  v__handle_event(w, 0);
  goto lab5;
lab5:
  G->local_top = NULL;
  return SUCCESS_INSNP;
}
void append__4__init(worker_t *w) {
  append__4__0 = register_cinsnp("append_4:t", 1, append__4_3at__n1);
  append__4__1 = def_success_cinsnp(w, NULL, 2);
  append__4__2 = def_success_cinsnp(w, append__4_3at_230__n0, 2);
  append__4_3ali_233__n1_l = def_exec_cinsnp(w, append__4_3ali_233__n1);
  append__4__3 = def_retry_cinsnp(w, NULL, 1);
  append__4__4 = GET_ATOM("[]");
  append__4__5 = def_retry_cinsnp(w, append__4_3ali_235__n0, 1);
  append__4__6 = register_cinsnp("append_4:p", 1, append__4_3ap__n1);
  append__4__7 = def_success_cinsnp(w, append__4_3ap_230__n0, 2);
}
void append__4__end(worker_t *w) {
  unregister_cinsnp("append_4:t", 1);
  unregister_cinsnp("append_4:p", 1);
}
