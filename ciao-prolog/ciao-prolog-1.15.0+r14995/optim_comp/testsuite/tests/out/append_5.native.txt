#include <engine/basiccontrol.native.h>
definition_t *append__5__0;
tagged_t append__5__1;
bcp_t append__5_3aextract__path_2312__n2_l;
try_node_t *append__5__2;
tagged_t append__5__3;
try_node_t *append__5__4;
try_node_t *append__5__5;
try_node_t *append__5__6;
bcp_t append__5_3aextract__paths__n0(worker_t *);
bcp_t append__5_3aextract__path_2312__n2(worker_t *);
bcp_t append__5_3aextract__path_2317__n0(worker_t *);
bcp_t append__5_3aextract__path_2319__n0(worker_t *);
bcp_t append__5_3aextract__path_2321__n0(worker_t *);
/* append_5:extract_paths/0 */
bcp_t append__5_3aextract__paths__n0(worker_t *w) {
  uint32_t *var0;
  uint32_t var1;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 0);
  goto lab1;
lab1:
  X(0) = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var0[1 - 1] = MakeSmall(1);
  var0[2 - 1] = append__5__1;
  var1 = Tagp(0, G->heap_top);
  X(1) = var1;
  *G->heap_top = var1;
  G->heap_top = G->heap_top + 1;
  return append__5_3aextract__path_2312__n2_l;
}
/* append_5:extract_path#12/2 */
bcp_t append__5_3aextract__path_2312__n2(worker_t *w) {
  uint32_t var0;
  uint32_t var1;
  uint32_t var2;
  uint32_t var3;
  uint32_t var4;
  choice_t *var5;
  int32_t var6;
  uint32_t var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  choice_t *var11;
  int32_t var12;
  uint32_t var13;
  uint32_t var14;
  uint32_t var15;
  uint32_t var16;
  choice_t *var17;
  int32_t var18;
  uint32_t var19;
  uint32_t var20;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 2);
  goto lab1;
lab1:
  DEREF(var0, X(0));
  var1 = var0;
  if (TagH3_Is6(var1)) goto lab3; else goto lab2;
lab2:
  var2 = var1;
  goto lab16;
lab3:
  /* append_5:extract_path#14/2 */
  w->previous_choice = w->choice;
  if (ValidLocalTop()) goto lab4; else goto lab5;
lab4:
  G->local_top = G->local_top;
  goto lab7;
lab5:
  G->local_top = w->choice->local_top;
  if (StackYounger(G->local_top, G->frame)) goto lab7; else goto lab6;
lab6:
  G->local_top = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab7;
lab7:
  G->next_alt = append__5__2;
  w->choice = ChoiceNext0(w->choice, append__5__2->arity);
  w->choice->flags = 0;
  w->choice->trail_top = G->trail_top;
  w->choice->local_top = G->local_top;
  w->choice->heap_top = G->heap_top;
  SetShallowTry();
  w->global_uncond = Tagp(0, w->choice->heap_top);
  w->local_uncond = Tagp(2, w->choice->local_top);
  w->choice = w->choice;
  TEST_CHOICE_OVERFLOW(w->choice, CHOICEPAD);
  var3 = append__5__3;
  DEREF(var4, X(1));
  var5 = w->choice;
  var5->frame = G->frame;
  var5->next_insn = G->next_insn;
  var5->next_alt = G->next_alt;
  var6 = 2;
  var5->x[0] = G->x[0];
  var5->x[1] = G->x[1];
  SetDeep();
  var7 = var4;
  var8 = var3;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var7, goto lab8;, goto lab11;, goto lab12;);
lab8:
  if (CondHVA(var7)) goto lab9; else goto lab10;
lab9:
  trail_push_check(w, var7);
  goto lab10;
lab10:
  *TagpPtr(0, var7) = var8;
  goto lab15;
lab11:
  trail_push_check(w, var7);
  *TagpPtr(1, var7) = var8;
  IncWakeCount();
  goto lab15;
lab12:
  if (CondSVA(var7)) goto lab13; else goto lab14;
lab13:
  trail_push_check(w, var7);
  goto lab14;
lab14:
  *TagpPtr(2, var7) = var8;
  goto lab15;
lab15:
  w->choice->next_alt = append__5__4;
  G->next_alt = append__5__4;
  G->local_top = NULL;
  return SUCCESS_INSNP;
lab16:
  if (var2 == append__5__1) goto lab17; else goto lab30;
lab17:
  /* append_5:extract_path#13/2 */
  w->previous_choice = w->choice;
  if (ValidLocalTop()) goto lab18; else goto lab19;
lab18:
  G->local_top = G->local_top;
  goto lab21;
lab19:
  G->local_top = w->choice->local_top;
  if (StackYounger(G->local_top, G->frame)) goto lab21; else goto lab20;
lab20:
  G->local_top = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab21;
lab21:
  G->next_alt = append__5__2;
  w->choice = ChoiceNext0(w->choice, append__5__2->arity);
  w->choice->flags = 0;
  w->choice->trail_top = G->trail_top;
  w->choice->local_top = G->local_top;
  w->choice->heap_top = G->heap_top;
  SetShallowTry();
  w->global_uncond = Tagp(0, w->choice->heap_top);
  w->local_uncond = Tagp(2, w->choice->local_top);
  w->choice = w->choice;
  TEST_CHOICE_OVERFLOW(w->choice, CHOICEPAD);
  var9 = append__5__3;
  DEREF(var10, X(1));
  var11 = w->choice;
  var11->frame = G->frame;
  var11->next_insn = G->next_insn;
  var11->next_alt = G->next_alt;
  var12 = 2;
  var11->x[0] = G->x[0];
  var11->x[1] = G->x[1];
  SetDeep();
  var13 = var10;
  var14 = var9;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var13, goto lab22;, goto lab25;, goto lab26;);
lab22:
  if (CondHVA(var13)) goto lab23; else goto lab24;
lab23:
  trail_push_check(w, var13);
  goto lab24;
lab24:
  *TagpPtr(0, var13) = var14;
  goto lab29;
lab25:
  trail_push_check(w, var13);
  *TagpPtr(1, var13) = var14;
  IncWakeCount();
  goto lab29;
lab26:
  if (CondSVA(var13)) goto lab27; else goto lab28;
lab27:
  trail_push_check(w, var13);
  goto lab28;
lab28:
  *TagpPtr(2, var13) = var14;
  goto lab29;
lab29:
  w->choice->next_alt = append__5__5;
  G->next_alt = append__5__5;
  G->local_top = NULL;
  return SUCCESS_INSNP;
lab30:
  /* append_5:extract_path#15/2 */
  w->previous_choice = w->choice;
  if (ValidLocalTop()) goto lab31; else goto lab32;
lab31:
  G->local_top = G->local_top;
  goto lab34;
lab32:
  G->local_top = w->choice->local_top;
  if (StackYounger(G->local_top, G->frame)) goto lab34; else goto lab33;
lab33:
  G->local_top = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab34;
lab34:
  G->next_alt = append__5__2;
  w->choice = ChoiceNext0(w->choice, append__5__2->arity);
  w->choice->flags = 0;
  w->choice->trail_top = G->trail_top;
  w->choice->local_top = G->local_top;
  w->choice->heap_top = G->heap_top;
  SetShallowTry();
  w->global_uncond = Tagp(0, w->choice->heap_top);
  w->local_uncond = Tagp(2, w->choice->local_top);
  w->choice = w->choice;
  TEST_CHOICE_OVERFLOW(w->choice, CHOICEPAD);
  var15 = append__5__3;
  DEREF(var16, X(1));
  var17 = w->choice;
  var17->frame = G->frame;
  var17->next_insn = G->next_insn;
  var17->next_alt = G->next_alt;
  var18 = 2;
  var17->x[0] = G->x[0];
  var17->x[1] = G->x[1];
  SetDeep();
  var19 = var16;
  var20 = var15;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var19, goto lab35;, goto lab38;, goto lab39;);
lab35:
  if (CondHVA(var19)) goto lab36; else goto lab37;
lab36:
  trail_push_check(w, var19);
  goto lab37;
lab37:
  *TagpPtr(0, var19) = var20;
  goto lab42;
lab38:
  trail_push_check(w, var19);
  *TagpPtr(1, var19) = var20;
  IncWakeCount();
  goto lab42;
lab39:
  if (CondSVA(var19)) goto lab40; else goto lab41;
lab40:
  trail_push_check(w, var19);
  goto lab41;
lab41:
  *TagpPtr(2, var19) = var20;
  goto lab42;
lab42:
  w->choice->next_alt = append__5__6;
  G->next_alt = append__5__6;
  G->local_top = NULL;
  return SUCCESS_INSNP;
}
/* append_5:extract_path#17/0 */
bcp_t append__5_3aextract__path_2317__n0(worker_t *w) {
  choice_t *var0;
  uint32_t *var1;
  uint32_t *var2;
  uint32_t var3;
  choice_t *var4;
  int32_t var5;
  choice_t *var6;
  var0 = w->choice;
  ResetWakeCount();
  var1 = G->trail_top;
  var2 = var0->trail_top;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab4;
lab0:
  TrailDec(var1);
  var3 = *var1;
  if (IsVar(var3)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var1;
  goto lab5;
lab2:
  *TaggedToPointer(var3) = var3;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var1;
  goto lab4;
lab4:
  G->heap_top = var0->heap_top;
  goto lab5;
lab5:
  var4 = w->choice;
  if (IsDeep()) goto lab6; else goto lab7;
lab6:
  DEBUG_DEEP_BACKTRACKING();
  var5 = 2;
  w->previous_choice = ChoiceCont0(var4, var5);
  SetShallowRetry();
  G->frame = var4->frame;
  G->next_insn = var4->next_insn;
  G->next_alt = var4->next_alt;
  G->local_top = var4->local_top;
  G->x[0] = var4->x[0];
  G->x[1] = var4->x[1];
  goto lab7;
lab7:
  G->local_top = NULL;
  var6 = w->previous_choice;
  G->next_alt = var6->next_alt;
  w->global_uncond = Tagp(0, var6->heap_top);
  w->local_uncond = Tagp(2, var6->local_top);
  w->choice = var6;
  DEBUG_CUT(var6);
  ConcChptCleanUp(TopConcChptFun(), var6);
  SetDeep();
  X(0) = append__5__1;
  return append__5_3aextract__path_2312__n2_l;
}
/* append_5:extract_path#19/0 */
bcp_t append__5_3aextract__path_2319__n0(worker_t *w) {
  choice_t *var0;
  uint32_t *var1;
  uint32_t *var2;
  uint32_t var3;
  choice_t *var4;
  int32_t var5;
  choice_t *var6;
  var0 = w->choice;
  ResetWakeCount();
  var1 = G->trail_top;
  var2 = var0->trail_top;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab4;
lab0:
  TrailDec(var1);
  var3 = *var1;
  if (IsVar(var3)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var1;
  goto lab5;
lab2:
  *TaggedToPointer(var3) = var3;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var1;
  goto lab4;
lab4:
  G->heap_top = var0->heap_top;
  goto lab5;
lab5:
  var4 = w->choice;
  if (IsDeep()) goto lab6; else goto lab7;
lab6:
  DEBUG_DEEP_BACKTRACKING();
  var5 = 2;
  w->previous_choice = ChoiceCont0(var4, var5);
  SetShallowRetry();
  G->frame = var4->frame;
  G->next_insn = var4->next_insn;
  G->next_alt = var4->next_alt;
  G->local_top = var4->local_top;
  G->x[0] = var4->x[0];
  G->x[1] = var4->x[1];
  goto lab7;
lab7:
  G->local_top = NULL;
  var6 = w->previous_choice;
  G->next_alt = var6->next_alt;
  w->global_uncond = Tagp(0, var6->heap_top);
  w->local_uncond = Tagp(2, var6->local_top);
  w->choice = var6;
  DEBUG_CUT(var6);
  ConcChptCleanUp(TopConcChptFun(), var6);
  SetDeep();
  X(0) = append__5__1;
  return append__5_3aextract__path_2312__n2_l;
}
/* append_5:extract_path#21/0 */
bcp_t append__5_3aextract__path_2321__n0(worker_t *w) {
  choice_t *var0;
  uint32_t *var1;
  uint32_t *var2;
  uint32_t var3;
  choice_t *var4;
  int32_t var5;
  choice_t *var6;
  var0 = w->choice;
  ResetWakeCount();
  var1 = G->trail_top;
  var2 = var0->trail_top;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab4;
lab0:
  TrailDec(var1);
  var3 = *var1;
  if (IsVar(var3)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var1;
  goto lab5;
lab2:
  *TaggedToPointer(var3) = var3;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var1;
  goto lab4;
lab4:
  G->heap_top = var0->heap_top;
  goto lab5;
lab5:
  var4 = w->choice;
  if (IsDeep()) goto lab6; else goto lab7;
lab6:
  DEBUG_DEEP_BACKTRACKING();
  var5 = 2;
  w->previous_choice = ChoiceCont0(var4, var5);
  SetShallowRetry();
  G->frame = var4->frame;
  G->next_insn = var4->next_insn;
  G->next_alt = var4->next_alt;
  G->local_top = var4->local_top;
  G->x[0] = var4->x[0];
  G->x[1] = var4->x[1];
  goto lab7;
lab7:
  G->local_top = NULL;
  var6 = w->previous_choice;
  G->next_alt = var6->next_alt;
  w->global_uncond = Tagp(0, var6->heap_top);
  w->local_uncond = Tagp(2, var6->local_top);
  w->choice = var6;
  DEBUG_CUT(var6);
  ConcChptCleanUp(TopConcChptFun(), var6);
  SetDeep();
  X(0) = append__5__1;
  return append__5_3aextract__path_2312__n2_l;
}
void append__5__init(worker_t *w) {
  append__5__0 = register_cinsnp("append_5:extract_paths", 0, append__5_3aextract__paths__n0);
  append__5__1 = GET_ATOM("[]");
  append__5_3aextract__path_2312__n2_l = def_exec_cinsnp(w, append__5_3aextract__path_2312__n2);
  append__5__2 = def_retry_cinsnp(w, NULL, 2);
  append__5__3 = GET_ATOM("a");
  append__5__4 = def_retry_cinsnp(w, append__5_3aextract__path_2317__n0, 2);
  append__5__5 = def_retry_cinsnp(w, append__5_3aextract__path_2319__n0, 2);
  append__5__6 = def_retry_cinsnp(w, append__5_3aextract__path_2321__n0, 2);
}
void append__5__end(worker_t *w) {
  unregister_cinsnp("append_5:extract_paths", 0);
}
