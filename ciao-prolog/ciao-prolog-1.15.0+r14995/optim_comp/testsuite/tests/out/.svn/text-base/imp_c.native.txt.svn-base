#include <engine/basiccontrol.native.h>
char *msg = "this is a message\n";
#include <math.h>
definition_t *imp__c__0;
bcp_t imp__c__1;
definition_t *imp__c__2;
try_node_t *imp__c__3;
try_node_t *imp__c__4;
tagged_t imp__c__5;
try_node_t *imp__c__6;
definition_t *imp__c__7;
tagged_t imp__c__8;
definition_t *imp__c__9;
bcp_t imp__c__10;
bool_t cunify(worker_t *, uint32_t, uint32_t);
void imp__c_3atest3__n0(worker_t *);
bcp_t imp__c_3andi__n1(worker_t *);
bcp_t imp__c_3andi_232__n0(worker_t *);
bcp_t imp__c_3andi_233__n0(worker_t *);
bool_t imp__c_3ab__n1(worker_t *);
bool_t imp__c_3aa__n2(worker_t *);
void imp__c_3amypr_233__n1(worker_t *);
/* imp_c:test3/0 */
void imp__c_3atest3__n0(worker_t *w) {
  frame_t *var0;
  if (ValidLocalTop()) goto lab0; else goto lab1;
lab0:
  var0 = G->local_top;
  goto lab3;
lab1:
  var0 = w->choice->local_top;
  if (StackYounger(var0, G->frame)) goto lab3; else goto lab2;
lab2:
  var0 = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab3;
lab3:
  var0->next_insn = G->next_insn;
  var0->frame = G->frame;
  G->frame = var0;
  G->next_insn = imp__c__1;
  G->local_top = StackCharOffset(var0, FrameSize(G->next_insn));
  if (OffStacktop(var0, Stack_Warn)) goto lab4; else goto lab5;
lab4:
  SetEvent();
  goto lab5;
lab5:
  /* imp_c:test3__2#3/0 */
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab6; else goto lab7;
lab6:
  v__handle_event(w, 0);
  goto lab7;
lab7:
  G->local_top = NULL;
  var0 = G->frame;
  G->next_insn = var0->next_insn;
  G->frame = var0->frame;
  /* imp_c:test3__3#3/0 */
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab8; else goto lab9;
lab8:
  v__handle_event(w, 0);
  goto lab9;
lab9:
  G->local_top = NULL;
  return;
}
/* imp_c:ndi/1 */
bcp_t imp__c_3andi__n1(worker_t *w) {
  uint32_t var0;
  uint32_t var1;
  choice_t *var2;
  int32_t var3;
  uint32_t var4;
  uint32_t var5;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 1);
  goto lab1;
lab1:
  w->previous_choice = w->choice;
  if (ValidLocalTop()) goto lab2; else goto lab3;
lab2:
  G->local_top = G->local_top;
  goto lab5;
lab3:
  G->local_top = w->choice->local_top;
  if (StackYounger(G->local_top, G->frame)) goto lab5; else goto lab4;
lab4:
  G->local_top = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab5;
lab5:
  G->next_alt = imp__c__3;
  w->choice = ChoiceNext0(w->choice, imp__c__3->arity);
  w->choice->flags = 0;
  w->choice->trail_top = G->trail_top;
  w->choice->local_top = G->local_top;
  w->choice->heap_top = G->heap_top;
  SetShallowTry();
  w->global_uncond = Tagp(0, w->choice->heap_top);
  w->local_uncond = Tagp(2, w->choice->local_top);
  w->choice = w->choice;
  TEST_CHOICE_OVERFLOW(w->choice, CHOICEPAD);
  var0 = MakeSmall(1);
  DEREF(var1, X(0));
  var2 = w->choice;
  var2->frame = G->frame;
  var2->next_insn = G->next_insn;
  var2->next_alt = G->next_alt;
  var3 = 1;
  var2->x[0] = G->x[0];
  SetDeep();
  var4 = var1;
  var5 = var0;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var4, goto lab6;, goto lab9;, goto lab10;);
lab6:
  if (CondHVA(var4)) goto lab7; else goto lab8;
lab7:
  trail_push_check(w, var4);
  goto lab8;
lab8:
  *TagpPtr(0, var4) = var5;
  goto lab13;
lab9:
  trail_push_check(w, var4);
  *TagpPtr(1, var4) = var5;
  IncWakeCount();
  goto lab13;
lab10:
  if (CondSVA(var4)) goto lab11; else goto lab12;
lab11:
  trail_push_check(w, var4);
  goto lab12;
lab12:
  *TagpPtr(2, var4) = var5;
  goto lab13;
lab13:
  w->choice->next_alt = imp__c__4;
  G->next_alt = imp__c__4;
  G->local_top = NULL;
  return SUCCESS_INSNP;
}
/* imp_c:ndi#2/0 */
bcp_t imp__c_3andi_232__n0(worker_t *w) {
  choice_t *var0;
  uint32_t *var1;
  uint32_t *var2;
  uint32_t var3;
  choice_t *var4;
  int32_t var5;
  choice_t *var6;
  uint32_t var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  var0 = w->choice;
  ResetWakeCount();
  var1 = G->trail_top;
  var2 = var0->trail_top;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab4;
lab0:
  TrailDec(var1);
  var3 = *var1;
  if (IsVar(var3)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var1;
  goto lab5;
lab2:
  *TaggedToPointer(var3) = var3;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var1;
  goto lab4;
lab4:
  G->heap_top = var0->heap_top;
  goto lab5;
lab5:
  var4 = w->choice;
  if (IsDeep()) goto lab6; else goto lab7;
lab6:
  DEBUG_DEEP_BACKTRACKING();
  var5 = 1;
  w->previous_choice = ChoiceCont0(var4, var5);
  SetShallowRetry();
  G->frame = var4->frame;
  G->next_insn = var4->next_insn;
  G->next_alt = var4->next_alt;
  G->local_top = var4->local_top;
  G->x[0] = var4->x[0];
  goto lab7;
lab7:
  G->local_top = NULL;
  var6 = w->previous_choice;
  G->next_alt = var6->next_alt;
  w->global_uncond = Tagp(0, var6->heap_top);
  w->local_uncond = Tagp(2, var6->local_top);
  w->choice = var6;
  DEBUG_CUT(var6);
  ConcChptCleanUp(TopConcChptFun(), var6);
  SetDeep();
  var7 = imp__c__5;
  DEREF(var8, X(0));
  var9 = var8;
  var10 = var7;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var9, goto lab8;, goto lab11;, goto lab12;);
lab8:
  if (CondHVA(var9)) goto lab9; else goto lab10;
lab9:
  trail_push_check(w, var9);
  goto lab10;
lab10:
  *TagpPtr(0, var9) = var10;
  goto lab15;
lab11:
  trail_push_check(w, var9);
  *TagpPtr(1, var9) = var10;
  IncWakeCount();
  goto lab15;
lab12:
  if (CondSVA(var9)) goto lab13; else goto lab14;
lab13:
  trail_push_check(w, var9);
  goto lab14;
lab14:
  *TagpPtr(2, var9) = var10;
  goto lab15;
lab15:
  G->local_top = NULL;
  return SUCCESS_INSNP;
}
/* imp_c:ndi#3/0 */
bcp_t imp__c_3andi_233__n0(worker_t *w) {
  choice_t *var0;
  uint32_t *var1;
  uint32_t *var2;
  uint32_t var3;
  choice_t *var4;
  int32_t var5;
  uint32_t var6;
  uint32_t var7;
  choice_t *var8;
  int32_t var9;
  uint32_t var10;
  uint32_t var11;
  var0 = w->choice;
  ResetWakeCount();
  var1 = G->trail_top;
  var2 = var0->trail_top;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab4;
lab0:
  TrailDec(var1);
  var3 = *var1;
  if (IsVar(var3)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var1;
  goto lab5;
lab2:
  *TaggedToPointer(var3) = var3;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var1;
  goto lab4;
lab4:
  G->heap_top = var0->heap_top;
  goto lab5;
lab5:
  var4 = w->choice;
  if (IsDeep()) goto lab6; else goto lab7;
lab6:
  DEBUG_DEEP_BACKTRACKING();
  var5 = 1;
  w->previous_choice = ChoiceCont0(var4, var5);
  SetShallowRetry();
  G->frame = var4->frame;
  G->next_insn = var4->next_insn;
  G->next_alt = var4->next_alt;
  G->local_top = var4->local_top;
  G->x[0] = var4->x[0];
  goto lab7;
lab7:
  var6 = MakeSmall(2);
  DEREF(var7, X(0));
  if (IsShallowTry()) goto lab8; else goto lab9;
lab8:
  var8 = w->choice;
  var8->frame = G->frame;
  var8->next_insn = G->next_insn;
  var8->next_alt = G->next_alt;
  var9 = 1;
  var8->x[0] = G->x[0];
  goto lab9;
lab9:
  SetDeep();
  var10 = var7;
  var11 = var6;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var10, goto lab10;, goto lab13;, goto lab14;);
lab10:
  if (CondHVA(var10)) goto lab11; else goto lab12;
lab11:
  trail_push_check(w, var10);
  goto lab12;
lab12:
  *TagpPtr(0, var10) = var11;
  goto lab17;
lab13:
  trail_push_check(w, var10);
  *TagpPtr(1, var10) = var11;
  IncWakeCount();
  goto lab17;
lab14:
  if (CondSVA(var10)) goto lab15; else goto lab16;
lab15:
  trail_push_check(w, var10);
  goto lab16;
lab16:
  *TagpPtr(2, var10) = var11;
  goto lab17;
lab17:
  w->choice->next_alt = imp__c__6;
  G->next_alt = imp__c__6;
  G->local_top = NULL;
  return SUCCESS_INSNP;
}
/* imp_c:b/1 */
bool_t imp__c_3ab__n1(worker_t *w) {
  uint32_t *var0;
  flt64_t var1;
  uint32_t var2;
  uint32_t var3;
  flt64_t var4;
  uint32_t var5;
  uint32_t var6;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 1);
  goto lab1;
lab1:
  var1 = (flt64_t)2;
  var2 = BoxFloat(var1);
  var3 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var0[1 - 1] = var2;
  var0[2 - 1] = imp__c__8;
  var4 = (flt64_t)3.1415;
  var5 = BoxFloat(var4);
  var6 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var0[1 - 1] = var5;
  var0[2 - 1] = var3;
  return cunify(w, X(0), var6);
}
/* imp_c:a/2 */
bool_t imp__c_3aa__n2(worker_t *w) {
  frame_t *var0;
  uint32_t var1;
  char *var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  uint32_t var6;
  uint32_t var7;
  uint32_t var8;
  int32_t var9;
  uint32_t var10;
  uint32_t var11;
  int32_t var12;
  uint32_t var13;
  int32_t var14;
  int32_t var15;
  uint32_t var16;
  int32_t var17;
  int32_t var18;
  uint32_t var19;
  int32_t var20;
  int32_t var21;
  uint32_t var22;
  int32_t var23;
  int32_t var24;
  uint32_t var25;
  int32_t var26;
  uint32_t var27;
  int32_t var28;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 2);
  goto lab1;
lab1:
  w->previous_choice = w->choice;
  DEREF(var1, X(0));
  if (TaggedIsSmall(var1)) goto lab3; else goto lab2;
lab2:
  return FALSE;
lab3:
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab4; else goto lab5;
lab4:
  v__handle_event(w, 2);
  goto lab5;
lab5:
  w->previous_choice = w->choice;
  if (ValidLocalTop()) goto lab6; else goto lab7;
lab6:
  var0 = G->local_top;
  goto lab9;
lab7:
  var0 = w->choice->local_top;
  if (StackYounger(var0, G->frame)) goto lab9; else goto lab8;
lab8:
  var0 = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab9;
lab9:
  var0->x[0] = X(1);
  var0->x[1] = X(0);
  var2 = "prolog rules!";
  X(0) = IntmachToTagged((int32_t)var2);
  var0->next_insn = G->next_insn;
  var0->frame = G->frame;
  G->frame = var0;
  G->next_insn = imp__c__10;
  G->local_top = StackCharOffset(var0, FrameSize(G->next_insn));
  if (OffStacktop(var0, Stack_Warn)) goto lab10; else goto lab11;
lab10:
  SetEvent();
  goto lab11;
lab11:
  imp__c_3amypr_233__n1(w);
  var0 = G->frame;
  var3 = var0->x[1];
  DEREF(var4, var3);
  if (TaggedIsSmall(var4)) goto lab13; else goto lab12;
lab12:
  return FALSE;
lab13:
  var0 = G->frame;
  var5 = var0->x[1];
  var6 = var0->x[0];
  DEREF(var7, var6);
  if (TaggedIsSmall(var7)) goto lab15; else goto lab14;
lab14:
  return FALSE;
lab15:
  var0 = G->frame;
  X(0) = var0->x[0];
  DEREF(var8, X(0));
  var9 = GetSmall(var8);
  /* imp_c:d#3/1 */
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab16; else goto lab17;
lab16:
  v__handle_event(w, 1);
  goto lab17;
lab17:
  DEREF(var10, X(0));
  if (TaggedIsSmall(var10)) goto lab19; else goto lab18;
lab18:
  return FALSE;
lab19:
  G->local_top = NULL;
  var0 = G->frame;
  DEREF(var11, var5);
  var12 = GetSmall(var11);
  DEREF(var13, X(0));
  var14 = GetSmall(var13);
  if (var12 == var14) goto lab21; else goto lab20;
lab20:
  return FALSE;
lab21:
  var0 = G->frame;
  var15 = 100000;
  DEREF(var16, var5);
  var17 = GetSmall(var16);
  var18 = var15 + var17;
  DEREF(var19, var5);
  var20 = GetSmall(var19);
  var21 = var18 + var20;
  DEREF(var22, X(0));
  var23 = GetSmall(var22);
  var24 = var21 + var23;
  DEREF(var25, var5);
  var26 = GetSmall(var25);
  DEREF(var27, X(0));
  var28 = GetSmall(var27);
  printf("%s x:%d y:%d\n", msg, var26, var28);
  var0 = G->frame;
  printf("%s x:%d y:%d\n", msg, var21, var24);
  var0 = G->frame;
  G->next_insn = var0->next_insn;
  G->frame = var0->frame;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab22; else goto lab23;
lab22:
  v__handle_event(w, 0);
  goto lab23;
lab23:
  G->local_top = NULL;
  return TRUE;
}
/* imp_c:mypr#3/1 */
void imp__c_3amypr_233__n1(worker_t *w) {
  uint32_t var0;
  char *var1;
  char *var2;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 1);
  goto lab1;
lab1:
  DEREF(var0, X(0));
  var1 = (char *)TaggedToIntmach(var0);
  printf("%s", var1);
  var2 = "\n";
  printf("%s", var2);
  G->local_top = NULL;
  return;
}
void imp__c__init(worker_t *w) {
  imp__c__0 = register_cvoid("imp_c:test3", 0, imp__c_3atest3__n0);
  imp__c__1 = def_success_cinsnp(w, NULL, 0);
  imp__c__2 = register_cinsnp("imp_c:ndi", 1, imp__c_3andi__n1);
  imp__c__3 = def_retry_cinsnp(w, NULL, 1);
  imp__c__4 = def_retry_cinsnp(w, imp__c_3andi_233__n0, 1);
  imp__c__5 = GET_ATOM("a");
  imp__c__6 = def_retry_cinsnp(w, imp__c_3andi_232__n0, 1);
  imp__c__7 = register_cbool("imp_c:b", 1, imp__c_3ab__n1);
  imp__c__8 = GET_ATOM("[]");
  imp__c__9 = register_cbool("imp_c:a", 2, imp__c_3aa__n2);
  imp__c__10 = def_success_cinsnp(w, NULL, 2);
}
void imp__c__end(worker_t *w) {
  unregister_cvoid("imp_c:test3", 0);
  unregister_cinsnp("imp_c:ndi", 1);
  unregister_cbool("imp_c:b", 1);
  unregister_cbool("imp_c:a", 2);
}
