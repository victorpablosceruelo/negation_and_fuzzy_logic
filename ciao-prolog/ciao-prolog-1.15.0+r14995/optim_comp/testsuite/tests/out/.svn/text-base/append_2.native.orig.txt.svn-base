#include <engine/basiccontrol.native.h>
#include <math.h>
definition_t *append__2__0;
bcp_t append__2_3al_230__n1_l;
tagged_t append__2__1;
bcp_t append__2_3al_233__n1_l;
bcp_t append__2_3al_232__n1_l;
definition_t *append__2__2;
try_node_t *append__2__3;
try_node_t *append__2__4;
bcp_t append__2_3al__n1_l;
definition_t *append__2__5;
definition_t *append__2__6;
definition_t *append__2__7;
bcp_t append__2_3al_236__n1_l;
try_node_t *append__2__8;
definition_t *append__2__9;
bcp_t append__2_3areverse_230__n3_l;
bcp_t append__2_3areverse_233__n3_l;
bcp_t append__2_3areverse_232__n3_l;
definition_t *append__2__10;
try_node_t *append__2__11;
bcp_t append__2_3areverse_234__n3_l;
try_node_t *append__2__12;
bcp_t append__2_3areverse__n3_l;
definition_t *append__2__13;
definition_t *append__2__14;
definition_t *append__2__15;
bcp_t append__2_3areverse_238__n3_l;
try_node_t *append__2__16;
bcp_t append__2_3areverse_237__n3_l;
definition_t *append__2__17;
definition_t *append__2__18;
definition_t *append__2__19;
bcp_t append__2_3arec__n0_l;
definition_t *append__2__20;
liveinfo_t append__2__21;
bcp_t append__2_3arec1__n1_l;
definition_t *append__2__22;
definition_t *append__2__23;
definition_t *append__2__24;
tagged_t append__2__25;
tagged_t append__2__26;
definition_t *append__2__27;
bool_t cunify(worker_t *, uint32_t, uint32_t);
bool_t bu2_numgt(worker_t *, uint32_t, uint32_t);
uint32_t fu1_sub1(worker_t *, uint32_t);
bool_t bu1_number(worker_t *, uint32_t);
bcp_t append__2_3al__n1(worker_t *);
bcp_t append__2_3al_230__n1(worker_t *);
bcp_t append__2_3al_235__n0(worker_t *);
bool_t append__2_3al_231__n1(worker_t *);
bcp_t append__2_3al_232__n1(worker_t *);
bcp_t append__2_3al_233__n1(worker_t *);
bcp_t append__2_3al_236__n1(worker_t *);
bcp_t append__2_3al_238__n0(worker_t *);
bcp_t append__2_3areverse__n3(worker_t *);
bcp_t append__2_3areverse_230__n3(worker_t *);
bcp_t append__2_3areverse_234__n3(worker_t *);
bcp_t append__2_3areverse_236__n0(worker_t *);
bool_t append__2_3areverse_231__n3(worker_t *);
bcp_t append__2_3areverse_232__n3(worker_t *);
bcp_t append__2_3areverse_233__n3(worker_t *);
bcp_t append__2_3areverse_237__n3(worker_t *);
bcp_t append__2_3areverse_238__n3(worker_t *);
bcp_t append__2_3areverse_239__n0(worker_t *);
bool_t append__2_3adummy__n1(worker_t *);
bool_t append__2_3adummy2__n4(worker_t *);
bcp_t append__2_3arec__n0(worker_t *);
bcp_t append__2_3arec1__n1(worker_t *);
bool_t append__2_3anew__sample__n3(worker_t *);
bool_t append__2_3atev__n2(worker_t *);
bool_t append__2_3atev_230__n2(worker_t *);
bool_t append__2_3atev_231__n2(worker_t *);
/* append_2:l/1 */
bcp_t append__2_3al__n1(worker_t *w) {
  uint32_t var0;
  uint32_t var1;
  uint32_t var2;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 1);
  goto lab1;
lab1:
  DEREF(var0, X(0));
  var1 = var0;
  Sw_HVAorCVAorSVA_NVA(var1, goto lab5;, goto lab2;);
lab2:
  Sw_NUMorATM_LST_STR(var1, goto lab3;, goto lab11;, goto lab4;);
lab3:
  var2 = var1;
  goto lab6;
lab4:
  var2 = TaggedToHeadfunctor(var0);
  goto lab6;
lab5:
  return append__2_3al_230__n1_l;
lab6:
  if (var2 == append__2__1) goto lab7; else goto lab10;
lab7:
  if (!append__2_3al_231__n1(w)) goto lab8; else goto lab9;
lab8:
  return FAIL_INSNP;
lab9:
  G->local_top = NULL;
  return SUCCESS_INSNP;
lab10:
  return append__2_3al_233__n1_l;
lab11:
  return append__2_3al_232__n1_l;
}
/* append_2:l#0/1 */
bcp_t append__2_3al_230__n1(worker_t *w) {
  uint32_t var0;
  uint32_t var1;
  choice_t *var2;
  int32_t var3;
  uint32_t var4;
  uint32_t var5;
  w->previous_choice = w->choice;
  if (ValidLocalTop()) goto lab0; else goto lab1;
lab0:
  G->local_top = G->local_top;
  goto lab3;
lab1:
  G->local_top = w->choice->local_top;
  if (StackYounger(G->local_top, G->frame)) goto lab3; else goto lab2;
lab2:
  G->local_top = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab3;
lab3:
  G->next_alt = append__2__3;
  w->choice = ChoiceNext0(w->choice, append__2__3->arity);
  w->choice->flags = 0;
  w->choice->trail_top = G->trail_top;
  w->choice->local_top = G->local_top;
  w->choice->heap_top = G->heap_top;
  SetShallowTry();
  w->global_uncond = Tagp(0, w->choice->heap_top);
  w->local_uncond = Tagp(2, w->choice->local_top);
  w->choice = w->choice;
  TEST_CHOICE_OVERFLOW(w->choice, CHOICEPAD);
  var0 = append__2__1;
  DEREF(var1, X(0));
  var2 = w->choice;
  var2->frame = G->frame;
  var2->next_insn = G->next_insn;
  var2->next_alt = G->next_alt;
  var3 = 1;
  var2->x[0] = G->x[0];
  SetDeep();
  var4 = var1;
  var5 = var0;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var4, goto lab4;, goto lab7;, goto lab8;);
lab4:
  if (CondHVA(var4)) goto lab5; else goto lab6;
lab5:
  trail_push_check(w, var4);
  goto lab6;
lab6:
  *TagpPtr(0, var4) = var5;
  goto lab11;
lab7:
  trail_push_check(w, var4);
  *TagpPtr(1, var4) = var5;
  IncWakeCount();
  goto lab11;
lab8:
  if (CondSVA(var4)) goto lab9; else goto lab10;
lab9:
  trail_push_check(w, var4);
  goto lab10;
lab10:
  *TagpPtr(2, var4) = var5;
  goto lab11;
lab11:
  w->choice->next_alt = append__2__4;
  G->next_alt = append__2__4;
  G->local_top = NULL;
  return SUCCESS_INSNP;
}
/* append_2:l#5/0 */
bcp_t append__2_3al_235__n0(worker_t *w) {
  uint32_t *var0;
  choice_t *var1;
  uint32_t *var2;
  uint32_t *var3;
  uint32_t var4;
  choice_t *var5;
  int32_t var6;
  choice_t *var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  uint32_t var11;
  var1 = w->choice;
  ResetWakeCount();
  var2 = G->trail_top;
  var3 = var1->trail_top;
  if (TrailYounger(var2, var3)) goto lab0; else goto lab4;
lab0:
  TrailDec(var2);
  var4 = *var2;
  if (IsVar(var4)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var2;
  goto lab5;
lab2:
  *TaggedToPointer(var4) = var4;
  if (TrailYounger(var2, var3)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var2;
  goto lab4;
lab4:
  G->heap_top = var1->heap_top;
  goto lab5;
lab5:
  var5 = w->choice;
  if (IsDeep()) goto lab6; else goto lab7;
lab6:
  DEBUG_DEEP_BACKTRACKING();
  var6 = 1;
  w->previous_choice = ChoiceCont0(var5, var6);
  SetShallowRetry();
  G->frame = var5->frame;
  G->next_insn = var5->next_insn;
  G->next_alt = var5->next_alt;
  G->local_top = var5->local_top;
  G->x[0] = var5->x[0];
  goto lab7;
lab7:
  G->local_top = NULL;
  var7 = w->previous_choice;
  G->next_alt = var7->next_alt;
  w->global_uncond = Tagp(0, var7->heap_top);
  w->local_uncond = Tagp(2, var7->local_top);
  w->choice = var7;
  DEBUG_CUT(var7);
  ConcChptCleanUp(TopConcChptFun(), var7);
  SetDeep();
  var8 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  DEREF(var9, X(0));
  var10 = var9;
  var11 = var8;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var10, goto lab8;, goto lab11;, goto lab12;);
lab8:
  if (CondHVA(var10)) goto lab9; else goto lab10;
lab9:
  trail_push_check(w, var10);
  goto lab10;
lab10:
  *TagpPtr(0, var10) = var11;
  goto lab15;
lab11:
  trail_push_check(w, var10);
  *TagpPtr(1, var10) = var11;
  IncWakeCount();
  goto lab15;
lab12:
  if (CondSVA(var10)) goto lab13; else goto lab14;
lab13:
  trail_push_check(w, var10);
  goto lab14;
lab14:
  *TagpPtr(2, var10) = var11;
  goto lab15;
lab15:
  var0[1 - 1] = Tagp(0, &var0[1 - 1]);
  var0[2 - 1] = Tagp(0, &var0[2 - 1]);
  X(0) = var0[2 - 1];
  return append__2_3al__n1_l;
}
/* append_2:l#1/1 */
bool_t append__2_3al_231__n1(worker_t *w) {
  G->local_top = NULL;
  return TRUE;
}
/* append_2:l#2/1 */
bcp_t append__2_3al_232__n1(worker_t *w) {
  uint32_t *var0;
  uint32_t var1;
  DEREF(var1, X(0));
  var0 = TagpPtr(6, var1);
  X(0) = var0[2 - 1];
  return append__2_3al__n1_l;
}
/* append_2:l#3/1 */
bcp_t append__2_3al_233__n1(worker_t *w) {
  uint32_t var0;
  choice_t *var1;
  uint32_t *var2;
  uint32_t *var3;
  uint32_t var4;
  choice_t *var5;
  int32_t var6;
  uint32_t var7;
  uint32_t var8;
  uint32_t var9;
  w->previous_choice = w->choice;
  if (ValidLocalTop()) goto lab0; else goto lab1;
lab0:
  G->local_top = G->local_top;
  goto lab3;
lab1:
  G->local_top = w->choice->local_top;
  if (StackYounger(G->local_top, G->frame)) goto lab3; else goto lab2;
lab2:
  G->local_top = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab3;
lab3:
  G->next_alt = append__2__3;
  w->choice = ChoiceNext0(w->choice, append__2__3->arity);
  w->choice->flags = 0;
  w->choice->trail_top = G->trail_top;
  w->choice->local_top = G->local_top;
  w->choice->heap_top = G->heap_top;
  SetShallowTry();
  w->global_uncond = Tagp(0, w->choice->heap_top);
  w->local_uncond = Tagp(2, w->choice->local_top);
  w->choice = w->choice;
  TEST_CHOICE_OVERFLOW(w->choice, CHOICEPAD);
  DEREF(var0, X(0));
  if (IsVar(var0)) goto lab13; else goto lab4;
lab4:
  if (var0 == append__2__1) goto lab12; else goto lab5;
lab5:
  var1 = w->choice;
  ResetWakeCount();
  var2 = G->trail_top;
  var3 = var1->trail_top;
  if (TrailYounger(var2, var3)) goto lab6; else goto lab10;
lab6:
  TrailDec(var2);
  var4 = *var2;
  if (IsVar(var4)) goto lab8; else goto lab7;
lab7:
  G->trail_top = var2;
  goto lab11;
lab8:
  *TaggedToPointer(var4) = var4;
  if (TrailYounger(var2, var3)) goto lab6; else goto lab9;
lab9:
  G->trail_top = var2;
  goto lab10;
lab10:
  G->heap_top = var1->heap_top;
  goto lab11;
lab11:
  return append__2_3al_236__n1_l;
lab12:
  var5 = w->choice;
  var5->frame = G->frame;
  var5->next_insn = G->next_insn;
  var5->next_alt = G->next_alt;
  var6 = 1;
  var5->x[0] = G->x[0];
  SetDeep();
  w->choice->next_alt = append__2__8;
  G->next_alt = append__2__8;
  G->local_top = NULL;
  return SUCCESS_INSNP;
lab13:
  var7 = append__2__1;
  var8 = var0;
  var9 = var7;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var8, goto lab14;, goto lab17;, goto lab18;);
lab14:
  if (CondHVA(var8)) goto lab15; else goto lab16;
lab15:
  trail_push_check(w, var8);
  goto lab16;
lab16:
  *TagpPtr(0, var8) = var9;
  goto lab12;
lab17:
  trail_push_check(w, var8);
  *TagpPtr(1, var8) = var9;
  IncWakeCount();
  goto lab12;
lab18:
  if (CondSVA(var8)) goto lab19; else goto lab20;
lab19:
  trail_push_check(w, var8);
  goto lab20;
lab20:
  *TagpPtr(2, var8) = var9;
  goto lab12;
}
/* append_2:l#6/1 */
bcp_t append__2_3al_236__n1(worker_t *w) {
  uint32_t *var0;
  choice_t *var1;
  uint32_t var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  G->local_top = NULL;
  var1 = w->previous_choice;
  G->next_alt = var1->next_alt;
  w->global_uncond = Tagp(0, var1->heap_top);
  w->local_uncond = Tagp(2, var1->local_top);
  w->choice = var1;
  DEBUG_CUT(var1);
  ConcChptCleanUp(TopConcChptFun(), var1);
  SetDeep();
  DEREF(var2, X(0));
  if (IsVar(var2)) goto lab4; else goto lab0;
lab0:
  if (TagH3_Is6(var2)) goto lab2; else goto lab1;
lab1:
  return FAIL_INSNP;
lab2:
  var0 = TagpPtr(6, var2);
  X(0) = var0[2 - 1];
  goto lab3;
lab3:
  return append__2_3al__n1_l;
lab4:
  var3 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var4 = var2;
  var5 = var3;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var4, goto lab5;, goto lab8;, goto lab9;);
lab5:
  if (CondHVA(var4)) goto lab6; else goto lab7;
lab6:
  trail_push_check(w, var4);
  goto lab7;
lab7:
  *TagpPtr(0, var4) = var5;
  goto lab12;
lab8:
  trail_push_check(w, var4);
  *TagpPtr(1, var4) = var5;
  IncWakeCount();
  goto lab12;
lab9:
  if (CondSVA(var4)) goto lab10; else goto lab11;
lab10:
  trail_push_check(w, var4);
  goto lab11;
lab11:
  *TagpPtr(2, var4) = var5;
  goto lab12;
lab12:
  var0[1 - 1] = Tagp(0, &var0[1 - 1]);
  var0[2 - 1] = Tagp(0, &var0[2 - 1]);
  X(0) = var0[2 - 1];
  goto lab3;
}
/* append_2:l#8/0 */
bcp_t append__2_3al_238__n0(worker_t *w) {
  choice_t *var0;
  uint32_t *var1;
  uint32_t *var2;
  uint32_t var3;
  choice_t *var4;
  int32_t var5;
  var0 = w->choice;
  ResetWakeCount();
  var1 = G->trail_top;
  var2 = var0->trail_top;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab4;
lab0:
  TrailDec(var1);
  var3 = *var1;
  if (IsVar(var3)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var1;
  goto lab5;
lab2:
  *TaggedToPointer(var3) = var3;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var1;
  goto lab4;
lab4:
  G->heap_top = var0->heap_top;
  goto lab5;
lab5:
  var4 = w->choice;
  if (IsDeep()) goto lab6; else goto lab7;
lab6:
  DEBUG_DEEP_BACKTRACKING();
  var5 = 1;
  w->previous_choice = ChoiceCont0(var4, var5);
  SetShallowRetry();
  G->frame = var4->frame;
  G->next_insn = var4->next_insn;
  G->next_alt = var4->next_alt;
  G->local_top = var4->local_top;
  G->x[0] = var4->x[0];
  goto lab7;
lab7:
  return append__2_3al_236__n1_l;
}
/* append_2:reverse/3 */
bcp_t append__2_3areverse__n3(worker_t *w) {
  uint32_t var0;
  uint32_t var1;
  uint32_t var2;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 3);
  goto lab1;
lab1:
  DEREF(var0, X(0));
  var1 = var0;
  Sw_HVAorCVAorSVA_NVA(var1, goto lab5;, goto lab2;);
lab2:
  Sw_NUMorATM_LST_STR(var1, goto lab3;, goto lab11;, goto lab4;);
lab3:
  var2 = var1;
  goto lab6;
lab4:
  var2 = TaggedToHeadfunctor(var0);
  goto lab6;
lab5:
  return append__2_3areverse_230__n3_l;
lab6:
  if (var2 == append__2__1) goto lab7; else goto lab10;
lab7:
  if (!append__2_3areverse_231__n3(w)) goto lab8; else goto lab9;
lab8:
  return FAIL_INSNP;
lab9:
  G->local_top = NULL;
  return SUCCESS_INSNP;
lab10:
  return append__2_3areverse_233__n3_l;
lab11:
  return append__2_3areverse_232__n3_l;
}
/* append_2:reverse#0/3 */
bcp_t append__2_3areverse_230__n3(worker_t *w) {
  uint32_t var0;
  uint32_t var1;
  uint32_t var2;
  uint32_t var3;
  choice_t *var4;
  uint32_t *var5;
  uint32_t *var6;
  uint32_t var7;
  choice_t *var8;
  int32_t var9;
  w->previous_choice = w->choice;
  if (ValidLocalTop()) goto lab0; else goto lab1;
lab0:
  G->local_top = G->local_top;
  goto lab3;
lab1:
  G->local_top = w->choice->local_top;
  if (StackYounger(G->local_top, G->frame)) goto lab3; else goto lab2;
lab2:
  G->local_top = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab3;
lab3:
  G->next_alt = append__2__11;
  w->choice = ChoiceNext0(w->choice, append__2__11->arity);
  w->choice->flags = 0;
  w->choice->trail_top = G->trail_top;
  w->choice->local_top = G->local_top;
  w->choice->heap_top = G->heap_top;
  SetShallowTry();
  w->global_uncond = Tagp(0, w->choice->heap_top);
  w->local_uncond = Tagp(2, w->choice->local_top);
  w->choice = w->choice;
  TEST_CHOICE_OVERFLOW(w->choice, CHOICEPAD);
  var0 = append__2__1;
  DEREF(var1, X(0));
  var2 = var1;
  var3 = var0;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var2, goto lab4;, goto lab7;, goto lab8;);
lab4:
  if (CondHVA(var2)) goto lab5; else goto lab6;
lab5:
  trail_push_check(w, var2);
  goto lab6;
lab6:
  *TagpPtr(0, var2) = var3;
  goto lab11;
lab7:
  trail_push_check(w, var2);
  *TagpPtr(1, var2) = var3;
  IncWakeCount();
  goto lab11;
lab8:
  if (CondSVA(var2)) goto lab9; else goto lab10;
lab9:
  trail_push_check(w, var2);
  goto lab10;
lab10:
  *TagpPtr(2, var2) = var3;
  goto lab11;
lab11:
  if (!cunify(w, X(2), X(1))) goto lab12; else goto lab19;
lab12:
  var4 = w->choice;
  ResetWakeCount();
  var5 = G->trail_top;
  var6 = var4->trail_top;
  if (TrailYounger(var5, var6)) goto lab13; else goto lab17;
lab13:
  TrailDec(var5);
  var7 = *var5;
  if (IsVar(var7)) goto lab15; else goto lab14;
lab14:
  G->trail_top = var5;
  goto lab18;
lab15:
  *TaggedToPointer(var7) = var7;
  if (TrailYounger(var5, var6)) goto lab13; else goto lab16;
lab16:
  G->trail_top = var5;
  goto lab17;
lab17:
  G->heap_top = var4->heap_top;
  goto lab18;
lab18:
  return append__2_3areverse_234__n3_l;
lab19:
  var8 = w->choice;
  var8->frame = G->frame;
  var8->next_insn = G->next_insn;
  var8->next_alt = G->next_alt;
  var9 = 3;
  var8->x[0] = G->x[0];
  var8->x[1] = G->x[1];
  var8->x[2] = G->x[2];
  SetDeep();
  w->choice->next_alt = append__2__12;
  G->next_alt = append__2__12;
  G->local_top = NULL;
  return SUCCESS_INSNP;
}
/* append_2:reverse#4/3 */
bcp_t append__2_3areverse_234__n3(worker_t *w) {
  uint32_t *var0;
  uint32_t var1;
  choice_t *var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  uint32_t var6;
  uint32_t var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  var1 = X(1);
  G->local_top = NULL;
  var2 = w->previous_choice;
  G->next_alt = var2->next_alt;
  w->global_uncond = Tagp(0, var2->heap_top);
  w->local_uncond = Tagp(2, var2->local_top);
  w->choice = var2;
  DEBUG_CUT(var2);
  ConcChptCleanUp(TopConcChptFun(), var2);
  SetDeep();
  var3 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  DEREF(var4, X(0));
  var5 = var4;
  var6 = var3;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var5, goto lab0;, goto lab3;, goto lab4;);
lab0:
  if (CondHVA(var5)) goto lab1; else goto lab2;
lab1:
  trail_push_check(w, var5);
  goto lab2;
lab2:
  *TagpPtr(0, var5) = var6;
  goto lab7;
lab3:
  trail_push_check(w, var5);
  *TagpPtr(1, var5) = var6;
  IncWakeCount();
  goto lab7;
lab4:
  if (CondSVA(var5)) goto lab5; else goto lab6;
lab5:
  trail_push_check(w, var5);
  goto lab6;
lab6:
  *TagpPtr(2, var5) = var6;
  goto lab7;
lab7:
  var0[1 - 1] = Tagp(0, &var0[1 - 1]);
  var7 = var0[1 - 1];
  var0[2 - 1] = Tagp(0, &var0[2 - 1]);
  X(0) = var0[2 - 1];
  X(1) = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var0[1 - 1] = var7;
  DEREF(var8, var1);
  var9 = var8;
  if (TagH3_Pre0124567_Is2(var9)) goto lab8; else goto lab11;
lab8:
  var10 = var9;
  if (CondSVA(var10)) goto lab9; else goto lab10;
lab9:
  trail_push_check(w, var10);
  goto lab10;
lab10:
  *TagpPtr(2, var10) = Tagp(0, &var0[2 - 1]);
  var9 = Tagp(0, &var0[2 - 1]);
  goto lab11;
lab11:
  var0[2 - 1] = var9;
  return append__2_3areverse__n3_l;
}
/* append_2:reverse#6/0 */
bcp_t append__2_3areverse_236__n0(worker_t *w) {
  choice_t *var0;
  uint32_t *var1;
  uint32_t *var2;
  uint32_t var3;
  choice_t *var4;
  int32_t var5;
  var0 = w->choice;
  ResetWakeCount();
  var1 = G->trail_top;
  var2 = var0->trail_top;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab4;
lab0:
  TrailDec(var1);
  var3 = *var1;
  if (IsVar(var3)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var1;
  goto lab5;
lab2:
  *TaggedToPointer(var3) = var3;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var1;
  goto lab4;
lab4:
  G->heap_top = var0->heap_top;
  goto lab5;
lab5:
  var4 = w->choice;
  if (IsDeep()) goto lab6; else goto lab7;
lab6:
  DEBUG_DEEP_BACKTRACKING();
  var5 = 3;
  w->previous_choice = ChoiceCont0(var4, var5);
  SetShallowRetry();
  G->frame = var4->frame;
  G->next_insn = var4->next_insn;
  G->next_alt = var4->next_alt;
  G->local_top = var4->local_top;
  G->x[0] = var4->x[0];
  G->x[1] = var4->x[1];
  G->x[2] = var4->x[2];
  goto lab7;
lab7:
  return append__2_3areverse_234__n3_l;
}
/* append_2:reverse#1/3 */
bool_t append__2_3areverse_231__n3(worker_t *w) {
  return cunify(w, X(2), X(1));
}
/* append_2:reverse#2/3 */
bcp_t append__2_3areverse_232__n3(worker_t *w) {
  uint32_t *var0;
  uint32_t var1;
  uint32_t var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  uint32_t var6;
  DEREF(var1, X(0));
  var0 = TagpPtr(6, var1);
  var2 = X(1);
  var3 = var0[1 - 1];
  X(0) = var0[2 - 1];
  X(1) = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var0[1 - 1] = var3;
  DEREF(var4, var2);
  var5 = var4;
  if (TagH3_Pre0124567_Is2(var5)) goto lab0; else goto lab3;
lab0:
  var6 = var5;
  if (CondSVA(var6)) goto lab1; else goto lab2;
lab1:
  trail_push_check(w, var6);
  goto lab2;
lab2:
  *TagpPtr(2, var6) = Tagp(0, &var0[2 - 1]);
  var5 = Tagp(0, &var0[2 - 1]);
  goto lab3;
lab3:
  var0[2 - 1] = var5;
  return append__2_3areverse__n3_l;
}
/* append_2:reverse#3/3 */
bcp_t append__2_3areverse_233__n3(worker_t *w) {
  uint32_t var0;
  choice_t *var1;
  int32_t var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  w->previous_choice = w->choice;
  if (ValidLocalTop()) goto lab0; else goto lab1;
lab0:
  G->local_top = G->local_top;
  goto lab3;
lab1:
  G->local_top = w->choice->local_top;
  if (StackYounger(G->local_top, G->frame)) goto lab3; else goto lab2;
lab2:
  G->local_top = StackCharOffset(G->frame, FrameSize(G->next_insn));
  goto lab3;
lab3:
  G->next_alt = append__2__11;
  w->choice = ChoiceNext0(w->choice, append__2__11->arity);
  w->choice->flags = 0;
  w->choice->trail_top = G->trail_top;
  w->choice->local_top = G->local_top;
  w->choice->heap_top = G->heap_top;
  SetShallowTry();
  w->global_uncond = Tagp(0, w->choice->heap_top);
  w->local_uncond = Tagp(2, w->choice->local_top);
  w->choice = w->choice;
  TEST_CHOICE_OVERFLOW(w->choice, CHOICEPAD);
  DEREF(var0, X(0));
  if (IsVar(var0)) goto lab9; else goto lab4;
lab4:
  if (var0 == append__2__1) goto lab6; else goto lab5;
lab5:
  return append__2_3areverse_238__n3_l;
  goto lab6;
lab6:
  if (!cunify(w, X(2), X(1))) goto lab7; else goto lab8;
lab7:
  return append__2_3areverse_238__n3_l;
  goto lab8;
lab8:
  var1 = w->choice;
  var1->frame = G->frame;
  var1->next_insn = G->next_insn;
  var1->next_alt = G->next_alt;
  var2 = 3;
  var1->x[0] = G->x[0];
  var1->x[1] = G->x[1];
  var1->x[2] = G->x[2];
  SetDeep();
  w->choice->next_alt = append__2__16;
  G->next_alt = append__2__16;
  G->local_top = NULL;
  return SUCCESS_INSNP;
lab9:
  var3 = append__2__1;
  var4 = var0;
  var5 = var3;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var4, goto lab10;, goto lab13;, goto lab14;);
lab10:
  if (CondHVA(var4)) goto lab11; else goto lab12;
lab11:
  trail_push_check(w, var4);
  goto lab12;
lab12:
  *TagpPtr(0, var4) = var5;
  goto lab6;
lab13:
  trail_push_check(w, var4);
  *TagpPtr(1, var4) = var5;
  IncWakeCount();
  goto lab6;
lab14:
  if (CondSVA(var4)) goto lab15; else goto lab16;
lab15:
  trail_push_check(w, var4);
  goto lab16;
lab16:
  *TagpPtr(2, var4) = var5;
  goto lab6;
}
/* append_2:reverse#7/3 */
bcp_t append__2_3areverse_237__n3(worker_t *w) {
  uint32_t *var0;
  uint32_t var1;
  choice_t *var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  uint32_t var6;
  uint32_t var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  var1 = X(1);
  G->local_top = NULL;
  var2 = w->previous_choice;
  G->next_alt = var2->next_alt;
  w->global_uncond = Tagp(0, var2->heap_top);
  w->local_uncond = Tagp(2, var2->local_top);
  w->choice = var2;
  DEBUG_CUT(var2);
  ConcChptCleanUp(TopConcChptFun(), var2);
  SetDeep();
  DEREF(var3, X(0));
  if (IsVar(var3)) goto lab8; else goto lab0;
lab0:
  if (TagH3_Is6(var3)) goto lab2; else goto lab1;
lab1:
  return FAIL_INSNP;
lab2:
  var0 = TagpPtr(6, var3);
  var4 = var0[1 - 1];
  X(0) = var0[2 - 1];
  goto lab3;
lab3:
  X(1) = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var0[1 - 1] = var4;
  DEREF(var5, var1);
  var6 = var5;
  if (TagH3_Pre0124567_Is2(var6)) goto lab4; else goto lab7;
lab4:
  var7 = var6;
  if (CondSVA(var7)) goto lab5; else goto lab6;
lab5:
  trail_push_check(w, var7);
  goto lab6;
lab6:
  *TagpPtr(2, var7) = Tagp(0, &var0[2 - 1]);
  var6 = Tagp(0, &var0[2 - 1]);
  goto lab7;
lab7:
  var0[2 - 1] = var6;
  return append__2_3areverse__n3_l;
lab8:
  var8 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var9 = var3;
  var10 = var8;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var9, goto lab9;, goto lab12;, goto lab13;);
lab9:
  if (CondHVA(var9)) goto lab10; else goto lab11;
lab10:
  trail_push_check(w, var9);
  goto lab11;
lab11:
  *TagpPtr(0, var9) = var10;
  goto lab16;
lab12:
  trail_push_check(w, var9);
  *TagpPtr(1, var9) = var10;
  IncWakeCount();
  goto lab16;
lab13:
  if (CondSVA(var9)) goto lab14; else goto lab15;
lab14:
  trail_push_check(w, var9);
  goto lab15;
lab15:
  *TagpPtr(2, var9) = var10;
  goto lab16;
lab16:
  var0[1 - 1] = Tagp(0, &var0[1 - 1]);
  var4 = var0[1 - 1];
  var0[2 - 1] = Tagp(0, &var0[2 - 1]);
  X(0) = var0[2 - 1];
  goto lab3;
}
/* append_2:reverse#8/3 */
bcp_t append__2_3areverse_238__n3(worker_t *w) {
  choice_t *var0;
  uint32_t *var1;
  uint32_t *var2;
  uint32_t var3;
  var0 = w->choice;
  ResetWakeCount();
  var1 = G->trail_top;
  var2 = var0->trail_top;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab4;
lab0:
  TrailDec(var1);
  var3 = *var1;
  if (IsVar(var3)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var1;
  goto lab5;
lab2:
  *TaggedToPointer(var3) = var3;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var1;
  goto lab4;
lab4:
  G->heap_top = var0->heap_top;
  goto lab5;
lab5:
  return append__2_3areverse_237__n3_l;
}
/* append_2:reverse#9/0 */
bcp_t append__2_3areverse_239__n0(worker_t *w) {
  choice_t *var0;
  uint32_t *var1;
  uint32_t *var2;
  uint32_t var3;
  choice_t *var4;
  int32_t var5;
  var0 = w->choice;
  ResetWakeCount();
  var1 = G->trail_top;
  var2 = var0->trail_top;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab4;
lab0:
  TrailDec(var1);
  var3 = *var1;
  if (IsVar(var3)) goto lab2; else goto lab1;
lab1:
  G->trail_top = var1;
  goto lab5;
lab2:
  *TaggedToPointer(var3) = var3;
  if (TrailYounger(var1, var2)) goto lab0; else goto lab3;
lab3:
  G->trail_top = var1;
  goto lab4;
lab4:
  G->heap_top = var0->heap_top;
  goto lab5;
lab5:
  var4 = w->choice;
  if (IsDeep()) goto lab6; else goto lab7;
lab6:
  DEBUG_DEEP_BACKTRACKING();
  var5 = 3;
  w->previous_choice = ChoiceCont0(var4, var5);
  SetShallowRetry();
  G->frame = var4->frame;
  G->next_insn = var4->next_insn;
  G->next_alt = var4->next_alt;
  G->local_top = var4->local_top;
  G->x[0] = var4->x[0];
  G->x[1] = var4->x[1];
  G->x[2] = var4->x[2];
  goto lab7;
lab7:
  return append__2_3areverse_237__n3_l;
}
/* append_2:dummy/1 */
bool_t append__2_3adummy__n1(worker_t *w) {
  uint32_t *var0;
  uint32_t var1;
  uint32_t var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  uint32_t var6;
  uint32_t var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  uint32_t var11;
  uint32_t var12;
  uint32_t var13;
  uint32_t var14;
  uint32_t var15;
  uint32_t var16;
  uint32_t var17;
  uint32_t var18;
  uint32_t var19;
  uint32_t var20;
  uint32_t var21;
  uint32_t var22;
  uint32_t var23;
  uint32_t var24;
  uint32_t var25;
  uint32_t var26;
  uint32_t var27;
  uint32_t var28;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 1);
  goto lab1;
lab1:
  DEREF(var1, X(0));
  if (IsVar(var1)) goto lab48; else goto lab2;
lab2:
  if (TagH3_Is6(var1)) goto lab4; else goto lab3;
lab3:
  return FALSE;
lab4:
  var0 = TagpPtr(6, var1);
  var2 = var0[1 - 1];
  DEREF(var3, var0[2 - 1]);
  if (IsVar(var3)) goto lab42; else goto lab5;
lab5:
  if (TagH3_Is6(var3)) goto lab7; else goto lab6;
lab6:
  return FALSE;
lab7:
  var0 = TagpPtr(6, var3);
  DEREF(var4, var0[2 - 1]);
  if (IsVar(var4)) goto lab37; else goto lab8;
lab8:
  if (var4 == append__2__1) goto lab10; else goto lab9;
lab9:
  return FALSE;
lab10:
  DEREF(var5, var2);
  if (IsVar(var5)) goto lab29; else goto lab11;
lab11:
  if (var5 == MakeSmall(3)) goto lab13; else goto lab12;
lab12:
  return FALSE;
lab13:
  var6 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var0[1 - 1] = Tagp(0, &var0[1 - 1]);
  var7 = var0[1 - 1];
  var0[2 - 1] = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var0[1 - 1] = Tagp(0, &var0[1 - 1]);
  var0[2 - 1] = append__2__1;
  if (!cunify(w, var6, X(0))) goto lab14; else goto lab15;
lab14:
  return FALSE;
lab15:
  DEREF(var8, X(0));
  var0 = TagpPtr(6, var8);
  var9 = var0[1 - 1];
  DEREF(var10, var0[2 - 1]);
  var0 = TagpPtr(6, var10);
  DEREF(var11, var2);
  DEREF(var12, var9);
  if (var12 == var11) goto lab17; else goto lab16;
lab16:
  return FALSE;
lab17:
  DEREF(var13, var7);
  if (IsVar(var13)) goto lab21; else goto lab18;
lab18:
  if (var13 == MakeSmall(3)) goto lab20; else goto lab19;
lab19:
  return FALSE;
lab20:
  G->local_top = NULL;
  return TRUE;
lab21:
  var14 = MakeSmall(3);
  var15 = var13;
  var16 = var14;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var15, goto lab22;, goto lab25;, goto lab26;);
lab22:
  if (CondHVA(var15)) goto lab23; else goto lab24;
lab23:
  trail_push_check(w, var15);
  goto lab24;
lab24:
  *TagpPtr(0, var15) = var16;
  goto lab20;
lab25:
  trail_push_check(w, var15);
  *TagpPtr(1, var15) = var16;
  IncWakeCount();
  goto lab20;
lab26:
  if (CondSVA(var15)) goto lab27; else goto lab28;
lab27:
  trail_push_check(w, var15);
  goto lab28;
lab28:
  *TagpPtr(2, var15) = var16;
  goto lab20;
lab29:
  var17 = MakeSmall(3);
  var18 = var5;
  var19 = var17;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var18, goto lab30;, goto lab33;, goto lab34;);
lab30:
  if (CondHVA(var18)) goto lab31; else goto lab32;
lab31:
  trail_push_check(w, var18);
  goto lab32;
lab32:
  *TagpPtr(0, var18) = var19;
  goto lab13;
lab33:
  trail_push_check(w, var18);
  *TagpPtr(1, var18) = var19;
  IncWakeCount();
  goto lab13;
lab34:
  if (CondSVA(var18)) goto lab35; else goto lab36;
lab35:
  trail_push_check(w, var18);
  goto lab36;
lab36:
  *TagpPtr(2, var18) = var19;
  goto lab13;
lab37:
  var20 = append__2__1;
  var21 = var4;
  var22 = var20;
  Sw_HVA_CVA(var21, goto lab38;, goto lab41;);
lab38:
  if (CondHVA(var21)) goto lab39; else goto lab40;
lab39:
  trail_push_check(w, var21);
  goto lab40;
lab40:
  *TagpPtr(0, var21) = var22;
  goto lab10;
lab41:
  trail_push_check(w, var21);
  *TagpPtr(1, var21) = var22;
  IncWakeCount();
  goto lab10;
lab42:
  var23 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var24 = var3;
  var25 = var23;
  Sw_HVA_CVA(var24, goto lab43;, goto lab46;);
lab43:
  if (CondHVA(var24)) goto lab44; else goto lab45;
lab44:
  trail_push_check(w, var24);
  goto lab45;
lab45:
  *TagpPtr(0, var24) = var25;
  goto lab47;
lab46:
  trail_push_check(w, var24);
  *TagpPtr(1, var24) = var25;
  IncWakeCount();
  goto lab47;
lab47:
  var0[1 - 1] = Tagp(0, &var0[1 - 1]);
  var0[2 - 1] = append__2__1;
  goto lab10;
lab48:
  var26 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var27 = var1;
  var28 = var26;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var27, goto lab49;, goto lab52;, goto lab53;);
lab49:
  if (CondHVA(var27)) goto lab50; else goto lab51;
lab50:
  trail_push_check(w, var27);
  goto lab51;
lab51:
  *TagpPtr(0, var27) = var28;
  goto lab56;
lab52:
  trail_push_check(w, var27);
  *TagpPtr(1, var27) = var28;
  IncWakeCount();
  goto lab56;
lab53:
  if (CondSVA(var27)) goto lab54; else goto lab55;
lab54:
  trail_push_check(w, var27);
  goto lab55;
lab55:
  *TagpPtr(2, var27) = var28;
  goto lab56;
lab56:
  var0[1 - 1] = Tagp(0, &var0[1 - 1]);
  var2 = var0[1 - 1];
  var0[2 - 1] = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  goto lab47;
}
/* append_2:dummy2/4 */
bool_t append__2_3adummy2__n4(worker_t *w) {
  uint32_t *var0;
  uint32_t var1;
  uint32_t var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  uint32_t var6;
  uint32_t var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  uint32_t var11;
  uint32_t var12;
  uint32_t var13;
  uint32_t var14;
  uint32_t var15;
  uint32_t var16;
  uint32_t var17;
  uint32_t var18;
  uint32_t var19;
  uint32_t var20;
  uint32_t var21;
  uint32_t var22;
  uint32_t var23;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 4);
  goto lab1;
lab1:
  var1 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  DEREF(var2, X(0));
  var3 = var2;
  if (TagH3_Pre0124567_Is2(var3)) goto lab2; else goto lab5;
lab2:
  var4 = var3;
  if (CondSVA(var4)) goto lab3; else goto lab4;
lab3:
  trail_push_check(w, var4);
  goto lab4;
lab4:
  *TagpPtr(2, var4) = Tagp(0, &var0[1 - 1]);
  var3 = Tagp(0, &var0[1 - 1]);
  goto lab5;
lab5:
  var0[1 - 1] = var3;
  var0[2 - 1] = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  DEREF(var5, X(1));
  var6 = var5;
  if (TagH3_Pre0124567_Is2(var6)) goto lab6; else goto lab9;
lab6:
  var7 = var6;
  if (CondSVA(var7)) goto lab7; else goto lab8;
lab7:
  trail_push_check(w, var7);
  goto lab8;
lab8:
  *TagpPtr(2, var7) = Tagp(0, &var0[1 - 1]);
  var6 = Tagp(0, &var0[1 - 1]);
  goto lab9;
lab9:
  var0[1 - 1] = var6;
  var0[2 - 1] = append__2__1;
  var8 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  DEREF(var9, X(2));
  var10 = var9;
  if (TagH3_Pre0124567_Is2(var10)) goto lab10; else goto lab13;
lab10:
  var11 = var10;
  if (CondSVA(var11)) goto lab11; else goto lab12;
lab11:
  trail_push_check(w, var11);
  goto lab12;
lab12:
  *TagpPtr(2, var11) = Tagp(0, &var0[1 - 1]);
  var10 = Tagp(0, &var0[1 - 1]);
  goto lab13;
lab13:
  var0[1 - 1] = var10;
  var0[2 - 1] = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  DEREF(var12, X(3));
  var13 = var12;
  if (TagH3_Pre0124567_Is2(var13)) goto lab14; else goto lab17;
lab14:
  var14 = var13;
  if (CondSVA(var14)) goto lab15; else goto lab16;
lab15:
  trail_push_check(w, var14);
  goto lab16;
lab16:
  *TagpPtr(2, var14) = Tagp(0, &var0[1 - 1]);
  var13 = Tagp(0, &var0[1 - 1]);
  goto lab17;
lab17:
  var0[1 - 1] = var13;
  var0[2 - 1] = append__2__1;
  if (!cunify(w, var8, var1)) goto lab18; else goto lab19;
lab18:
  return FALSE;
lab19:
  var0 = TagpPtr(6, var1);
  DEREF(var15, var0[1 - 1]);
  if (IsVar(var15)) goto lab31; else goto lab20;
lab20:
  if (var15 == MakeSmall(1)) goto lab22; else goto lab21;
lab21:
  return FALSE;
lab22:
  DEREF(var16, var0[2 - 1]);
  var0 = TagpPtr(6, var16);
  DEREF(var17, var0[1 - 1]);
  if (IsVar(var17)) goto lab26; else goto lab23;
lab23:
  if (var17 == MakeSmall(2)) goto lab25; else goto lab24;
lab24:
  return FALSE;
lab25:
  G->local_top = NULL;
  return TRUE;
lab26:
  var18 = MakeSmall(2);
  var19 = var17;
  var20 = var18;
  Sw_HVA_CVA(var19, goto lab27;, goto lab30;);
lab27:
  if (CondHVA(var19)) goto lab28; else goto lab29;
lab28:
  trail_push_check(w, var19);
  goto lab29;
lab29:
  *TagpPtr(0, var19) = var20;
  goto lab25;
lab30:
  trail_push_check(w, var19);
  *TagpPtr(1, var19) = var20;
  IncWakeCount();
  goto lab25;
lab31:
  var21 = MakeSmall(1);
  var22 = var15;
  var23 = var21;
  Sw_HVA_CVA(var22, goto lab32;, goto lab35;);
lab32:
  if (CondHVA(var22)) goto lab33; else goto lab34;
lab33:
  trail_push_check(w, var22);
  goto lab34;
lab34:
  *TagpPtr(0, var22) = var23;
  goto lab22;
lab35:
  trail_push_check(w, var22);
  *TagpPtr(1, var22) = var23;
  IncWakeCount();
  goto lab22;
}
/* append_2:rec/0 */
bcp_t append__2_3arec__n0(worker_t *w) {
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 0);
  goto lab1;
lab1:
  return append__2_3arec__n0_l;
}
/* append_2:rec1/1 */
bcp_t append__2_3arec1__n1(worker_t *w) {
  uint32_t var0;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 1);
  goto lab1;
lab1:
  var0 = MakeSmall(0);
  if (!bu2_numgt(w, X(0), var0)) goto lab2; else goto lab3;
lab2:
  return FAIL_INSNP;
lab3:
  w->liveinfo = append__2__21;
  X(0) = fu1_sub1(w, X(0));
  return append__2_3arec1__n1_l;
}
/* append_2:new_sample/3 */
bool_t append__2_3anew__sample__n3(worker_t *w) {
  uint32_t *var0;
  uint32_t var1;
  uint32_t var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  uint32_t var6;
  uint32_t var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 3);
  goto lab1;
lab1:
  DEREF(var1, X(0));
  if (IsVar(var1)) goto lab9; else goto lab2;
lab2:
  if (TagH3_Is6(var1)) goto lab4; else goto lab3;
lab3:
  return FALSE;
lab4:
  var0 = TagpPtr(6, var1);
  if (!cunify(w, X(1), var0[1 - 1])) goto lab5; else goto lab6;
lab5:
  return FALSE;
lab6:
  if (!cunify(w, X(2), var0[2 - 1])) goto lab7; else goto lab8;
lab7:
  return FALSE;
lab8:
  G->local_top = NULL;
  return TRUE;
lab9:
  var2 = Tagp(6, G->heap_top);
  var0 = G->heap_top;
  G->heap_top = G->heap_top + 2;
  var3 = var1;
  var4 = var2;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var3, goto lab10;, goto lab13;, goto lab14;);
lab10:
  if (CondHVA(var3)) goto lab11; else goto lab12;
lab11:
  trail_push_check(w, var3);
  goto lab12;
lab12:
  *TagpPtr(0, var3) = var4;
  goto lab17;
lab13:
  trail_push_check(w, var3);
  *TagpPtr(1, var3) = var4;
  IncWakeCount();
  goto lab17;
lab14:
  if (CondSVA(var3)) goto lab15; else goto lab16;
lab15:
  trail_push_check(w, var3);
  goto lab16;
lab16:
  *TagpPtr(2, var3) = var4;
  goto lab17;
lab17:
  DEREF(var5, X(1));
  var6 = var5;
  if (TagH3_Pre0124567_Is2(var6)) goto lab18; else goto lab21;
lab18:
  var7 = var6;
  if (CondSVA(var7)) goto lab19; else goto lab20;
lab19:
  trail_push_check(w, var7);
  goto lab20;
lab20:
  *TagpPtr(2, var7) = Tagp(0, &var0[1 - 1]);
  var6 = Tagp(0, &var0[1 - 1]);
  goto lab21;
lab21:
  var0[1 - 1] = var6;
  DEREF(var8, X(2));
  var9 = var8;
  if (TagH3_Pre0124567_Is2(var9)) goto lab22; else goto lab25;
lab22:
  var10 = var9;
  if (CondSVA(var10)) goto lab23; else goto lab24;
lab23:
  trail_push_check(w, var10);
  goto lab24;
lab24:
  *TagpPtr(2, var10) = Tagp(0, &var0[2 - 1]);
  var9 = Tagp(0, &var0[2 - 1]);
  goto lab25;
lab25:
  var0[2 - 1] = var9;
  goto lab8;
}
/* append_2:tev/2 */
bool_t append__2_3atev__n2(worker_t *w) {
  uint32_t var0;
  uint32_t var1;
  uint32_t var2;
  if (TestEventOrHeapWarnOverflow(G->heap_top)) goto lab0; else goto lab1;
lab0:
  v__handle_event(w, 2);
  goto lab1;
lab1:
  DEREF(var0, X(0));
  var1 = var0;
  Sw_HVAorCVAorSVA_NVA(var1, goto lab5;, goto lab2;);
lab2:
  Sw_NUMorATM_LST_STR(var1, goto lab3;, goto lab6;, goto lab4;);
lab3:
  var2 = var1;
  goto lab6;
lab4:
  var2 = TaggedToHeadfunctor(var0);
  goto lab6;
lab5:
  return append__2_3atev_230__n2(w);
lab6:
  return append__2_3atev_231__n2(w);
}
/* append_2:tev#0/2 */
bool_t append__2_3atev_230__n2(worker_t *w) {
  uint32_t var0;
  uint32_t var1;
  uint32_t var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  uint32_t var6;
  uint32_t var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  uint32_t var11;
  uint32_t var12;
  uint32_t var13;
  w->previous_choice = w->choice;
  DEREF(var0, X(0));
  if (IsVar(var0)) goto lab0; else goto lab3;
lab0:
  DEREF(var1, X(0));
  if (IsVar(var1)) goto lab2; else goto lab1;
lab1:
  return FALSE;
lab2:
  DEREF(var2, X(1));
  if (IsVar(var2)) goto lab31; else goto lab28;
lab3:
  w->previous_choice = w->choice;
  if (!bu1_number(w, X(0))) goto lab5; else goto lab4;
lab4:
  DEREF(var3, X(1));
  if (IsVar(var3)) goto lab20; else goto lab17;
lab5:
  w->previous_choice = w->choice;
  DEREF(var4, X(1));
  if (IsVar(var4)) goto lab9; else goto lab6;
lab6:
  if (var4 == append__2__25) goto lab8; else goto lab7;
lab7:
  return FALSE;
lab8:
  G->local_top = NULL;
  return TRUE;
lab9:
  var5 = append__2__25;
  var6 = var4;
  var7 = var5;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var6, goto lab10;, goto lab13;, goto lab14;);
lab10:
  if (CondHVA(var6)) goto lab11; else goto lab12;
lab11:
  trail_push_check(w, var6);
  goto lab12;
lab12:
  *TagpPtr(0, var6) = var7;
  goto lab8;
lab13:
  trail_push_check(w, var6);
  *TagpPtr(1, var6) = var7;
  IncWakeCount();
  goto lab8;
lab14:
  if (CondSVA(var6)) goto lab15; else goto lab16;
lab15:
  trail_push_check(w, var6);
  goto lab16;
lab16:
  *TagpPtr(2, var6) = var7;
  goto lab8;
lab17:
  if (var3 == append__2__26) goto lab19; else goto lab18;
lab18:
  return FALSE;
lab19:
  G->local_top = NULL;
  return TRUE;
lab20:
  var8 = append__2__26;
  var9 = var3;
  var10 = var8;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var9, goto lab21;, goto lab24;, goto lab25;);
lab21:
  if (CondHVA(var9)) goto lab22; else goto lab23;
lab22:
  trail_push_check(w, var9);
  goto lab23;
lab23:
  *TagpPtr(0, var9) = var10;
  goto lab19;
lab24:
  trail_push_check(w, var9);
  *TagpPtr(1, var9) = var10;
  IncWakeCount();
  goto lab19;
lab25:
  if (CondSVA(var9)) goto lab26; else goto lab27;
lab26:
  trail_push_check(w, var9);
  goto lab27;
lab27:
  *TagpPtr(2, var9) = var10;
  goto lab19;
lab28:
  if (var2 == append__2__26) goto lab30; else goto lab29;
lab29:
  return FALSE;
lab30:
  G->local_top = NULL;
  return TRUE;
lab31:
  var11 = append__2__26;
  var12 = var2;
  var13 = var11;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var12, goto lab32;, goto lab35;, goto lab36;);
lab32:
  if (CondHVA(var12)) goto lab33; else goto lab34;
lab33:
  trail_push_check(w, var12);
  goto lab34;
lab34:
  *TagpPtr(0, var12) = var13;
  goto lab30;
lab35:
  trail_push_check(w, var12);
  *TagpPtr(1, var12) = var13;
  IncWakeCount();
  goto lab30;
lab36:
  if (CondSVA(var12)) goto lab37; else goto lab38;
lab37:
  trail_push_check(w, var12);
  goto lab38;
lab38:
  *TagpPtr(2, var12) = var13;
  goto lab30;
}
/* append_2:tev#1/2 */
bool_t append__2_3atev_231__n2(worker_t *w) {
  uint32_t var0;
  uint32_t var1;
  uint32_t var2;
  uint32_t var3;
  uint32_t var4;
  uint32_t var5;
  uint32_t var6;
  uint32_t var7;
  uint32_t var8;
  uint32_t var9;
  uint32_t var10;
  uint32_t var11;
  uint32_t var12;
  uint32_t var13;
  w->previous_choice = w->choice;
  DEREF(var0, X(0));
  if (IsVar(var0)) goto lab0; else goto lab3;
lab0:
  DEREF(var1, X(0));
  if (IsVar(var1)) goto lab2; else goto lab1;
lab1:
  return FALSE;
lab2:
  DEREF(var2, X(1));
  if (IsVar(var2)) goto lab31; else goto lab28;
lab3:
  w->previous_choice = w->choice;
  if (!bu1_number(w, X(0))) goto lab5; else goto lab4;
lab4:
  DEREF(var3, X(1));
  if (IsVar(var3)) goto lab20; else goto lab17;
lab5:
  w->previous_choice = w->choice;
  DEREF(var4, X(1));
  if (IsVar(var4)) goto lab9; else goto lab6;
lab6:
  if (var4 == append__2__25) goto lab8; else goto lab7;
lab7:
  return FALSE;
lab8:
  G->local_top = NULL;
  return TRUE;
lab9:
  var5 = append__2__25;
  var6 = var4;
  var7 = var5;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var6, goto lab10;, goto lab13;, goto lab14;);
lab10:
  if (CondHVA(var6)) goto lab11; else goto lab12;
lab11:
  trail_push_check(w, var6);
  goto lab12;
lab12:
  *TagpPtr(0, var6) = var7;
  goto lab8;
lab13:
  trail_push_check(w, var6);
  *TagpPtr(1, var6) = var7;
  IncWakeCount();
  goto lab8;
lab14:
  if (CondSVA(var6)) goto lab15; else goto lab16;
lab15:
  trail_push_check(w, var6);
  goto lab16;
lab16:
  *TagpPtr(2, var6) = var7;
  goto lab8;
lab17:
  if (var3 == append__2__26) goto lab19; else goto lab18;
lab18:
  return FALSE;
lab19:
  G->local_top = NULL;
  return TRUE;
lab20:
  var8 = append__2__26;
  var9 = var3;
  var10 = var8;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var9, goto lab21;, goto lab24;, goto lab25;);
lab21:
  if (CondHVA(var9)) goto lab22; else goto lab23;
lab22:
  trail_push_check(w, var9);
  goto lab23;
lab23:
  *TagpPtr(0, var9) = var10;
  goto lab19;
lab24:
  trail_push_check(w, var9);
  *TagpPtr(1, var9) = var10;
  IncWakeCount();
  goto lab19;
lab25:
  if (CondSVA(var9)) goto lab26; else goto lab27;
lab26:
  trail_push_check(w, var9);
  goto lab27;
lab27:
  *TagpPtr(2, var9) = var10;
  goto lab19;
lab28:
  if (var2 == append__2__26) goto lab30; else goto lab29;
lab29:
  return FALSE;
lab30:
  G->local_top = NULL;
  return TRUE;
lab31:
  var11 = append__2__26;
  var12 = var2;
  var13 = var11;
  SwHVAorCVAorSVA_HVA_CVA_SVA(var12, goto lab32;, goto lab35;, goto lab36;);
lab32:
  if (CondHVA(var12)) goto lab33; else goto lab34;
lab33:
  trail_push_check(w, var12);
  goto lab34;
lab34:
  *TagpPtr(0, var12) = var13;
  goto lab30;
lab35:
  trail_push_check(w, var12);
  *TagpPtr(1, var12) = var13;
  IncWakeCount();
  goto lab30;
lab36:
  if (CondSVA(var12)) goto lab37; else goto lab38;
lab37:
  trail_push_check(w, var12);
  goto lab38;
lab38:
  *TagpPtr(2, var12) = var13;
  goto lab30;
}
void append__2__init(worker_t *w) {
  append__2__0 = register_cinsnp("append_2:l", 1, append__2_3al__n1);
  append__2_3al_230__n1_l = def_exec_cinsnp(w, append__2_3al_230__n1);
  append__2__1 = GET_ATOM("[]");
  append__2_3al_233__n1_l = def_exec_cinsnp(w, append__2_3al_233__n1);
  append__2_3al_232__n1_l = def_exec_cinsnp(w, append__2_3al_232__n1);
  append__2__2 = register_cinsnp("append_2:l#0", 1, append__2_3al_230__n1);
  append__2__3 = def_retry_cinsnp(w, NULL, 1);
  append__2__4 = def_retry_cinsnp(w, append__2_3al_235__n0, 1);
  append__2_3al__n1_l = def_exec_cinsnp(w, append__2_3al__n1);
  append__2__5 = register_cbool("append_2:l#1", 1, append__2_3al_231__n1);
  append__2__6 = register_cinsnp("append_2:l#2", 1, append__2_3al_232__n1);
  append__2__7 = register_cinsnp("append_2:l#3", 1, append__2_3al_233__n1);
  append__2_3al_236__n1_l = def_exec_cinsnp(w, append__2_3al_236__n1);
  append__2__8 = def_retry_cinsnp(w, append__2_3al_238__n0, 1);
  append__2__9 = register_cinsnp("append_2:reverse", 3, append__2_3areverse__n3);
  append__2_3areverse_230__n3_l = def_exec_cinsnp(w, append__2_3areverse_230__n3);
  append__2_3areverse_233__n3_l = def_exec_cinsnp(w, append__2_3areverse_233__n3);
  append__2_3areverse_232__n3_l = def_exec_cinsnp(w, append__2_3areverse_232__n3);
  append__2__10 = register_cinsnp("append_2:reverse#0", 3, append__2_3areverse_230__n3);
  append__2__11 = def_retry_cinsnp(w, NULL, 3);
  append__2_3areverse_234__n3_l = def_exec_cinsnp(w, append__2_3areverse_234__n3);
  append__2__12 = def_retry_cinsnp(w, append__2_3areverse_236__n0, 3);
  append__2_3areverse__n3_l = def_exec_cinsnp(w, append__2_3areverse__n3);
  append__2__13 = register_cbool("append_2:reverse#1", 3, append__2_3areverse_231__n3);
  append__2__14 = register_cinsnp("append_2:reverse#2", 3, append__2_3areverse_232__n3);
  append__2__15 = register_cinsnp("append_2:reverse#3", 3, append__2_3areverse_233__n3);
  append__2_3areverse_238__n3_l = def_exec_cinsnp(w, append__2_3areverse_238__n3);
  append__2__16 = def_retry_cinsnp(w, append__2_3areverse_239__n0, 3);
  append__2_3areverse_237__n3_l = def_exec_cinsnp(w, append__2_3areverse_237__n3);
  append__2__17 = register_cbool("append_2:dummy", 1, append__2_3adummy__n1);
  append__2__18 = register_cbool("append_2:dummy2", 4, append__2_3adummy2__n4);
  append__2__19 = register_cinsnp("append_2:rec", 0, append__2_3arec__n0);
  append__2_3arec__n0_l = def_exec_cinsnp(w, append__2_3arec__n0);
  append__2__20 = register_cinsnp("append_2:rec1", 1, append__2_3arec1__n1);
  LIVEINFO__INIT(append__2__21, 0, 1);
  append__2_3arec1__n1_l = def_exec_cinsnp(w, append__2_3arec1__n1);
  append__2__22 = register_cbool("append_2:new_sample", 3, append__2_3anew__sample__n3);
  append__2__23 = register_cbool("append_2:tev", 2, append__2_3atev__n2);
  append__2__24 = register_cbool("append_2:tev#0", 2, append__2_3atev_230__n2);
  append__2__25 = GET_ATOM("yes");
  append__2__26 = GET_ATOM("no");
  append__2__27 = register_cbool("append_2:tev#1", 2, append__2_3atev_231__n2);
}
void append__2__end(worker_t *w) {
  unregister_cinsnp("append_2:l", 1);
  unregister_cinsnp("append_2:l#0", 1);
  unregister_cbool("append_2:l#1", 1);
  unregister_cinsnp("append_2:l#2", 1);
  unregister_cinsnp("append_2:l#3", 1);
  unregister_cinsnp("append_2:reverse", 3);
  unregister_cinsnp("append_2:reverse#0", 3);
  unregister_cbool("append_2:reverse#1", 3);
  unregister_cinsnp("append_2:reverse#2", 3);
  unregister_cinsnp("append_2:reverse#3", 3);
  unregister_cbool("append_2:dummy", 1);
  unregister_cbool("append_2:dummy2", 4);
  unregister_cinsnp("append_2:rec", 0);
  unregister_cinsnp("append_2:rec1", 1);
  unregister_cbool("append_2:new_sample", 3);
  unregister_cbool("append_2:tev", 2);
  unregister_cbool("append_2:tev#0", 2);
  unregister_cbool("append_2:tev#1", 2);
}
