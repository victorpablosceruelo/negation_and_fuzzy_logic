Examples of bugs detected by CIAOPP
***********************************

EXAMPLES
********

   The directory `Examples/Simple_Errors' contains files with bugs
which CIAOPP can automatically detect, either at compile-time or
run-time.

CT_Syntax_Warnings/
     This directory contains four examples of possible problems which
     CIAOPP can detect by syntactic checking only, i.e., no global
     (type) analysis needs to be done. Though they are simple to
     detect, and correct programs may generate this kind of warnings,
     they often indicate actual bugs

    singleton.pl
          In the definition of compute/2 we have typed X21 instead of
          X2. Singleton variables are those which only occur once in
          a clause. This means their value is not returned nor passed
          to any other predicate, thus lost.

    arity.pl
          In the base case of the recursive predicate compute/2 we
          have forgotten an argument. As CIAOPP detects that two
          predicates: compute/1 and compute/2 are defined, it informs
          that it is possible that we have forgotten or added an
          argument in one of them.

    discont.pl
          In the process of developing/debugging a program we often
          add/remove clauses to a predicate, move the predicate
          somewhere else, ... In this process it is likely that we
          forget about some clause(s) for the predicate which are
          obsolete. In the example, the seconde clause for
          input_data/1 should have been removed.

    undefined.pl
          In this program, in the body of predicate top/0 we call
          compute/3 instead of compute/2. This often indicates a bug.
          Note that this warning is only issued if type analysis is
          performed.

CT_Semant_Warnings/always_fails.pl
     The fact that a predicate always fails is not sufficient to
     conclude that there is a bug in the program (think of infinite
     processes such as an operating system shell). However, in most
     cases this is actually a bug, as is the case in this example
     program. Predicate compute/2 is called recursively but has no
     base case. This means it will either loop or fail, but control
     will never reach the predicate show_results/1.

CT_Builtin_Error/builtin.pl
     Builtin predicates usually require that the input arguments
     satisfy certain properties at run-time. Otherwise, a run-time
     error is issued. In this program, within predicate compute/2
     there is a call to the builtin predicate is/2. Syntactically
     this call is X1 is X+X2. Global type analysis allows determining
     that X will be bound to the term `a' which will raise a run-time
     error when computing `X1 is a+X2'. CIAOPP allows detecting this
     bug at compile-time, rather than at run-time.

CT_Prog_Point/check_pp.pl
     Using CIAOPP we can add assertions at program points. If an
     assertion does not hold, the program is not correct. In this
     example, the program point assertion does not hold. Type
     analysis allows CIAOPP detecting this bug at compile-time.

CT_User_Error/
     This directory contains two examples of predicate assertions
     added by the user which do not hold for the program. This is
     certainly a bug. In these examples, such bugs are detected by
     CIAOPP at compile-time, rather than at run-time. This is
     possibly due to global type analysis.

    calls_ct.pl
          The second call to the predicate compute/2 violates the
          calls assertion added by the user.

    success_ct.pl
          The success of predicate compute/2 violates the success
          assertion added by the user.

RT_Prog_Point/check_pp.pl
     This program contains a program point assertion which does not
     hold. However, type analysis does not allow detecting this at
     compile-time. However, this will be detected at run-time if the
     option run-time tests is selected when preprocessing the program
     through CIAOPP.

RT_User_error/
     This directory contains two examples of predicate assertions
     added by the user which do not hold for the program.
     Unfortunately, this cannot be detected at compile-time using
     type analysis. However, the program with run-time tests
     generated by CIAOPP will generate error messages when run on
     Ciao.

    calls_rt.pl
          The second call to the predicate compute/2 violates the
          calls assertion added by the user.

    success_rt.pl
          The success of predicate compute/2 violates the success
          assertion added by the user.

References
**********

