%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%      Math2.java	      %%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This example does not contain assertions but the compilation generates them
% Is a bunch of math examples, ideal for the imperative part translated


************** Running the generated Prolog program ****************

use_module('/home/herme/MySVN/Systems/CiaoDE/ciaopp/cafelito/clause_generator.pl').
incore('Math2.java').

[normal example]

?- gcd(7,11,X).

X = 1 ? ;


[normal example]

?- fib(25,X).

X = 75025 ? ;

************** If interested in compilation details ****************

a) - looking at the Prolog equivalent [*Ciao* buffer]

use_module(ciaopp(ciaopp)).   
module('Math2.java').
output('Math2.pl').
TODO: this is generating an empty file: why????????????

Open the last file and check how the correspondence has been done

b) Compilation - looking at the annotated Java file 

module('Math2.java').
output('Math2_output.java').

Open the last file and remark the automatically generated assertions



************** Analysis of the file *********************


2a) CiaoPP - graphic mode [*Ciao-Preprocessor* buffer]

-The java-CiaoPP mode should be activated (see at the beginning)

-We are going to use Polyhedra (the most interesting analysis in
this context) so 
     -PPL must be installed in the computer (it is in CLIP)
     -the polyhedra analysis must be activated. To do so, goto
     '/home/herme/MySVN/Systems/CiaoDE/ciaopp/plai/domains/polyhedra.pl' 
     and make sure that the header of the file looks like 
%:- use_module(ppl_ciao_dummy).  
 :- use_module('/usr/local/src/ppl-0.7/interfaces/Prolog/Ciao/ppl_ciao').
    , where the path above is dependent on your configuration.
    -restart ciaopp by killing the buffer *Ciao-Preprocessor* so the	
     domain polyhedra.pl is reread
    
      
-Select CiaoPP>Browse analysis/checking options
-Choose a menu like

     Use Saved Menu Configuration:          none         [\/] 
                Select Menu Level:         naive         [\/] 
              Select Action Group:        analyze        [\/] 
     Perform Non-Failure Analysis:          none         [\/] 
    Select Aliasing-Mode Analysis:          none         [\/] 
       Select Shape-Type Analysis:          none         [\/] 
          Select Numeric Analysis:       polyhedra       [\/] 
             Select Cost Analysis:          none         [\/] 
     Perform Determinism Analysis:          none         [\/] 
             Multivariant Success:          off          [\/] 
         Print Program Point Info:          off          [\/] 
   Multi-variant Analysis Results:          off          [\/] 
                 Collapse AI Info:           on          [\/] 
          Menu Configuration Name:          none          


-Check the resulting file Math2_polyhedra_co.java. Goto line 60 where there
is an assertion like

/*@
  @ true
  @   if
  @      constraint([])
  @    {
  @      constraint([1*n+ -1*\result>=0,1*m+ -1*\result>=0])
  @    }
  @ ;
  @*/

for the Greatest Common Divisor example, which means: given no
precondition for the method, the gcd (symbolized by \result) of 'n'
and 'm' is always less or equal than those parameters.


______

If the CiaoPP menu fails for whatever reason

2b) CiaoPP - text mode [*Ciao* buffer]

-The CiaoPP mode does not need to be activated
-For repeting the analysis in 2a) we will type
     use_module(ciaopp(ciaopp)).
     module('/home/herme/MySVN/Systems/CiaoDE/ciaopp/cafelito/examples/Math2.java').
     analyze(polyhedra).
     output.

-And now check Math2_polyhedra_co.java 
   













%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%       Fib.java		      %%%%%%%%%%%%%%%%
% Contains a trivial type assertion
% and a non-trivial complexity assertion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-Open the file and explain
     -"requires true" means no precondition imposed
     -"ensures string(\result)" means that, as postcondition, the value
       returned by the method is of type string
     -"comp native_props:steps_o(fib(n,_),exp(5.0,int(n)))" means that
     , as a computational property of the method, we are saying that the
     time complexity us bounded by 5^n
     -the main drawback when explaining this is that we should clarify
      the weird, mixed Ciao-Java notation


*Assertion checking using CiaoPP menus*

-As before, from Fib.java select CiaoP>Browse Analysis/... options

-Checking the assertions implies selecting a  menu like
     Use Saved Menu Configuration:          none         
                Select Menu Level:         expert       
              Select Action Group:    check_assertions  
      Perform Compile-Time Checks:          auto        
         Perform Modular Analysis:        curr_mod      
      Perform Modular CT Checking:        curr_mod      
         Exported Predicates Info:         assrt        
         Imported Predicates Info:         assrt        
       Report Non-Verified Assrts:        warning       
        Predicate-Level CT Checks:           on         
          Program-Point CT Checks:          old         
              Verbose CT Checking:          off         
         Customize Analysis Flags:           on         
     Perform Non-Failure Analysis:          nfg         
             Select Local Control:          off         
    Select Aliasing-Mode Analysis:         shfr 
          Select Numeric Analysis:          none        
             Select Cost Analysis:       steps_ualb     
     Perform Determinism Analysis:          none        
             Multivariant Success:          off         
         Print Program Point Info:          off         
                 Collapse AI Info:           on         
           Insert Run-Time Checks:          off         
             Generate Certificate:          off         
   Perform Optimizing Compilation:          none        
          Menu Configuration Name:          none          



-It highlights the types assertion meaning that it is false. The
 message in the CiaoPP buffer is kind of twisted, so I think its
 better to go the results:

-Open
'/home/herme/MySVN/Systems/CiaoDE/ciaopp/cafelito/examples/Fib_shfr_eterms_nfg_steps_ualb_co.java'
to check the results
   -It should inform that the type of the output is not a string 
	/*@
          @ false ensures
	    ^^^^
	  @      string(\result) ; 
	  @*/    
    -It should inform that the complexity assertion has revealed to be true
	/*@
	  @ checked comp
	    ^^^^
	  @      steps_o(fib(n,_),exp(5.0,int(n))) ; 
	  @*/
    	 
-Awesome ;-)


