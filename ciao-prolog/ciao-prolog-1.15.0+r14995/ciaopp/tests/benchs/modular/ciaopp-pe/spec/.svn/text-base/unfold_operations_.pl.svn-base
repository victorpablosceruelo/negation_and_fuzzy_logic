:- module(unfold_operations_, 
	[orig_pred_name/2,
	 orig_goal/2,
	 decide_orig_goal/2,
	 body2list/2,
	 list2body/2,
	 replicate_atoms/4],
	 []).

:- use_package(assertions).

:- doc(author, "Germ@'{a}n Puebla").
:- doc(author, "Elvira Albert").

:- doc(module," This module contains auxiliary predicates for
    unfolding").

:- use_module('..'(preprocess_flags_), [current_pp_flag/2]).

:- use_module(library(lists), [reverse/2]).
:- use_module(library(terms), [copy_args/3]).

:- pred orig_pred_name(+Pred,-Orig_Pred) # "@var{Orig_Pred} is the
      predicate name which corresponds to @var{Pred}, which is a
      predicate name generated using @pred{new_predicate}.".

orig_pred_name(Pred,Orig_Pred):-
	name(Pred,List),
	reverse(List,RList),
	remove_version_id(RList,NRList),
	reverse(NRList,NList),
	name(Orig_Pred,NList).

remove_version_id([95|L],L):-!.  %95 is the underscore
remove_version_id([_|L],NL):-
	remove_version_id(L,NL).

:- pred orig_goal(+Goal,-Orig_Goal) # "@var{Orig_Goal} is the goal
     which corresponds to @var{Goal} by replacing the new name of the
     predicate generated by @pred{new_predicate} by the original
     name.".

orig_goal(Goal,Orig_Goal):-
	functor(Goal,N,A),
	orig_pred_name(N,Orig_N),
	functor(Orig_Goal,Orig_N,A),
	copy_args(A,Goal,Orig_Goal).

:- pred decide_orig_goal(+Goal,-Orig_Goal) # "If we are not performing
     local control, then @var{Orig_Goal} is identical to
     @var{Goal}. Otherwise we compute @var{Orig_Goal} using
     @pred{orig_goal/2}.".

decide_orig_goal(Goal,Orig_Goal):-
	current_pp_flag(local_control,off),!,
	Orig_Goal = Goal.
decide_orig_goal(Goal,Orig_Goal):-
	orig_goal(Goal,Orig_Goal).

:- pred body2list(+Body,-List) # "Transforms the body of clause
      (conjunction) into a list.".

body2list(Body,[First|More]):-
	nonvar(Body),
	Body = (First,Rest),
        !,
        body2list(Rest,More).
body2list(Body,LBody):-
	nonvar(Body),
	Body = true,!,
	LBody = [].
body2list(Last,[Last]).


:- pred list2body(+List,-Body) # "Transforms a list into the body of
      clause (conjunction).".

list2body([],true).
list2body([Last],Last):-!.
list2body([First|Rest],(First,More)):-
        list2body(Rest,More).


:- pred replicate_atoms(+Clauses,+Atom,+TmpAtoms,-RepAtoms) # "The
	list @var{RepAtoms} on output contains as many replicates of
	@var{Atoms} as elements there are in the list @var{Clauses}".

replicate_atoms([],_A1,NA1s,NA1s).
replicate_atoms([_|Cls],A1,NA1s,[A1|NAs]):-
	replicate_atoms(Cls,A1,NA1s,NAs).

:- doc(version_maintenance,dir('../version')).

:- doc(version(1*0+609,2004/08/30,15:55*45+'CEST'), "Exported
   predicate @pred{replicate_atoms/4} now lives here.  (German
   Puebla)").

:- doc(version(1*0+435,2004/04/21,20:02*28+'CEST'), "Added new
   exported predicates.  (German Puebla)").

:- doc(version(1*0+432,2004/04/21,17:35*50+'CEST'), "Some
   auxiliary predicates for unfolding now live here.  (German
   Puebla)").

