:- module(generate_benchmarks, [generate/0], [assertions]).

:- use_module(library(system),   [directory_files/2, file_properties/6]).
:- use_module(library(dec10_io), [tell/1, told/0]).
:- use_module(library(format),   [format/2]).
:- use_module(library(sort),     [sort/2]).
:- use_module(library(lists),    [append/3]).

:- include(settings).

:- doc(module, "Generates file benchmarks.pl listing the benchmarks
	of every collection.").

generate :-
	tell('benchmarks.pl'),
	file_header,
	test_dir(Collection, SubDir),
	collect_files_from_dir(SubDir, Files),
	print_out_names(Collection, Files),
	fail.
generate :-
	told.

collect_files_from_dir(Dir, Files) :-
	directory_files(Dir, F_u),
	sort(F_u, F),
	eliminate_unneeded(F, No_unFiles),
	only_pls(No_unFiles, Files).

eliminate_unneeded([],      []).
eliminate_unneeded(['.'|X], Y) :- !,
	eliminate_unneeded(X, Y).
eliminate_unneeded(['..'|X], Y) :- !,
	eliminate_unneeded(X, Y).
eliminate_unneeded(['.cvsignore'|X], Y) :- !,
	eliminate_unneeded(X, Y).
eliminate_unneeded(['CVS'|X], Y) :- !,
	eliminate_unneeded(X, Y).
%should not be needed
eliminate_unneeded(['nativeprops.pl'|X], Y) :- !,
	eliminate_unneeded(X, Y).
eliminate_unneeded([A|X], [A|Y]) :-
	eliminate_unneeded(X, Y).

only_pls([],    []).
only_pls([A|X], Ys) :-
	atom_concat(_B, '_opt.pl', A), !,
	only_pls(X, Ys).
only_pls([A|X], Y) :-
	atom_concat(B, '.pl', A), !,
	Y = [B|Ys],
	only_pls(X, Ys).
only_pls([_|X], Ys) :-
	only_pls(X, Ys).

file_header:-
	format(
"% Do not edit this file. Automatically generated by settings_test~n~n", []),
	format(
	    ":- module(benchmarks,[benchmarks_of/2]).~n~n",
	    []).

print_out_names(Dir, L) :-
	format("benchmarks_of(~a,[~n", [Dir]),
	print_list(L),
	format(" ]~n).~n~n~n", []).

print_list([]).
print_list([A]) :-
	!,
	format("         ~a", [A]).
print_list([A|R]) :-
	format("         ~a,~n", [A]),
	print_list(R).
