%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   ADT corresponding to the output of the PARSER
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Class                      := class(Loc,Identifier,list of Method)

Modifier                   := public|private

Method                     := method(Loc,Modifier,Variable,Formal_Parameters,
                                    list(Assertion),Block)

Formal_Parameter           := list of Variable

Assertion		   :=(Loc,Status,Type,Term,Dictionary)

Status			   := check | trust

Type			   := entry | calls | success

Dictionary		   := list('='(Atom,Var))

Block                      := block(Loc,list of Block_Statement)

Block_Statement            := Statement
		            | Local_Declaration  

Local_Declaration	   := declaration(Loc,Variable,Expression)

Statement		   := Block    
			    | If
			    | While
			    | Return
			    | Expression
			    | skip

If                         := if(Loc,Expression,Statement,Statement)

While			   := while(Loc,Expr,Statement)

Return			   := return( Loc, Expression)
					    ^ transformed into
					                assignment(L,=,Variable,Expression) 
					                return(L,Variable)
					     where Variable = (Type_our_method,Name_our_method)		
			    | return( Loc,void)

Expression		   := Method_Call
			    | Variable
			    | Literal
	                    | Binary_Operation
			    | Unary_Operation
			    | Assignment

Method_Call		   := call( Loc,Variable,list of Expression)

Binary_Operation	   := binary_op(Binary_Operator,Expression,Expression)

Unary_Operation		   := unary_op(Unary_Operator,Expression)

Assignment		   := assignment(Loc,Assign_Operator,Expression,Expression) 

Assign_Operator		   :=  = | + | - | * | / | %
Binary_Operator		   :=      + | - | * | / | %  | == | != | <= | >= | < | > 

Unary_Operator		   := !

Type                       := byte|short|int|long|float|double

Variable		   := var(Type,Identifier)
Identifier                 := Atom
Literal			   := literal(Type,Num)

Loc			   := Int
			    | na

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   ADT corresponding to the output of FLATTEN
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


Module                     := module(Loc,Identifier,list of Pred)

Predicate		   := pred(Loc,Modifiers,Variable,
			          (Formal_Parameters,Formal_Parameters),
				  list(Assertion)list(Clause)

Clause			   := clause(Loc,Variable,
                                     (Formal_Parameters,Formal_Parameters),
				      ^R                ^W 
				     list(Block_Statement)

 
Modifiers		   := (entry|non_entry,iterative|simple,virtual|real)

Formal_Parameter           := list of Variable

Block_Statement            := Statement
		            | Local_Declaration  

Local_Declaration	   := declaration(Loc,Variable,Expression)

Statement		   := Return
			    | Expression
			    | skip
			    | cut

Return			   := return( Loc, Expression)
			    | return( Loc,void)

Expression		   := Method_Call
			    | Variable
			    | Literal
	                    | Binary_Operation
			    | Unary_Operation
			    | Assignment

Method_Call		   := call( Loc,Variable,(List of Variable,List of Variable)
			                           ^introduced calls (recursion,predicates) 
			   := call( Loc,Variable, List of Expression)
						   ^existing calls
Binary_Operation	   := binary_op(Binary_Operator,Expression,Expression)

Unary_Operation		   := unary_op(Unary_Operator,Expression)

Assignment		   := assignment(Loc,Assign_Operator,LHS,Expression) 
				            
LHS			   := Variable |  var(Type,return(Identifier))

Variable		   := var(Type,Identifier)



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% ADT corresponding to the output of bali_transformer:UNFOLD
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


Module                     := module(Loc,Identifier,File,list of Pred)

Predicate		   := pred(Loc,Modifiers,Variable,
                                (list(Variable),list(Variable)),list(Assertion),list(Clause)
				  ^R	         ^W  				      
Clause			   := clause(Loc,Variable_Version,
		                 (list(Variable_Version),list(Variable_Version)),
			          ^ Read             ^Write
				 list of Statement)
 
Statement                  := Local_Declaration  
			    | Method_Call
	                    | Assignment
			    | Binary_Operation   [NA:if-conditions, for example]
			    | Unary_Operation
		            | skip	
			    | cut
		     
Local_Declaration	   := declaration(Loc,Variable_Version)
			      

Method_Call                := call( Loc,Variable_Version,
                    (list(Variable_Literal),list(Variable_Version),list(Variable_Version))))
		        ^R                     ^W_I                   ^W_O

Assignment                 := assignment(Loc,Variable_Version,Variable_Literal) 
			    | assignment(Loc,Variable_Version,Binary_Operation) 
		            | assignment(Loc,Variable_Version,Method_Call)

Binary_Operation           := binary_op(Binary_Operator,Variable_Literal,Variable_Literal)
 
Unary_Operation            := unary_op(Unary_Operator,Variable_Literal)


Variable_Literal           := Variable_Version
			    | Literal						 

Variable_Version       	   := var(Type,Identifier,Int)
Variable         	   := var(Type,Identifier)
File                       := sourcepath 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% After ELIMINATING SINGLETONS, the only differences are:
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Method_Call                := call( Loc,Variable_Version,list(Variable_Version))
Variable_Literal           := Variable_Version
			    | Literal						 
			    | underscore



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% ADT corresponding to the output of CLAUSE GENERATOR
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Module	       := module(Mod_Name,list(Mod_Name),list(Mod_Name),
	                           ^ Exported     ^Imported Packages
                                  list(Assert),list(Clause)) 	

Assert	       := as(Head,Status,Type,Compat,Call,Succ,Comp,Loc,Dic,Comment)

Clause	       := cls(Head,Body,Loc,Dic)

Dic	       := VndDict 

Loc	       := loc(Line,Line,File,Module)
                | unknown


		  