/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.parsers;

import java.io.IOException;
import org.apache.xerces.framework.XMLString;
import org.apache.xerces.readers.XMLEntityManager;
import org.apache.xerces.scanners.XMLAttributes;
import org.apache.xerces.scanners.XMLDTDScanner;
import org.apache.xerces.scanners.XMLDocumentHandler;
import org.apache.xerces.scanners.XMLDocumentScanner;
import org.apache.xerces.utils.QName;
import org.apache.xerces.utils.SymbolTable;
import org.apache.xerces.validators.DatatypeValidatorFactory;
import org.apache.xerces.validators.GrammarPool;
import org.apache.xerces.validators.XMLValidator;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;

/**
 * @author Stubs generated by DesignDoc on Mon Sep 11 11:10:57 PDT 2000
 * @author Arnaud  Le Hors, IBM
 * @version $Id: XMLDocumentParser.java 316151 2000-09-27 20:25:27Z andyc $
 */
public abstract class XMLDocumentParser
    extends XMLParser
    implements XMLDocumentHandler {

    //
    // Data
    //

    /** Entity manager. */
    protected XMLEntityManager fEntityManager;

    /** fScanner */
    protected XMLDocumentScanner fScanner;

    /** fDTDScanner */
    protected XMLDTDScanner fDTDScanner;

    /** fValidator */
    protected XMLValidator fValidator;

    /** fGrammarPool */
    protected GrammarPool fGrammarPool;

    /** fDatatypeValidatorFactory */
    protected DatatypeValidatorFactory fDatatypeValidatorFactory;

    // state

    protected boolean fParseInProgress = false;

    // debugging

    /** Set to true and recompile to print exception stack trace. */
    private static final boolean PRINT_EXCEPTION_STACK_TRACE = false;

    //
    // Constructors
    //

    /**
     * Default Constructor.
     * Creates an XMLDocumentParser with its own SymbolTable and GrammarPool. 
     */
    public XMLDocumentParser() {
        this(new SymbolTable(), new GrammarPool());
    }

    /**
     * Constructor allowing to specify the SymbolTable and GrammarPool to use
     * 
     * @param symbolTable 
     * @param grammarPool 
     */
    protected XMLDocumentParser(SymbolTable symbolTable,
                                GrammarPool grammarPool) {
        super(symbolTable);

        // set default features
        fFeatures.put(SAX2_FEATURES_PREFIX+"namespaces", Boolean.TRUE);
        fFeatures.put(SAX2_FEATURES_PREFIX+"validation", Boolean.FALSE);

        // create and register components
        fProperties.put(XERCES_PROPERTIES_PREFIX+"internal/symbol-table", 
                        fSymbolTable);
        fGrammarPool = grammarPool;
        fProperties.put(XERCES_PROPERTIES_PREFIX + "internal/grammar-pool",
                        fGrammarPool);
        fEntityManager = new XMLEntityManager();
        fProperties.put(XERCES_PROPERTIES_PREFIX+"internal/entity-manager",
                        fEntityManager);
        fScanner = new XMLDocumentScanner();
        fProperties.put(XERCES_PROPERTIES_PREFIX+"internal/document-scanner",
                        fScanner);
        // fValidator = new Validator();
        // fDatatypeValidatorFactory = ...
        // fProperties.put(XERCES_PROPERTIES_PREFIX +
        //                "internal/datatype-validator-factory",
        //                fDatatypeValidatorFactory);

        // plug in components
        fScanner.setDocumentHandler(this);
        // fScanner.setDocumentHandler(fValidator);
        // fValidator.setDocumentHandler(this);
    }

    //
    // XMLEntityHandler methods
    //

    /**
     * startEntity
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     */
    public void startEntity(String name, String publicId, String systemId)
        throws SAXException {
    } // startEntity

    /**
     * endEntity
     * 
     * @param name 
     */
    public void endEntity(String name) throws SAXException {
    } // endEntity

    //
    // XMLDocumentHandler methods
    //

    /**
     * startDocument
     */
    public void startDocument()
        throws SAXException {
    } // startDocument

    /**
     * xmlDecl
     * 
     * @param version 
     * @param encoding 
     * @param actualEncoding 
     * @param standalone 
     */
    public void xmlDecl(String version, String encoding, String actualEncoding, String standalone)
        throws SAXException {
    } // xmlDecl

    /**
     * doctypeDecl
     * 
     * @param rootElement 
     * @param publicId 
     * @param systemId 
     */
    public void doctypeDecl(String rootElement, String publicId, String systemId)
        throws SAXException {
    } // doctypeDecl

    /**
     * comment
     * 
     * @param text 
     */
    public void comment(XMLString text)
        throws SAXException {
    } // comment

    /**
     * processingInstruction
     * 
     * @param target 
     * @param data 
     */
    public void processingInstruction(String target, XMLString data)
        throws SAXException {
    } // processingInstruction

    /**
     * startPrefixMapping
     * 
     * @param prefix 
     * @param uri 
     */
    public void startPrefixMapping(String prefix, String uri)
        throws SAXException {
    } // startPrefixMapping

    /**
     * startElement
     * 
     * @param element 
     * @param attributes 
     */
    public void startElement(QName element, XMLAttributes attributes)
        throws SAXException {
    } // startElement

    /**
     * characters
     * 
     * @param text 
     * @param whitespace 
     */
    public void characters(XMLString text, boolean whitespace)
        throws SAXException {
    } // characters

    /**
     * ignorableWhitespace
     * 
     * @param text 
     */
    public void ignorableWhitespace(XMLString text)
        throws SAXException {
    } // ignorableWhitespace

    /**
     * endElement
     * 
     * @param element 
     */
    public void endElement(QName element)
        throws SAXException {
    } // endElement

    /**
     * endPrefixMapping
     * 
     * @param prefix 
     */
    public void endPrefixMapping(String prefix)
        throws SAXException {
    } // endPrefixMapping

    /**
     * textDecl
     * 
     * @param version 
     * @param encoding 
     * @param actualEncoding 
     */
    public void textDecl(String version, String encoding, String actualEncoding)
        throws SAXException {
    } // textDecl

    /**
     * startCDATA
     */
    public void startCDATA()
        throws SAXException {
    } // startCDATA

    /**
     * endCDATA
     */
    public void endCDATA()
        throws SAXException {
    } // endCDATA

    /**
     * endDocument
     */
    public void endDocument()
        throws SAXException {
    } // endDocument


    //
    // Methods inherited from XMLParser that are overriden
    //

    /**
     * setFeature
     * 
     * @param featureId 
     * @param state 
     */
    public void setFeature(String featureId, boolean state)
        throws SAXNotRecognizedException, SAXNotSupportedException {

        super.setFeature(featureId, state);

        // forward to every component
        fScanner.setFeature(featureId, state);
        // fDTDScanner.setFeature(featureId, state);
        // fValidator.setFeature(featureId, state);

    } // setFeature

    /**
     * setProperty
     * 
     * @param propertyId 
     * @param value 
     */
    public void setProperty(String propertyId, Object value)
        throws SAXNotRecognizedException, SAXNotSupportedException {

        super.setProperty(propertyId, value);

        // forward to every component
        fScanner.setProperty(propertyId, value);
        // fDTDScanner.setProperty(propertyId, value);
        // fValidator.setProperty(propertyId, value);

    } // setProperty

    /**
     * Parses the specified input source.
     *
     * @param source The input source.
     *
     * @exception org.xml.sax.SAXException Throws exception on SAX error.
     * @exception java.io.IOException Throws exception on i/o error.
     */
    public void parse(InputSource source)
        throws SAXException, IOException {

        if (fParseInProgress) {
            // REVISIT - need to add new error message
            throw new SAXException(
                              "FWK005 parse may not be called while parsing.");
        }

        try {
            reset();
            fEntityManager.startEntity(source);
            fScanner.scanDocument(true);
            fParseInProgress = false;
        } catch (SAXException ex) {
            fParseInProgress = false;
            if (PRINT_EXCEPTION_STACK_TRACE)
                ex.printStackTrace();
            throw ex;
        } catch (IOException ex) {
            fParseInProgress = false;
            if (PRINT_EXCEPTION_STACK_TRACE)
                ex.printStackTrace();
            throw ex;
        } catch (Exception ex) {
            fParseInProgress = false;
            if (PRINT_EXCEPTION_STACK_TRACE)
                ex.printStackTrace();
            throw new org.xml.sax.SAXException(ex);
        }

    } // parse(InputSource)

    /**
     * reset all components before parsing.
     * 
     */
    public void reset()
        throws SAXException {

        super.reset();
        // reset every component
        fEntityManager.reset(this);
        fScanner.reset(this);
        // fDTDScanner.reset(this);
        // fValidator.reset(this);

    } // reset

} // class XMLDocumentParser
