/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.scanners;

import org.apache.xerces.framework.XMLString;
import org.apache.xerces.utils.QName;

import org.xml.sax.AttributeList;
import org.xml.sax.Attributes;

/**
 * @author Stubs generated by DesignDoc on Mon Sep 11 11:10:57 PDT 2000
 * @version $Id: XMLAttributes.java 316152 2000-09-27 20:37:00Z andyc $
 */
public class XMLAttributes
    implements AttributeList, Attributes {

    //
    // Data
    //

    // features

    /** Namespaces. */
    protected boolean fNamespaces = true;

    // data

    /** Attribute count. */
    protected int fSize;

    /** Attribute information. */
    protected Attribute[] fAttributes = new Attribute[4];

    //
    // Constructors
    //

    /** Default constructor. */
    public XMLAttributes() {
        for (int i = 0; i < fAttributes.length; i++) {
            fAttributes[i] = new Attribute();
        }
    } // <init>()

    //
    // Public methods
    //

    /** Sets whether namespace processing is being performed. */
    public void setNamespaces(boolean namespaces) {
        fNamespaces = namespaces;
    } // setNamespaces(boolean)

    /**
     * setAttribute
     * 
     * @param name 
     * @param type 
     * @param value 
     * 
     * @return 
     */
    public int setAttribute(QName name, String type, XMLString value) {

        // find attribute; create, if necessary
        int index = name.uri != null
                  ? getIndex(name.uri, name.localpart)
                  : getIndex(name.rawname);
        if (index == -1) {
            index = fSize;
            if (fSize++ == fAttributes.length) {
                Attribute[] attributes = new Attribute[fAttributes.length + 4];
                System.arraycopy(fAttributes, 0, attributes, 0, fAttributes.length);
                for (int i = fAttributes.length; i < attributes.length; i++) {
                    attributes[i] = new Attribute();
                }
                fAttributes = attributes;
            }
        }

        // set values
        Attribute attribute = fAttributes[index];
        attribute.name.setValues(name);
        attribute.type = type;
        attribute.value = value != null ? value.toString() : null;

        // return
        return index;

    } // setAttribute(QName,String,XMLString)

    /**
     * addAttributeEntity
     * 
     * @param index 
     * @param name 
     * @param offset 
     * @param length 
     */
    public void addAttributeEntity(int index, String name, int offset, int length) {
        throw new RuntimeException("not implemented");
    } // addAttributeEntity(int,String,int,int)

    /**
     * removeAttribute
     * 
     * @param name 
     */
    public void removeAttribute(QName name) {
        throw new RuntimeException("not implemented");
    } // removeAttribute(QName)

    /**
     * clear
     */
    public void clear() {
        fSize = 0;
    } // clear()

    /**
     * setName
     * 
     * @param index 
     * @param name 
     */
    public void setName(int index, QName name) {
        fAttributes[index].name.setValues(name);
    } // setName(int,QName)

    /**
     * getName
     * 
     * @param index 
     * @param name 
     */
    public void getName(int index, QName name) {
        name.setValues(fAttributes[index].name);
    } // getName(int,QName)

    /**
     * setType
     * 
     * @param index 
     * @param type 
     */
    public void setType(int index, String type) {
        fAttributes[index].type = type;
    } // setType(int,String)

    /**
     * setValue
     * 
     * @param index 
     * @param value 
     */
    public void setValue(int index, String value) {
        fAttributes[index].value = value;
    } // setValue(int,String)

    /**
     * setValue
     * 
     * @param index 
     * @param value 
     */
    public void setValue(int index, XMLString value) {
        setValue(index, value != null ? value.toString() : null);
    } // setValue

    /**
     * getValue
     * 
     * @param index 
     * @param value 
     */
    public void getValue(int index, XMLString value) {
        throw new RuntimeException("not implemented");
    } // getValue

    /**
     * getEntityCount
     * 
     * @param attrIndex 
     * 
     * @return 
     */
    public int getEntityCount(int attrIndex) {
        throw new RuntimeException("not implemented");
    } // getEntityCount

    /**
     * getEntityName
     * 
     * @param attrIndex 
     * @param entityIndex 
     * 
     * @return 
     */
    public String getEntityName(int attrIndex, int entityIndex) {
        throw new RuntimeException("not implemented");
    } // getEntityName

    /**
     * getEntityOffset
     * 
     * @param attrIndex 
     * @param entityIndex 
     * 
     * @return 
     */
    public int getEntityOffset(int attrIndex, int entityIndex) {
        throw new RuntimeException("not implemented");
    } // getEntityOffset

    /**
     * getEntityLength
     * 
     * @param attrIndex 
     * @param entityIndex 
     * 
     * @return 
     */
    public int getEntityLength(int attrIndex, int entityIndex) {
        throw new RuntimeException("not implemented");
    } // getEntityLength

    //
    // AttributeList and Attributes methods
    //

    /**
     * Return the number of attributes in the list.
     *
     * <p>Once you know the number of attributes, you can iterate
     * through the list.</p>
     *
     * @return The number of attributes in the list.
     */
    public int getLength() {
        return fSize;
    }

    /**
     * Look up an attribute's type by index.
     *
     * <p>The attribute type is one of the strings "CDATA", "ID",
     * "IDREF", "IDREFS", "NMTOKEN", "NMTOKENS", "ENTITY", "ENTITIES",
     * or "NOTATION" (always in upper case).</p>
     *
     * <p>If the parser has not read a declaration for the attribute,
     * or if the parser does not report attribute types, then it must
     * return the value "CDATA" as stated in the XML 1.0 Recommentation
     * (clause 3.3.3, "Attribute-Value Normalization").</p>
     *
     * <p>For an enumerated attribute that is not a notation, the
     * parser will report the type as "NMTOKEN".</p>
     *
     * @param index The attribute index (zero-based).
     * @return The attribute's type as a string, or null if the
     *         index is out of range.
     * @see #getLength
     */
    public String getType(int index) {
        if (index < 0 || index >= fSize) {
            return null;
        }
        return fAttributes[index].type;
    }

    /**
     * Look up an attribute's type by XML 1.0 qualified name.
     *
     * <p>See {@link #getType(int) getType(int)} for a description
     * of the possible types.</p>
     *
     * @param qName The XML 1.0 qualified name.
     * @return The attribute type as a string, or null if the
     *         attribute is not in the list or if qualified names
     *         are not available.
     */
    public String getType(String qname) {
        int index = getIndex(qname);
        return index != -1 ? fAttributes[index].type : null;
    }

    /**
     * Look up an attribute's value by index.
     *
     * <p>If the attribute value is a list of tokens (IDREFS,
     * ENTITIES, or NMTOKENS), the tokens will be concatenated
     * into a single string with each token separated by a
     * single space.</p>
     *
     * @param index The attribute index (zero-based).
     * @return The attribute's value as a string, or null if the
     *         index is out of range.
     * @see #getLength
     */
    public String getValue(int index) {
        if (index < 0 || index >= fSize) {
            return null;
        }
        return fAttributes[index].value;
    }

    /**
     * Look up an attribute's value by XML 1.0 qualified name.
     *
     * <p>See {@link #getValue(int) getValue(int)} for a description
     * of the possible values.</p>
     *
     * @param qName The XML 1.0 qualified name.
     * @return The attribute value as a string, or null if the
     *         attribute is not in the list or if qualified names
     *         are not available.
     */
    public String getValue(String qname) {
        int index = getIndex(qname);
        return index != -1 ? fAttributes[index].value : null;
    }

    //
    // AttributeList methods
    //

    /**
     * Return the name of an attribute in this list (by position).
     *
     * <p>The names must be unique: the SAX parser shall not include the
     * same attribute twice.  Attributes without values (those declared
     * #IMPLIED without a value specified in the start tag) will be
     * omitted from the list.</p>
     *
     * <p>If the attribute name has a namespace prefix, the prefix
     * will still be attached.</p>
     *
     * @param i The index of the attribute in the list (starting at 0).
     * @return The name of the indexed attribute, or null
     *         if the index is out of range.
     * @see #getLength 
     */
    public String getName(int index) {
        if (index < 0 || index >= fSize) {
            return null;
        }
        return fAttributes[index].name.rawname;
    }

    //
    // Attributes methods
    //

    /**
     * Look up the index of an attribute by XML 1.0 qualified name.
     *
     * @param qName The qualified (prefixed) name.
     * @return The index of the attribute, or -1 if it does not
     *         appear in the list.
     */
    public int getIndex(String qName) {
        for (int i = 0; i < fSize; i++) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.rawname != null &&
                attribute.name.rawname.equals(qName)) {
                return i;
            }
        }
        return -1;
    }
    
    /**
     * Look up the index of an attribute by Namespace name.
     *
     * @param uri The Namespace URI, or the empty string if
     *        the name has no Namespace URI.
     * @param localName The attribute's local name.
     * @return The index of the attribute, or -1 if it does not
     *         appear in the list.
     */
    public int getIndex(String uri, String localPart) {
        for (int i = 0; i < fSize; i++) {
            Attribute attribute = fAttributes[i];
            if (attribute.name.uri != null &&
                attribute.name.uri.equals(uri) &&
                attribute.name.localpart != null &&
                attribute.name.localpart.equals(localPart)) {
                return i;
            }
        }
        return -1;
    }

    /**
     * Look up an attribute's local name by index.
     *
     * @param index The attribute index (zero-based).
     * @return The local name, or the empty string if Namespace
     *         processing is not being performed, or null
     *         if the index is out of range.
     * @see #getLength
     */
    public String getLocalName(int index) {
        if (!fNamespaces) {
            return "";
        }
        if (index < 0 || index >= fSize) {
            return null;
        }
        return fAttributes[index].name.localpart;
    }

    /**
     * Look up an attribute's XML 1.0 qualified name by index.
     *
     * @param index The attribute index (zero-based).
     * @return The XML 1.0 qualified name, or the empty string
     *         if none is available, or null if the index
     *         is out of range.
     * @see #getLength
     */
    public String getQName(int index) {
        if (index < 0 || index >= fSize) {
            return null;
        }
        String rawname = fAttributes[index].name.rawname;
        return rawname != null ? rawname : "";
    }

    /**
     * Look up an attribute's type by Namespace name.
     *
     * <p>See {@link #getType(int) getType(int)} for a description
     * of the possible types.</p>
     *
     * @param uri The Namespace URI, or the empty String if the
     *        name has no Namespace URI.
     * @param localName The local name of the attribute.
     * @return The attribute type as a string, or null if the
     *         attribute is not in the list or if Namespace
     *         processing is not being performed.
     */
    public String getType(String uri, String localName) {
        if (!fNamespaces) {
            return null;
        }
        int index = getIndex(uri, localName);
        return index != -1 ? getType(index) : null;
    }

    /**
     * Look up an attribute's Namespace URI by index.
     *
     * @param index The attribute index (zero-based).
     * @return The Namespace URI, or the empty string if none
     *         is available, or null if the index is out of
     *         range.
     * @see #getLength
     */
    public String getURI(int index) {
        if (index < 0 || index >= fSize) {
            return null;
        }
        String uri = fAttributes[index].name.uri;
        return uri != null ? uri : "";
    }

    /**
     * Look up an attribute's value by Namespace name.
     *
     * <p>See {@link #getValue(int) getValue(int)} for a description
     * of the possible values.</p>
     *
     * @param uri The Namespace URI, or the empty String if the
     *        name has no Namespace URI.
     * @param localName The local name of the attribute.
     * @return The attribute value as a string, or null if the
     *         attribute is not in the list.
     */
    public String getValue(String uri, String localName) {
        int index = getIndex(uri, localName);
        return index != -1 ? getValue(index) : null;
    }

    //
    // Classes
    //

    /**
     * Attribute information.
     *
     * @author Andy Clark, IBM
     */
    static class Attribute {
        
        //
        // Data
        //

        /** Name. */
        public QName name = new QName();

        /** Type. */
        public String type;

        /** Value. */
        public String value;

    } // class Attribute

} // class XMLAttributes
