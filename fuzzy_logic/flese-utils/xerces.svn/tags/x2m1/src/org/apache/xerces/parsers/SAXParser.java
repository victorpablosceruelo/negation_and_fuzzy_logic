/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.parsers;

import java.io.IOException;

import org.apache.xerces.framework.XMLString;
import org.apache.xerces.scanners.XMLAttributes;
import org.apache.xerces.scanners.XMLDTDHandler;
import org.apache.xerces.utils.QName;
import org.apache.xerces.utils.SymbolTable;
import org.apache.xerces.validators.GrammarPool;

import org.xml.sax.ContentHandler;
import org.xml.sax.DTDHandler;
import org.xml.sax.DocumentHandler;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Parser;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DeclHandler;
import org.xml.sax.ext.LexicalHandler;

/**
 * @author Stubs generated by DesignDoc on Mon Sep 11 11:10:57 PDT 2000
 * @version $Id: SAXParser.java 316157 2000-09-27 23:21:41Z andyc $
 */
public class SAXParser
    extends XMLDocumentParser
    implements XMLDTDHandler, Parser, XMLReader {

    //
    // Data
    //

    // parser handlers

    /** Document handler. */
    private DocumentHandler fDocumentHandler;

    // parser/xmlreader handlers

    /** DTD handler. */
    private org.xml.sax.DTDHandler fDTDHandler;

    // xmlreader handlers

    /** Content handler. */
    private ContentHandler fContentHandler;

    /** Decl handler. */
    private DeclHandler fDeclHandler;

    /** Lexical handler. */
    private LexicalHandler fLexicalHandler;

    // cached information about the current document
    String fRootElement;
    String fPublicId;
    String fSystemId;

    // debugging

    /** Set to true and recompile to debug callbacks. */
    private static final boolean DEBUG_CALLBACKS = false;

    //
    // Constructors
    //

    /**
     * Default constructor.
     */
    public SAXParser() {
    }

    /**
     * Constructor allowing to specify the SymbolTable and GrammarPool to use.
     * 
     * @param symbolTable 
     * @param grammarPool 
     */
    public SAXParser(SymbolTable symbolTable, GrammarPool grammarPool) {
        super(symbolTable, grammarPool);
    }

    //
    // XMLDocumentHandler methods
    //

    public void startDocument() throws SAXException {
        if (fDocumentHandler != null) {
            fDocumentHandler.startDocument();
        }
        if (fContentHandler != null) {
            fContentHandler.startDocument();
        }
    }

    public void startElement(QName element, XMLAttributes attributes) 
        throws SAXException {
        if (fDocumentHandler != null) {
            fDocumentHandler.startElement(element.rawname, attributes);
        }
        if (fContentHandler != null) {
            fContentHandler.startElement(element.uri, element.localpart,
                                         element.rawname, attributes);
        }
    }

    public void characters(XMLString text, boolean whitespace) 
        throws SAXException {
        if (whitespace) {
            ignorableWhitespace(text);
        }
        else {
            if (fDocumentHandler != null) {
                fDocumentHandler.characters(text.ch, text.offset, text.length);
            }
            if (fContentHandler != null) {
                fContentHandler.characters(text.ch, text.offset, text.length);
            }
        }
    }

    public void ignorableWhitespace(XMLString text) 
        throws SAXException {
        if (fDocumentHandler != null) {
            fDocumentHandler.ignorableWhitespace(text.ch, text.offset, text.length);
        }
        if (fContentHandler != null) {
            fContentHandler.ignorableWhitespace(text.ch, text.offset, text.length);
        }
    }

    public void endElement(QName element) throws SAXException {
        if (fDocumentHandler != null) {
            fDocumentHandler.endElement(element.rawname);
        }
        if (fContentHandler != null) {
            fContentHandler.endElement(element.uri, element.localpart,
                                       element.rawname);
        }
    }

    public void endDocument() throws SAXException {
        if (fDocumentHandler != null) {
            fDocumentHandler.endDocument();
        }
        if (fContentHandler != null) {
            fContentHandler.endDocument();
        }
    }

    //
    // XMLDTDHandler methods
    //

    /**
     * startDTD
     */
    public void startDTD()
        throws SAXException {

        if (fLexicalHandler != null || DEBUG_CALLBACKS) {

            // perform callback
            if (DEBUG_CALLBACKS) {
                System.err.println("startDTD()");
            }
            if (fLexicalHandler != null) {
                fLexicalHandler.startDTD(fRootElement, fPublicId, fSystemId);
            }
        }

    } // startDTD

    /**
     * 
     * @param rootElement 
     * @param publicId 
     * @param systemId 
     */
    public void doctypeDecl(String rootElement,
                            String publicId, String systemId)
        throws SAXException {

        // Simply store the parameters which we need later in startDTD()
        fRootElement = rootElement;
        fPublicId = publicId;
        fSystemId = systemId;

    } // doctypeDecl


    /**
     * comment
     * 
     * @param text 
     */
    public void comment(XMLString text)
        throws SAXException {

        if (fLexicalHandler != null || DEBUG_CALLBACKS) {

            // perform callback
            if (DEBUG_CALLBACKS) {
                System.err.println("comment(" + text + ")");
            }
            if (fLexicalHandler != null) {
                fLexicalHandler.comment(text.ch, 0, text.length);
            }
        }

    } // comment

    /**
     * processingInstruction
     * 
     * @param target 
     * @param data 
     */
    public void processingInstruction(String target, XMLString data)
        throws SAXException {

        if (fDocumentHandler != null || fContentHandler != null
            || DEBUG_CALLBACKS) {
            //
            // REVISIT - I keep running into SAX apps that expect
            //   null data to be an empty string, which is contrary
            //   to the comment for this method in the SAX API.
            //

            // perform callback
            if (DEBUG_CALLBACKS) {
                System.err.println("processingInstruction(" + target
                                   + ", " + data + ")");
            }
            if (fDocumentHandler != null) {
                fDocumentHandler.processingInstruction(target,
                                                       data.toString());
            }
            if (fContentHandler != null) {
                fContentHandler.processingInstruction(target, data.toString());
            }

        } 

    } // processingInstruction

    /**
     * startExternalSubset
     */
    public void startExternalSubset()
        throws SAXException {
    } // startExternalSubset

    /**
     * endExternalSubset
     */
    public void endExternalSubset()
        throws SAXException {
    } // endExternalSubset

    /**
     * elementDecl
     * 
     * @param name 
     * @param contentModel 
     */
    public void elementDecl(String name, XMLString contentModel)
        throws SAXException {

        if (fDeclHandler != null || DEBUG_CALLBACKS) {

            // perform callback
            if (DEBUG_CALLBACKS) {
                System.err.println("elementDecl(" + name
                                   + ", " + contentModel + ")");
            }
            if (fDeclHandler != null) {
                fDeclHandler.elementDecl(name, contentModel.toString());
            }
        }

    } // elementDecl

    /**
     * startAttlist
     * 
     * @param elementName 
     */
    public void startAttlist(String elementName)
        throws SAXException {
    } // startAttlist

    /**
     * attributeDecl
     * 
     * @param elementName 
     * @param attributeName 
     * @param type 
     * @param enumeration 
     * @param defaultType 
     * @param defaultValue 
     */
    public void attributeDecl(String elementName, String attributeName, String type, String[] enumeration, String defaultType, XMLString defaultValue)
        throws SAXException {
    } // attributeDecl

    /**
     * endAttlist
     */
    public void endAttlist()
        throws SAXException {
    } // endAttlist

    /**
     * internalEntityDecl
     * 
     * @param name 
     * @param text 
     * @param isPE 
     */
    public void internalEntityDecl(String name, XMLString text, boolean isPE)
        throws SAXException {

        if (fDeclHandler != null || DEBUG_CALLBACKS) {

            // perform callback
            if (DEBUG_CALLBACKS) {
                System.err.println("internalEntityDecl("
                                   + name + ", " + text + ")");
            }
            if (fDeclHandler != null) {
                fDeclHandler.internalEntityDecl(isPE ? "%" + name : name,
                                                text.toString());
            }
        }

    } // internalEntityDecl

    /**
     * Report a parsed external entity declaration.
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     * @param isPE 
     */
    public void externalEntityDecl(String name, String publicId,
                                   String systemId, boolean isPE)
        throws SAXException {

        if (fDeclHandler != null || DEBUG_CALLBACKS) {

            // perform callback
            if (DEBUG_CALLBACKS) {
                System.err.println("externalEntityDecl(" + name + ", "
                                   + publicId + ", " + systemId + ")");
            }
            if (fDeclHandler != null) {
                fDeclHandler.externalEntityDecl(isPE ? "%" + name : name,
                                                publicId, systemId);
            }
        }

    } // externalEntityDecl

    /**
     * unparsedEntityDecl
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     * @param notation 
     */
    public void unparsedEntityDecl(String name, String publicId,
                                   String systemId, String notation)
        throws SAXException {

        if (fDTDHandler != null || DEBUG_CALLBACKS) {

           // perform callback
            if (DEBUG_CALLBACKS) {
                System.err.println("unparsedEntityDecl(" + name
                                   + ", " + publicId + ", " + systemId
                                   + ", " + notation + ")");
            }
            if (fDTDHandler != null) {
                fDTDHandler.unparsedEntityDecl(name, publicId,
                                               systemId, notation);
            }
        }

    } // unparsedEntityDecl

    /**
     * notationDecl
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     */
    public void notationDecl(String name, String publicId, String systemId)
        throws SAXException {

        if (fDTDHandler != null || DEBUG_CALLBACKS) {

            // perform callback
            if (DEBUG_CALLBACKS) {
                System.err.println("notationDecl(" + name + ", "
                                   + publicId + ", " + systemId + ")");
            }
            if (fDTDHandler != null) {
                fDTDHandler.notationDecl(name, publicId, systemId);
            }
        }

    } // notationDecl

    /**
     * startConditional
     * 
     * @param type 
     */
    public void startConditional(short type)
        throws SAXException {
    } // startConditional

    /**
     * endConditional
     */
    public void endConditional()
        throws SAXException {
    } // endConditional

    /**
     * endDTD
     */
    public void endDTD()
        throws SAXException {

        if (DEBUG_CALLBACKS) {
            System.err.println("endDTD()");
        }
        if (fLexicalHandler != null) {
            fLexicalHandler.endDTD();
        }

    } // endDTD

    //
    // Parser and XMLReader methods
    //

    /**
     * Allow an application to register a DTD event handler.
     *
     * <p>If the application does not register a DTD handler, all DTD
     * events reported by the SAX parser will be silently ignored.</p>
     *
     * <p>Applications may register a new or different handler in the
     * middle of a parse, and the SAX parser must begin using the new
     * handler immediately.</p>
     *
     * @param handler The DTD handler.
     * @exception java.lang.NullPointerException If the handler 
     *            argument is null.
     * @see #getDTDHandler
     */
    public void setDTDHandler(DTDHandler handler) {
        fDTDHandler = handler;
    }

    //
    // Parser methods
    //

    /**
     * Sets the document handler.
     * 
     * @param documentHandler 
     */
    public void setDocumentHandler(DocumentHandler documentHandler) {
        fDocumentHandler = documentHandler;
    } // setDocumentHandler

    //
    // XMLReader methods
    //

    /**
     * Allow an application to register a content event handler.
     *
     * <p>If the application does not register a content handler, all
     * content events reported by the SAX parser will be silently
     * ignored.</p>
     *
     * <p>Applications may register a new or different handler in the
     * middle of a parse, and the SAX parser must begin using the new
     * handler immediately.</p>
     *
     * @param handler The content handler.
     * @exception java.lang.NullPointerException If the handler 
     *            argument is null.
     * @see #getContentHandler
     */
    public void setContentHandler(ContentHandler handler) {
        if (handler == null) {
            throw new NullPointerException();
        }
        fContentHandler = handler;
    }

    /**
     * Return the current content handler.
     *
     * @return The current content handler, or null if none
     *         has been registered.
     * @see #setContentHandler
     */
    public ContentHandler getContentHandler() {
        return fContentHandler;
    }

    /**
     * Return the current DTD handler.
     *
     * @return The current DTD handler, or null if none
     *         has been registered.
     * @see #setDTDHandler
     */
    public DTDHandler getDTDHandler() {
        return fDTDHandler;
    } // getDTDHandler

    // SAX2 core properties

    /**
     * Set the DTD declaration event handler.
     * <p>
     * This method is the equivalent to the property:
     * <pre>
     * http://xml.org/sax/properties/declaration-handler
     * </pre>
     *
     * @param handler The new handler.
     *
     * @see #getDeclHandler
     * @see #setProperty
     */
    protected void setDeclHandler(DeclHandler handler) 
        throws SAXNotRecognizedException, SAXNotSupportedException {
        if (fParseInProgress) {
            throw new SAXNotSupportedException(
                "PAR011 Feature: http://xml.org/sax/properties/declaration-handler"
                +" is not supported during parse."
                +"\nhttp://xml.org/sax/properties/declaration-handler");
        }
        fDeclHandler = handler;
    }

    /**
     * Returns the DTD declaration event handler.
     *
     * @see #setDeclHandler
     */
    protected DeclHandler getDeclHandler() 
        throws SAXNotRecognizedException, SAXNotSupportedException {
        return fDeclHandler;
    }

    /**
     * Set the lexical event handler.
     * <p>
     * This method is the equivalent to the property:
     * <pre>
     * http://xml.org/sax/properties/lexical-handler
     * </pre>
     *
     * @param handler lexical event handler
     *
     * @see #getLexicalHandler
     * @see #setProperty
     */
    protected void setLexicalHandler(LexicalHandler handler)
        throws SAXNotRecognizedException, SAXNotSupportedException {
        if (fParseInProgress) {
            throw new SAXNotSupportedException(
            "PAR011 Feature: http://xml.org/sax/properties/lexical-handler"
            +" is not supported during parse."
            +"\nhttp://xml.org/sax/properties/lexical-handler");
        }
        fLexicalHandler = handler;
    }

    /**
     * Returns the lexical handler.
     *
     * @see #setLexicalHandler
     */
    protected LexicalHandler getLexicalHandler() 
        throws SAXNotRecognizedException, SAXNotSupportedException {
        return fLexicalHandler;
    }

    /**
     * Set the state of any feature in a SAX2 parser.  The parser
     * might not recognize the feature, and if it does recognize
     * it, it might not be able to fulfill the request.
     *
     * @param featureId The unique identifier (URI) of the feature.
     * @param state The requested state of the feature (true or false).
     *
     * @exception SAXNotRecognizedException If the
     *            requested feature is not known.
     * @exception SAXNotSupportedException If the
     *            requested feature is known, but the requested
     *            state is not supported.
     */
    public void setFeature(String featureId, boolean state)
        throws SAXNotRecognizedException, SAXNotSupportedException {

        //
        // SAX2 Features
        //

        if (featureId.startsWith(SAX2_FEATURES_PREFIX)) {
            String feature = featureId.substring(SAX2_FEATURES_PREFIX.length());

            /*
            //
            // http://xml.org/sax/features/normalize-text
            //   Ensure that all consecutive text is returned in a single callback to
            //   DocumentHandler.characters or DocumentHandler.ignorableWhitespace
            //   (true) or explicitly do not require it (false).
            //
            if (feature.equals("normalize-text")) {
                setNormalizeText(state);
                return;
            }
            */
            /*
            //
            // http://xml.org/sax/features/use-locator
            //   Provide a Locator using the DocumentHandler.setDocumentLocator
            //   callback (true), or explicitly do not provide one (false).
            //
            if (feature.equals("use-locator")) {
                setUseLocator(state);
                return;
            }
            */

            // http://xml.org/sax/features/namespace-prefixes
            //   controls the reporting of raw prefixed names and Namespace 
            //   declarations (xmlns* attributes): when this feature is false 
            //   (the default), raw prefixed names may optionally be reported, 
            //   and xmlns* attributes must not be reported.
            //
            if (feature.equals("namespace-prefixes")) {
                fFeatures.put(featureId, state ? Boolean.TRUE : Boolean.FALSE);
                return;
            }
            // http://xml.org/sax/features/string-interning
            //   controls the use of java.lang.String#intern() for strings
            //   passed to SAX handlers.
            //
            if (feature.equals("string-interning")) {
                if (state) {
                    throw new SAXNotSupportedException(
                        "PAR018 " + state + " state for feature \"" + featureId
                        + "\" is not supported.\n" + state + '\t' + featureId);
                }
                return;
            }
   
            //
            // Drop through and perform default processing
            //
        }

        //
        // Xerces Features
        //

        /*
        else if (featureId.startsWith(XERCES_FEATURES_PREFIX)) {
            String feature = featureId.substring(XERCES_FEATURES_PREFIX.length());
            //
            // Drop through and perform default processing
            //
        }
        */

        //
        // Perform default processing
        //

        super.setFeature(featureId, state);

    } // setFeature

    /**
     * Query the state of a feature.
     *
     * Query the current state of any feature in a SAX2 parser.  The
     * parser might not recognize the feature.
     *
     * @param featureId The unique identifier (URI) of the feature
     *                  being set.
     * @return The current state of the feature.
     * @exception org.xml.sax.SAXNotRecognizedException If the
     *            requested feature is not known.
     * @exception SAXNotSupportedException If the
     *            requested feature is known but not supported.
     */
    public boolean getFeature(String featureId)
        throws SAXNotRecognizedException, SAXNotSupportedException {

        //
        // SAX2 Features
        //

        if (featureId.startsWith(SAX2_FEATURES_PREFIX)) {
            String feature =
                featureId.substring(SAX2_FEATURES_PREFIX.length());

            /*
            //
            // http://xml.org/sax/features/normalize-text
            //   Ensure that all consecutive text is returned in a single
            //   callback to DocumentHandler.characters or
            //   DocumentHandler.ignorableWhitespace (true) or explicitly do
            //   not require it (false).
            //
            if (feature.equals("normalize-text")) {
                return getNormalizeText();
            }
            */
            /*
            //
            // http://xml.org/sax/features/use-locator
            //   Provide a Locator using the DocumentHandler.setDocumentLocator
            //   callback (true), or explicitly do not provide one (false).
            //
            if (feature.equals("use-locator")) {
                return getUseLocator();
            }
            */

            // http://xml.org/sax/features/namespace-prefixes
            //   controls the reporting of raw prefixed names and Namespace 
            //   declarations (xmlns* attributes): when this feature is false 
            //   (the default), raw prefixed names may optionally be reported, 
            //   and xmlns* attributes must not be reported.
            //
            if (feature.equals("namespace-prefixes")) {
                Boolean state = (Boolean) fFeatures.get(featureId);
                return state.booleanValue();
            }
            // http://xml.org/sax/features/string-interning
            //   controls the use of java.lang.String#intern() for strings
            //   passed to SAX handlers.
            //
            if (feature.equals("string-interning")) {
                return false;
            }

            //
            // Drop through and perform default processing
            //
        }

        //
        // Xerces Features
        //

        /*
        else if (featureId.startsWith(XERCES_FEATURES_PREFIX)) {
            //
            // Drop through and perform default processing
            //
        }
        */

        //
        // Perform default processing
        //

        return super.getFeature(featureId);

    } // getFeature

    /**
     * Set the value of any property in a SAX2 parser.  The parser
     * might not recognize the property, and if it does recognize
     * it, it might not support the requested value.
     *
     * @param propertyId The unique identifier (URI) of the property
     *                   being set.
     * @param Object The value to which the property is being set.
     *
     * @exception SAXNotRecognizedException If the
     *            requested property is not known.
     * @exception SAXNotSupportedException If the
     *            requested property is known, but the requested
     *            value is not supported.
     */
    public void setProperty(String propertyId, Object value)
        throws SAXNotRecognizedException, SAXNotSupportedException {

        //
        // SAX2 core properties
        //

        if (propertyId.startsWith(SAX2_PROPERTIES_PREFIX)) {
            String property =
                propertyId.substring(SAX2_PROPERTIES_PREFIX.length());
            //
            // http://xml.org/sax/properties/lexical-handler
            // Value type: org.xml.sax.ext.LexicalHandler
            // Access: read/write, pre-parse only
            //   Set the lexical event handler.
            //
            if (property.equals("lexical-handler")) {
                try {
                    setLexicalHandler((LexicalHandler)value);
                }
                catch (ClassCastException e) {
                    throw new SAXNotSupportedException(
                    "PAR012 For propertyID \""
                    +propertyId+"\", the value \""
                    +value+"\" cannot be cast to LexicalHandler."
                    +'\n'+propertyId+'\t'+value+"\tLexicalHandler");
                }
                return;
            }
            //
            // http://xml.org/sax/properties/declaration-handler
            // Value type: org.xml.sax.ext.DeclHandler
            // Access: read/write, pre-parse only
            //   Set the DTD declaration event handler.
            //
            if (property.equals("declaration-handler")) {
                try {
                    setDeclHandler((DeclHandler)value);
                }
                catch (ClassCastException e) {
                    throw new SAXNotSupportedException(
                    "PAR012 For propertyID \""
                    +propertyId+"\", the value \""
                    +value+"\" cannot be cast to DeclHandler."
                    +'\n'+propertyId+'\t'+value+"\tDeclHandler"
                    );
                }
                return;
            }
            //
            // http://xml.org/sax/properties/dom-node
            // Value type: DOM Node
            // Access: read-only
            //   Get the DOM node currently being visited, if the SAX parser is
            //   iterating over a DOM tree.  If the parser recognises and
            //   supports this property but is not currently visiting a DOM
            //   node, it should return null (this is a good way to check for
            //   availability before the parse begins).
            //
            if (property.equals("dom-node")) {
                throw new SAXNotSupportedException(
                    "PAR013 Property \""+propertyId+"\" is read only."
                    +'\n'+propertyId
                    ); // read-only property
            }
            //
            // Drop through and perform default processing
            //
        }

        //
        // Xerces Properties
        //

        /*
        else if (propertyId.startsWith(XERCES_PROPERTIES_PREFIX)) {
            //
            // Drop through and perform default processing
            //
        }
        */

        //
        // Perform default processing
        //

        super.setProperty(propertyId, value);

    } // setProperty

    /**
     * Query the value of a property.
     *
     * Return the current value of a property in a SAX2 parser.
     * The parser might not recognize the property.
     *
     * @param propertyId The unique identifier (URI) of the property
     *                   being set.
     * @return The current value of the property.
     * @exception org.xml.sax.SAXNotRecognizedException If the
     *            requested property is not known.
     * @exception SAXNotSupportedException If the
     *            requested property is known but not supported.
     */
    public Object getProperty(String propertyId)
        throws SAXNotRecognizedException, SAXNotSupportedException {

        //
        // SAX2 core properties
        //

        if (propertyId.startsWith(SAX2_PROPERTIES_PREFIX)) {
            String property =
                propertyId.substring(SAX2_PROPERTIES_PREFIX.length());
            //
            // http://xml.org/sax/properties/lexical-handler
            // Value type: org.xml.sax.ext.LexicalHandler
            // Access: read/write, pre-parse only
            //   Set the lexical event handler.
            //
            if (property.equals("lexical-handler")) {
                return getLexicalHandler();
            }
            //
            // http://xml.org/sax/properties/declaration-handler
            // Value type: org.xml.sax.ext.DeclHandler
            // Access: read/write, pre-parse only
            //   Set the DTD declaration event handler.
            //
            if (property.equals("declaration-handler")) {
                return getDeclHandler();
            }
            //
            // http://xml.org/sax/properties/dom-node
            // Value type: DOM Node
            // Access: read-only
            //   Get the DOM node currently being visited, if the SAX parser is
            //   iterating over a DOM tree.  If the parser recognises and
            //   supports this property but is not currently visiting a DOM
            //   node, it should return null (this is a good way to check for
            //   availability before the parse begins).
            //
            if (property.equals("dom-node")) {
                throw new SAXNotSupportedException(
                "PAR014 Cannot getProperty(\""+propertyId
                +"\". No DOM Tree exists.\n"+propertyId
                ); // we are not iterating a DOM tree
            }
            //
            // Drop through and perform default processing
            //
        }

        //
        // Xerces properties
        //

        /*
        else if (propertyId.startsWith(XERCES_PROPERTIES_PREFIX)) {
            //
            // Drop through and perform default processing
            //
        }
        */

        //
        // Perform default processing
        //

        return super.getProperty(propertyId);

    } // getProperty

} // class SAXParser
