/*
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999,2000 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xerces" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, International
 * Business Machines, Inc., http://www.apache.org.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 */

package org.apache.xerces.readers;

import java.io.IOException;

import org.apache.xerces.framework.XMLComponent;
import org.apache.xerces.framework.XMLComponentManager;
import org.apache.xerces.utils.SymbolTable;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;

/**
 * The entity manager handles the registration of general and parameter
 * entities; resolves entities; and starts entities. The entity manager
 * is a central component in a standard parser configuration and this
 * class works directly with the entity scanner to manage the underlying
 * readers.
 * <p>
 * This component requires the following features and properties from the
 * component manager that uses it:
 * <ul>
 *  <li>http://apache.org/xml/properties/internal/entity-resolver</li>
 *  <li>http://apache.org/xml/properties/internal/symbol-table</li>
 * </ul>
 *
 *
 * @author Stubs generated by DesignDoc on Mon Sep 18 18:23:16 PDT 2000
 * @author Andy Clark, IBM
 *
 * @version $Id: XMLEntityManager.java 316180 2000-10-01 04:12:32Z andyc $
 */
public class XMLEntityManager
    implements XMLComponent {

    //
    // Constants
    //

    // xerces features

    /** Xerces feature prefix. */
    //protected static final String XERCES_FEATURE_PREFIX = "http://apache.org/xml/features/";

    // xerces properties

    /** Xerces property prefix. */
    protected static final String XERCES_PROPERTY_PREFIX = "http://apache.org/xml/properties/";

    /** Entity resolver property id. */
    protected static final String ENTITY_RESOLVER_PROPERTY = "internal/entity-resolver";

    /** Symbol table property id. */
    protected static final String SYMBOL_TABLE_PROPERTY = "internal/symbol-table";

    //
    // Data
    //

    /** Entity scanner. */
    protected XMLEntityScanner fEntityScanner;

    // properties

    /** Entity resolver. */
    protected EntityResolver fEntityResolver;

    //
    // Constructors
    //

    /** Default constructor. */
    public XMLEntityManager() {
        fEntityScanner = new XMLEntityScanner();
    }

    //
    // Public methods
    //

    /**
     * addGeneralEntity
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     * @param baseSystemId 
     */
    public void addGeneralEntity(String name, String publicId, String systemId, String baseSystemId) {
        throw new RuntimeException("XMLEntityManager#addGeneralEntity(String,String,String,String) not implemented");
    } // addGeneralEntity(String,String,String,String)

    /**
     * addGeneralEntity
     * 
     * @param name 
     * @param text 
     */
    public void addGeneralEntity(String name, String text) {
        throw new RuntimeException("XMLEntityManager#addGeneralEntity(String,String) not implemented");
    } // addGeneralEntity(String,String)

    /**
     * addParameterEntity
     * 
     * @param name 
     * @param publicId 
     * @param systemId 
     * @param baseSystemId 
     */
    public void addParameterEntity(String name, String publicId, String systemId, String baseSystemId) {
        throw new RuntimeException("XMLEntityManager#addParameterEntity(String,String,String,String) not implemented");
    } // addParameterEntity(String,String,String,String)

    /**
     * addParameterEntity
     * 
     * @param name 
     * @param text 
     */
    public void addParameterEntity(String name, String text) {
        throw new RuntimeException("XMLEntityManager#addParameterEntity(String,String) not implemented");
    } // addParameterEntity(String,String)

    /**
     * resolveEntity
     * 
     * @param publicId 
     * @param systemId 
     * @param baseSystemId 
     * 
     * @return 
     */
    public InputSource resolveEntity(String publicId, String systemId, String baseSystemId)
        throws IOException, SAXException {
        throw new RuntimeException("XMLEntityManager#resolveEntity(String,String,String) not implemented");
    } // resolveEntity

    /**
     * startGeneralEntity
     * 
     * @param entityName 
     * @param parameter 
     */
    public void startGeneralEntity(String entityName) {
        throw new RuntimeException("XMLEntityManager#startGeneralEntity(String) not implemented");
    } // startGeneralEntity

    /**
     * startParameterEntity
     * 
     * @param entityName 
     * @param parameter 
     */
    public void startParameterEntity(String entityName) {
        throw new RuntimeException("XMLEntityManager#startParameterEntity(String) not implemented");
    } // startParameterEntity

    /**
     * startEntity
     * 
     * @param inputSource 
     */
    public void startEntity(InputSource inputSource) 
        throws IOException, SAXException {
        fEntityScanner.startEntity(inputSource);
    } // startEntity

    /**
     * getEntityScanner
     * 
     * @return 
     */
    public XMLEntityScanner getEntityScanner() {
        return fEntityScanner;
    } // getEntityScanner

    //
    // XMLComponent methods
    //

    /**
     * reset
     * 
     * @param configurationManager 
     */
    public void reset(XMLComponentManager componentManager)
        throws SAXException {

        // save information
        final String ENTITY_RESOLVER = XERCES_PROPERTY_PREFIX + ENTITY_RESOLVER_PROPERTY;
        fEntityResolver = (EntityResolver)componentManager.getProperty(ENTITY_RESOLVER);

        // set symbol table on scanner
        final String SYMBOL_TABLE = XERCES_PROPERTY_PREFIX + SYMBOL_TABLE_PROPERTY;
        SymbolTable symboTable = (SymbolTable)componentManager.getProperty(SYMBOL_TABLE);
        fEntityScanner.setSymbolTable(symboTable);

    } // reset(XMLComponentManager)

    /**
     * setFeature
     * 
     * @param featureId 
     * @param state 
     */
    public void setFeature(String featureId, boolean state)
        throws SAXNotRecognizedException, SAXNotSupportedException {
    } // setFeature(String,boolean)

    /**
     * setProperty
     * 
     * @param propertyId 
     * @param value 
     */
    public void setProperty(String propertyId, Object value)
        throws SAXNotRecognizedException, SAXNotSupportedException {

        // Xerces properties
        if (propertyId.startsWith(XERCES_PROPERTY_PREFIX)) {
            String property = propertyId.substring(XERCES_PROPERTY_PREFIX.length());
            if (property.equals(ENTITY_RESOLVER_PROPERTY)) {
                fEntityResolver = (EntityResolver)value;
                return;
            }
            if (property.equals(SYMBOL_TABLE_PROPERTY)) {
                fEntityScanner.setSymbolTable((SymbolTable)value);
                return;
            }
        }

    } // setProperty(String,Object)

} // class XMLEntityManager
