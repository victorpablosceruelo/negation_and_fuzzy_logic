<?xml version="1.0" encoding="ISO-8859-1"?>

<document>

  <properties>
    <title>HttpClient Cookie Guide</title>
    <author email="adrian@intencha.com">Adrian Sutton</author>
    <author email="oleg@ural.ru">Oleg Kalnichevski</author>
    <revision>$Id: cookies.xml 134226 2003-06-03 21:26:35Z olegk $</revision>
  </properties>

  <body>

    <section name="Introduction">
      <p>HttpClient supports automatic management of cookies, including
      allowing the server to set cookies and automatically return them to the
      server when required.  It is also possible to manually set cookies to be
      sent to the server.</p>

      <p>Unfortunately, there are several at times conflicting  standards for 
      handling Cookies: the Netscape Cookie draft, RFC2109, RFC2965 and a large
      number of vendor specific implementations that are compliant with neither 
      specification. To deal with this, HttpClient provides policy driven cookie 
      management. This guide will explain how to use the different cookie 
      specifications and identify some of the common problems people have when 
      using Cookies and HttpClient.</p>
    </section>

    <section name="Available Specifications">
      <p>The following cookie specifications are supported by HttpClient.</p>

      <subsection name="Netscape Draft">
        <p>The Netscape draft is the original cookie specification which formed
        the basis for RFC2109.  Despite this it has some significant
        differences with RFC2109 and thus may be required for compatibility
        with some servers.</p>

        <p>The Netscape cookie draft is available at <a
        href="http://wp.netscape.com/newsref/std/cookie_spec.html">http://wp.netscape.com/newsref/std/cookie_spec.html</a>
        </p>
      </subsection>

      <subsection name="RFC2109">
        <p>RFC2109 is the first official cookie specification released by the W3C.
        Theoretically, all servers that handle version 1 cookies should use this
        specification and as such this specification is used by default within
        HttpClient.</p>

        <p>Unfortunately, many servers either incorrectly implement this
        standard or are still using the Netscape draft so occasionally this
        specification is too strict.  If this is the case, you should switch to
        the compatibility specification as described below.</p>

        <p>RFC2109 is available at
        <a href="http://www.w3.org/Protocols/rfc2109/rfc2109.txt">http://www.w3.org/Protocols/rfc2109/rfc2109.txt</a>
        </p>
      </subsection>

      <subsection name="Compatibility">
        <p>The compatibility specification is designed to be compatible with as
        many different servers as possible even if they are not completely
        standards compliant. If you are encountering problems with parsing
        cookies, you should probably try using this specification.</p>
      </subsection>

    </section>

    <section name="Unsupported Specifications">
      <p>The following cookie specifications are not presently supported by HttpClient.</p>

      <subsection name="RFC2965">
        <p>RFC2965 defines cookie version 2 and attempts to address the shortcomings 
        of the RFC2109 regarding cookie version 1. RFC2965 is intended to eventually 
        supersede RFC2109.</p>

        <p>Currently HttpClient does not implement this specification. Support for
           version 2 cookies will be added in the future</p>

        <p>RFC2965 is available at
        <a href="http://www.w3.org/Protocols/rfc2965/rfc2965.txt">http://www.w3.org/Protocols/rfc2965/rfc2965.txt</a>
        </p>
      </subsection>
      
    </section>

    <section name="Specifying the Specification">
      <p>There is two ways to specify which cookie specification should be
      used, either for each HttpState instance, or by setting the default for
      newly created HttpState instances.</p>

      <subsection name="Per HttpState">
        <p>In most cases, the best way to set which cookie specification to use
        is using the <code>setCookiePolicy(int policy)</code> method on
        <code>HttpState</code>.  Any HttpClient using that HttpState will then
        use the specified cookie policy.  The value of <code>policy</code>
        should be one of:</p>
        <ul>
          <li><code>CookiePolicy.COMPATIBILITY</code></li>
          <li><code>CookiePolicy.NETSCAPE_DRAFT</code></li>
          <li><code>CookiePolicy.RFC2109</code></li>
        </ul>

        <source>
        HttpClient client = new HttpClient();
        client.getState().setCookiePolicy(CookiePolicy.COMPATIBILITY);
        </source>
      </subsection>

      <subsection name="Default">
        <p>The default cookie specification can be set by setting the system
        property <code>apache.commons.httpclient.cookiespec</code> to one
        of:</p>

        <ul>
          <li><code>"COMPATIBILITY"</code></li>
          <li><code>"NETSCAPE_DRAFT"</code></li>
          <li><code>"RFC2109"</code></li>
        </ul>

        <p>This setting will be used by any newly created HttpState objects,
        however existing HttpState instances will not be affected.</p>

        <source>
        System.setProperty("apache.commons.httpclient.cookiespec", "COMPATIBILITY");
        </source>
      </subsection>
    </section>

    <section name="Common Problems">
      <p>The most common problems encountered with parsing cookies is due to
      non-compliant servers.  In these cases, switching to the compatibility
      cookie specification usually solves the problem.</p>
    </section>
  </body>
</document>
