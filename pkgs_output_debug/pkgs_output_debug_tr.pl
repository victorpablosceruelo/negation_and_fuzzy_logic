% Debugger Package - Mon 05/07/2010
%
% Victor Pablos Ceruelo - vpablos@babel.ls.fi.upm.es
%

:- module(pkgs_output_debug_tr,[pkgs_output_debug/3]).

:- use_module(library(write)).

%:- dynamic output_file_is_open/1.
%:- dynamic output_stream/1.
:- dynamic saved_clause_for_debug/1.
:- dynamic debugging_file_name/1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                     Options                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


filename_prefix("debug_file_of_file_").
filename_suffix(".pl").
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                Consulting a file                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pkgs_output_debug(Input, Output, FileName) :- 
	pkgs_output_debug_aux(Input, Output, FileName).

pkgs_output_debug_aux(end_of_file, [end_of_file], FileName) :- !,
	openOutputFile(Stream, FileName),
	findall(CL,(retract_fact(saved_clause_for_debug(CL))),Clauses,[end_of_file]),
	debug_file_head(FileName),
	debug_sentences(Clauses),
%	write_eof,
	close_output_file(Stream).

pkgs_output_debug_aux(0, [], FileName) :- !,
	computeOutputFileName(FileName),
	debugging_file_name(FN_Out),
	write('INFO: Debugging to file '),
	write(FN_Out),
	nl.

pkgs_output_debug_aux(:-(define_pkgs_output_debug_file(File)), [], _FileName) :- !,
	write('INFO: Changing debugging to file '),
	toAtom(File, RealFile),
	write(RealFile),
	nl,
	retract_fact(debugging_file_name(_Old_FN_Out)),
	assertz_fact(debugging_file_name(RealFile)).

pkgs_output_debug_aux(Input, [Input], _FileName) :-
	assertz_fact(saved_clause_for_debug(Input)), !.

pkgs_output_debug_aux(Input, [Input], _FileName) :-
	write('ERROR: Impossible to store the following clause: '),
	write(Input), nl.

computeOutputFileName(FileName) :-
	name(FileName, FileName_String),
	filename_prefix(FileNamePrefix),
	append(FileNamePrefix, FileName_String, Debug_FileName_String_Aux),
	filename_suffix(FileNameSuffix),
	append(Debug_FileName_String_Aux, FileNameSuffix, Debug_FileName_String),
	name(FN_Out, Debug_FileName_String),	% Convert string to atom.
	assertz_fact(debugging_file_name(FN_Out)).

%toString(Atom, String) :-
%	(
%	    name(Atom, String) % Convert atom to string.
%	;
%	    (
%		name(_Unused, Atom),
%		String = Atom
%	    )
%	).

toAtom(String, Atom) :-
	(
	    string(String),
	    name(Atom, String) % Convert string to atom.
	;
	    (
		atom(String),
		name(String, _Unused),
		Atom = String
	    )
	).


openOutputFile(Stream, _FileName) :-
	debugging_file_name(Debug_FileName),
	toAtom(Debug_FileName, FN_Out),
	open(FN_Out,write,Stream),
	set_output(Stream).
%	assertz_fact(output_file_is_open('Yes')).

close_output_file(Stream) :-
	flush_output(Stream),
	close(Stream).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%        Switch terms to prolog sentences            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

debug_file_head(FileName) :-
	nl, 
	write_sentence(['% This file is automatically generated when using the package pkgs_output_debug in source file '], FileName),
	nl, nl.

% write_eof :- write_sentence(['% DBG PKG :: '], end_of_file).

debug_sentences(Clauses) :-
%	write_sentences_list(['% DBG PKG :: '], Clauses).
	write_sentences_list([''], Clauses).

write_sentences_list(Pre, []) :- !, 
	write_pre_messages(Pre), 
	nl, nl.
write_sentences_list(Pre, [Sentence]) :- !,
	write_sentence(Pre, Sentence).
write_sentences_list(Pre, [Sentence|Others]) :- !,
	write_sentence(Pre, Sentence),
	write_sentences_list(Pre, Others).
write_sentences_list(Pre, Whatever) :- !,
	write_pre_messages(Pre),
	write_sentence_error(Whatever).	

write_sentence(Pre, Sentence) :- !,
	write_pre_messages(Pre),
	write('('),
	write_sentence_aux(Sentence),
	write(').'), nl, !.

write_pre_messages([]) :- !.
write_pre_messages([Msg]) :- !,
	write(Msg).
write_pre_messages([Msg|Others]) :- !,
	write(Msg),
	write_pre_messages(Others).
	
write_sentence_aux(Sent) :-		% Variables
	var(Sent), !, 
	write(Sent).

write_sentence_aux(end_of_file) :- !,
%	nl, nl.
	write(end_of_file).

write_sentence_aux(Sent) :-		% Or
	functor(Sent,';',2), !, 
	Sent =..[';'|Args],
	write('('),
	write_sentence_list_args(Args, ' ; '),
	write(')').

write_sentence_aux(Sent) :-		% And
	functor(Sent,',',2), 
	Sent=..[','|Args], !,
	write('('),
	write_sentence_list_args(Args, ', '),
	write(')').

write_sentence_aux(Sent) :-	% /
	functor(Sent,'/',2),
	Sent=..['/'|Args], !,
%	write('('),
	write_sentence_list_args(Args, '/').
%	write(')').


%write_sentence_aux(Sent) :-	% List
%	functor(Sent,Name,X), !,
%	write(functor(Sent,Name,X)), nl, 
%	is_a_list(Sent), !, 
%	write('['),
%	write_sentence_list_args(Sent, ', '),
%	write(']').
	
write_sentence_aux(Sent) :-	% List.
	functor(Sent,'.',2), 
	Sent=..['.',Arg1,Arg2], !,
	write('['),
	write_sentence_aux(Arg1),
	write_sentence_arg_being_list(Arg2),
	write(']').

write_sentence_aux(Sent) :-	% Rule.
	functor(Sent,':-',2), 
	Sent=..[':-'|Args], !,
	write('('),
	write_sentence_list_args(Args, ' :- '),
	write(')').

write_sentence_aux(Sent) :-	% Functor Ar > 1
	functor(Sent,Name,Arity),
%	write(functor(Sent,Name,Arity)), nl,
	Arity > 1, 
	Sent=..[Name|Args], !, 
	write(Name),
	write('('),
	write_sentence_list_args(Args, ', '),
	write(')').

write_sentence_aux(Sent) :-	% Functor Ar == 1
	functor(Sent,Name,Arity),
%	write(functor(Sent,Name,Arity)), nl,
	Arity == 1,
	Sent=..[Name,Arg], !, 
	write(Name),
	write('('),
	write_sentence_aux(Arg),
	write(')').

write_sentence_aux(Sent) :-	% Functor Ar == 0
	functor(Sent,Name,Arity),
%	write(functor(Sent,Name,Arity)), nl,
	Arity == 0, !, 
	write(Name).

write_sentence_aux(Sent) :-		% Others
	!, 
	write_sentence_error(Sent).

write_sentence_list_args([], _Separator) :- !.
write_sentence_list_args([Sent], _Separator) :- !,
	write_sentence_aux(Sent).
write_sentence_list_args([Sent|Others], Separator) :- !,
	write_sentence_aux(Sent),
	write(Separator),
	write_sentence_list_args(Others, Separator).
write_sentence_list_args(Sent, Separator) :- !,
	write_sentence_error(Separator), 
	write_sentence_error(Sent).

write_sentence_arg_being_list(Arg2) :- % Variable
	var(Arg2), !,
	write('|'),
	write_sentence_aux(Arg2).
write_sentence_arg_being_list(Arg2) :- % Empty
	functor(Arg2,'[]',0). 
write_sentence_arg_being_list(Arg2) :- % Sublist
	functor(Arg2,'.',2), 
	Arg2=..['.',Arg2_1,Arg2_2], !,
	write(','),
	write_sentence_aux(Arg2_1),
	write_sentence_arg_being_list(Arg2_2).
write_sentence_arg_being_list(Arg2) :- % Maybe a sentence
	write('|'),
	write_sentence_aux(Arg2).
write_sentence_arg_being_list(Arg2) :- !, % Error
	write_sentence_error(Arg2).

write_sentence_error(Sent) :-
	nl,write('% UNKNOWN SENTENCE: '), 
	write(Sent),
	nl, !. % Don't do backtracking.


